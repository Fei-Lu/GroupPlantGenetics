package xiaohan.rareallele;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.math.BigDecimal;import java.util.*;public class rareallele {    public rareallele() {//        this.getGTvcf();//将VCF转换成GT格式        this.getupstreamSNPcount();//根据上游的不同位置call出rare allele count//        this.SplitPhenoBychr();//根据chr拆分pheno文件//        this.extractTopSNP();//获取高表达的SNP文件//        this.extractHomologousGene();//获取同源基因相关的文件//        this.extractsubgenome();//获取亚基因组的文件//        this.extractTopPheno();//获取高表达的表达文件    }    public void extractTopPheno() {        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3";        String infileS = "countResult3_DESeq2.txt";//        String outfileS = "Top5000_S3.txt";        String outfileS = "Top5000-10000_S3.txt";//        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7";//        String infileS = "countResult7_DESeq2.txt";//        String outfileS = "Top5000_S7.txt";//        String outfileS = "Top5000-10000_S7.txt";//        String infor = "Top_5000_median_exp_genes.txt";        String infor = "Top_5001_to_10000_median_exp_genes.txt";        try {            String temp = null;            String[] temps = null;            HashSet GeneSet = new HashSet();            HashMap<String, Integer> geneMap = new HashMap();            BufferedReader br = IOUtils.getTextReader(new File(inputDir, infor).getAbsolutePath());            System.out.println(new File(inputDir, infor).getAbsolutePath());            while ((temp = br.readLine()) != null) {                if (temp.startsWith("x")) continue;                temps = temp.split("\t");                System.out.println(temps[1]);                GeneSet.add(temps[1]);                geneMap.put(temps[1], Integer.parseInt(temps[0]));                continue;            }            String temp1 = null;            String[] temps1 = null;            String[] rank = new String[5000];            BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, infileS).getAbsolutePath());            BufferedWriter bw = IOUtils.getTextWriter(new File(inputDir, outfileS).getAbsolutePath());            while ((temp1 = br1.readLine()) != null) {                temps1 = temp1.split("\t");                if (temp1.startsWith("g")) {                    bw.write(temp1);                    bw.newLine();                }                if (GeneSet.contains(temps1[0])) {                    String gene = temps1[0];                    int index = geneMap.get(gene);                    rank[index - 1] = temp1;                }            }            for (int i = 0; i < rank.length; i++) {                bw.write(rank[i]);                bw.newLine();            }            br1.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void extractTopSNP() {//        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/snp_count/major_SNP_site";//        String inforDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/expressionTable";        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/snp_count/major_SNP_site";        String inforDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable";        String infor = "Top_5000_median_exp_genes.txt";//        String infor = "Top_5001_to_10000_median_exp_genes.txt";        File[] fs = new File(inputDir).listFiles();        List<File> fList = new ArrayList(Arrays.asList());        fs = IOUtils.listFilesStartsWith(fs, "all");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;            String Name = fs[i].getName().split("_")[1] + "_" + fs[i].getName().split("_")[2];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String temp = null;                String[] temps = null;                HashSet GeneSet = new HashSet();                HashMap<String, Integer> geneMap = new HashMap();                BufferedReader br = IOUtils.getTextReader(new File(inforDir, infor).getAbsolutePath());                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("x")) continue;                    temps = temp.split("\t");                    GeneSet.add(temps[1]);                    geneMap.put(temps[1], Integer.parseInt(temps[0]));                    continue;                }                String temp1 = null;                String[] temps1 = null;                String[] rank = new String[5000];                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());                BufferedReader br2 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());//                    BufferedWriter bw = IOUtils.getTextWriter(new File(inputDir, "Top5000_" +f+ "_count.txt").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(inputDir, "Top5000-10000_" + f + "_count.txt").getAbsolutePath());                while ((temp1 = br2.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (temps1[0].startsWith("gene")) {                        bw.write(temp1);                        bw.newLine();                    }                }                while ((temp1 = br1.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (GeneSet.contains(temps1[0])) {                        String gene = temps1[0];                        int index = geneMap.get(gene);                        rank[index - 1] = temp1;                    }                }                for (int i = 0; i < rank.length; i++) {                    bw.write(rank[i]);                    bw.newLine();                }                br1.close();                br2.close();                bw.flush();                bw.close();                br.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void extractHomologousGene() {//        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/snp_count/major_SNP_site";        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/snp_count/major_SNP_site";        String inforDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data";        String infor = "TheABD.txt";        File[] fs = new File(inputDir).listFiles();        List<File> fList = new ArrayList(Arrays.asList());        fs = IOUtils.listFilesStartsWith(fs, "all");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;            String Name = fs[i].getName().split("_")[1] + "_" + fs[i].getName().split("_")[2];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String temp = null;                String[] temps = null;                HashSet GeneSetA = new HashSet();                HashSet GeneSetB = new HashSet();                HashSet GeneSetD = new HashSet();                HashMap<String, Integer> genesubAMap = new HashMap();                HashMap<String, Integer> genesubBMap = new HashMap();                HashMap<String, Integer> genesubDMap = new HashMap();                BufferedReader br = IOUtils.getTextReader(new File(inforDir, infor).getAbsolutePath());                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    GeneSetA.add(temps[1]);                    GeneSetB.add(temps[2]);                    GeneSetD.add(temps[3]);                    genesubAMap.put(temps[1], Integer.parseInt(temps[0]));                    genesubBMap.put(temps[2], Integer.parseInt(temps[0]));                    genesubDMap.put(temps[3], Integer.parseInt(temps[0]));                    continue;                }                String temp1 = null;                String[] temps1 = null;                String[] rankA = new String[17108];                String[] rankB = new String[17108];                String[] rankD = new String[17108];                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());                BufferedReader br2 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());                BufferedWriter bw1 = IOUtils.getTextWriter(new File(inputDir, "Ahomo_" + f + "_count.txt").getAbsolutePath());                BufferedWriter bw2 = IOUtils.getTextWriter(new File(inputDir, "Bhomo_" + f + "_count.txt").getAbsolutePath());                BufferedWriter bw3 = IOUtils.getTextWriter(new File(inputDir, "Dhomo_" + f + "_count.txt").getAbsolutePath());                while ((temp1 = br2.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (temps1[0].startsWith("gene")) {                        bw1.write(temp1);                        bw1.newLine();                        bw2.write(temp1);                        bw2.newLine();                        bw3.write(temp1);                        bw3.newLine();                    }                }                while ((temp1 = br1.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (GeneSetA.contains(temps1[0])) {                        String gene = temps1[0];                        int indexA = genesubAMap.get(gene);                        rankA[indexA - 1] = temp1;                    }                    if (GeneSetB.contains(temps1[0])) {                        String gene = temps1[0];                        int indexB = genesubBMap.get(gene);                        rankB[indexB - 1] = temp1;                    }                    if (GeneSetD.contains(temps1[0])) {                        String gene = temps1[0];                        int indexD = genesubDMap.get(gene);                        rankD[indexD - 1] = temp1;                    }                }                for (int i = 0; i < rankA.length; i++) {                    bw1.write(rankA[i]);                    bw1.newLine();                }                for (int i = 0; i < rankB.length; i++) {                    bw2.write(rankB[i]);                    bw2.newLine();                }                for (int i = 0; i < rankD.length; i++) {                    bw3.write(rankD[i]);                    bw3.newLine();                }                br1.close();                br2.close();                bw1.flush();                bw2.flush();                bw3.flush();                bw1.close();                bw2.close();                bw3.close();                br.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void extractsubgenome() {        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/snp_count/major_SNP_site";//        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/snp_count/major_SNP_site";        File[] fs = new File(inputDir).listFiles();        List<File> fList = new ArrayList(Arrays.asList());        fs = IOUtils.listFilesStartsWith(fs, "all");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;            String Name = fs[i].getName().split("_")[1] + "_" + fs[i].getName().split("_")[2];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String temp = null;                String[] temps = null;                String[] rank = new String[5000];                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());                BufferedWriter bw1 = IOUtils.getTextWriter(new File(inputDir, "A_" + f + "_count.txt").getAbsolutePath());                BufferedWriter bw2 = IOUtils.getTextWriter(new File(inputDir, "B_" + f + "_count.txt").getAbsolutePath());                BufferedWriter bw3 = IOUtils.getTextWriter(new File(inputDir, "D_" + f + "_count.txt").getAbsolutePath());                temp = br1.readLine();                bw1.write(temp);                bw2.write(temp);                bw3.write(temp);                bw1.newLine();                bw2.newLine();                bw3.newLine();                while ((temp = br1.readLine()) != null) {                    if (!temp.startsWith("T")) continue;                    temps = temp.split("\t");                    String geneName = temps[0];                    String subgenome = geneName.toString().substring(8, 9);                    if (subgenome.equals("A")) {                        bw1.write(temp);                        bw1.newLine();                    }                    if (subgenome.equals("B")) {                        bw2.write(temp);                        bw2.newLine();                    }                    if (subgenome.equals("D")) {                        bw3.write(temp);                        bw3.newLine();                    }                }                br1.close();                bw1.flush();                bw1.close();                bw2.flush();                bw2.close();                bw3.flush();                bw3.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void SplitPhenoBychr() {        String infileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/expressionTable/expressionboxcox3.txt";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/splitexpression";//        String infileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionboxcox7.txt";//        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/splitexpression";        try {            BufferedReader br = pgl.infra.utils.IOUtils.getTextReader(infileS);            BufferedWriter[] bw = new BufferedWriter[43];            BufferedWriter[] bw1 = new BufferedWriter[43];            for (int i = 0; i < 43; i++) {//                bw[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S7expression" + i + ".bed").getAbsolutePath());//                bw1[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S7expression" + i + ".txt").getAbsolutePath());                bw[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S3expression" + i + ".bed").getAbsolutePath());                bw1[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S3expression" + i + ".txt").getAbsolutePath());            }            String temp = null;            String[] temps = null;            temp = br.readLine();            for (int i = 0; i < 43; i++) {                bw[i].write(temp);                bw[i].newLine();                bw1[i].write(temp);                bw1[i].newLine();            }            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                int count = Integer.parseInt(temps[0]);                bw[count].write(temp);                bw[count].newLine();                bw1[count].write(temp);                bw1[count].newLine();            }            for (int i = 0; i < 43; i++) {                bw[i].flush();                bw[i].close();                bw1[i].flush();                bw1[i].close();            }            br.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getupstreamSNPcount() {//        String VCFfileDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/genotype";//        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/output";//        String expressionfileDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/phenotype";        String VCFfileDir = "/data2/junxu/genotype";        String outputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/S7/minorAlleleenrichment";        String expressionfileDir = "/data1/home/xiaohan/rareallele/fastQTL/expression/S7";//        S3//        String name = "B18-E007,B18-E010,B18-E011,B18-E014,B18-E016,B18-E018,B18-E029,B18-E032,B18-E035,B18-E043,B18-E045,B18-E046,B18-E049,B18-E051,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E089,B18-E097,B18-E099,B18-E115,B18-E118,B18-E124,B18-E127,B18-E134,B18-E138,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E228,B18-E233,B18-E236,B18-E237,B18-E242,B18-E244,B18-E245,B18-E252,B18-E253,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E348,B18-E355,B18-E356,B18-E357";//        S7        String name = "B18-E002,B18-E007,B18-E008,B18-E011,B18-E014,B18-E018,B18-E023,B18-E024,B18-E029,B18-E032,B18-E038,B18-E043,B18-E045,B18-E046,B18-E049,B18-E051,B18-E052,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E083,B18-E087,B18-E089,B18-E097,B18-E099,B18-E115,B18-E118,B18-E124,B18-E127,B18-E138,B18-E139,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E203,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E227,B18-E228,B18-E233,B18-E236,B18-E237,B18-E242,B18-E244,B18-E245,B18-E252,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E320,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E347,B18-E355,B18-E356,B18-E357";        //建立对应的name位点表        String[] Samplenames = name.split(",");        String[] FileNames = {"0k_1k", "1k_2k", "2k_3k", "3k_4k", "4k_5k", "5k_6k", "6k_7k", "7k_8k", "8k_9k", "9k_10k"};        //对于多个区间"i"，多个chr"j"进行rare allele count计数        System.out.println("This program is going to calculate minor allele count in every gene in different distance to TSS");        System.out.println("The calculation form is : 1.Deciding the minor allele: 0 or 1");        System.out.println("                          2.calculate the MAF and discard SNPs which MAF > 0.05");        System.out.println("                          3.0/0 or 1/1 will be counting as 0 allele count or 2 allele count decided by which one is minor allele");        System.out.println("                          4.Sum of every snp upstream genes");        System.out.println("                          5.Output file form : gene B18-E007    B18-E009");        System.out.println("                                               TraeCS4D355900 0 12");        for (int i = 0; i < FileNames.length; i++) {            for (int j = 1; j < 43; j++) {                try {                    //0.读入文件和创建输出文件                    System.out.println("This is running :" + "chr" + j + "file at " + i + "k site");                    String[] TSS = null;                    BufferedReader brVCF = IOUtils.getTextGzipReader(new File(VCFfileDir, j + ".346.B18.recode.vcf.gz").getAbsolutePath());                    BufferedReader brexpr = IOUtils.getTextGzipReader(new File(expressionfileDir, "S7expression" + j + ".bed.gz").getAbsolutePath());                    BufferedWriter bwS = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_" + FileNames[i] + "_RACount.txt").getAbsolutePath());                    //1.根据输出的矩阵SNPfile来对不同基因进行计数。                    bwS.write("gene\t");                    for (int m = 0; m < Samplenames.length; m++) {                        bwS.write(Samplenames[m] + "\t");                    }                    bwS.newLine();                    //2.创建一个关于基因和转录起始位点的对应关系表                    String tempexpr = null;                    String[] expr = null;                    HashMap<String, String> TSSMap = new HashMap<>();                    Set<String> TSSset = new HashSet<>();                    while ((tempexpr = brexpr.readLine()) != null) {                        if (tempexpr.startsWith("#")) continue;                        expr = tempexpr.split("\t");                        TSSMap.put(expr[3], expr[1]);                        TSSset.add(expr[3]);                        //TSSMap --> gene -- start                        //TSSset --> gene                    }                    System.out.println("Finish creating gene site map");                    TSS = TSSset.toArray(new String[TSSset.size()]);                    Arrays.sort(TSS);                    //3.创建计数矩阵并将其初始化为0                    int[][] count = new int[TSS.length][Samplenames.length];                    for (int m = 0; m < TSS.length; m++) {                        for (int n = 0; n < Samplenames.length; n++) {                            count[m][n] = 0;                        }                    }                    System.out.println("Finished initializing count matrix");                    //4.对VCF文件读入每一行进行处理输出MAF<0.05的SNPfile矩阵                    String[] VCF = null;                    String tempVCF = null;                    //4.1根据FileName定下所筛选的TSS上游的位置范围                    int DiscontrolS = Integer.parseInt(FileNames[i].split("_")[0].replace("k", "")) * 1000;                    int DiscontrolE = Integer.parseInt(FileNames[i].split("_")[1].replace("k", "")) * 1000;                    int k = i+1;                    System.out.println("This is calculating " + i + "k to " + k + "k rare allele count");                    int[] SNPfile = new int[Samplenames.length+1];                    HashMap<String, Integer> VCFMap = new HashMap();                    int countline = 0;                    while ((tempVCF = brVCF.readLine()) != null) {                        if (tempVCF.startsWith("##")) continue;                        if (tempVCF.startsWith("#C")) {                            VCF = tempVCF.split("\t");                            for (int m = 9; m < VCF.length; m++) {                                VCFMap.put(VCF[m],m);                            }                        }                        VCF = tempVCF.split("\t");                        String[] VCFforGT = new String[VCF.length-9];                        for (int m = 0; m < VCFforGT.length; m++) {                            VCFforGT[m] = VCF[m + 9].split(":")[0];//把每一行中的GT格式文件读出来                        }                        //4.2根据MAF值进行筛选是否要跳行                        int site0 = 0;                        int site1 = 0;                        double MAF = 0.0000;                        for (int m = 0; m < VCFforGT.length; m++) {//读出0和1的个数，按照小值计算MAF。                            if (VCFforGT[m].equals("0/0")) {                                site0++;                                site0++;                            }                            if (VCFforGT[m].equals("0/1")) {                                site0++;                                site1++;                            }                            if (VCFforGT[m].equals("1/1")) {                                site1++;                                site1++;                            }                        }                        int minorAllele = 0;                        int sitesum = site0 + site1;                        if (site0 > site1) {                            MAF =  new BigDecimal((float)site1/sitesum).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();                            minorAllele = 1;                        if (site1 > site0) {                            MAF =  new BigDecimal((float)site0/sitesum).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();                            minorAllele = 0;                        }                        //4.3当MAF值小于0.05时，将对应的0/0和1/1计入数字                        if (MAF < 0.05 && MAF > 0) {                            SNPfile[0] = Integer.parseInt(VCF[1]);                            for (int m = 0; m < Samplenames.length; m++) {                                if (minorAllele == 0) {                                    if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("0/0")) {                                        SNPfile[m + 1] = 2;                                    }                                    if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("1/1")) {                                        SNPfile[m + 1] = 0;                                }}                                if (minorAllele == 1) {                                    if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("0/0")) {                                        SNPfile[m + 1] = 0;                                    }                                    if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("1/1")) {                                        SNPfile[m + 1] = 2;                                }                            }                            }                            for (int m = 0; m < SNPfile.length-1; m++) {                                for (int n = 0; n < TSS.length; n++) {                                    int snpsite = SNPfile[0];                                    int startsite = Integer.parseInt(TSSMap.get(TSS[n]));                                    int distance = (int) (startsite - snpsite);                                    if (distance >= DiscontrolS && distance < DiscontrolE) {                                        count[n][m] += SNPfile[m + 1];                                    }                                }                            }                            countline ++;                            if(countline % 5000 == 0){                                System.out.print(countline+"\n");                            }                                                    }                    }                    }                    for (int m = 0; m < TSS.length; m++) {                        bwS.write(TSS[m] + "\t");                        for (int n = 0; n < Samplenames.length; n++) {                            bwS.write(count[m][n] + "\t");                        }                        bwS.newLine();                    }                    System.out.println("complete writing file : " + "chr" + j + "at " + i + "k site");                    brexpr.close();                    brVCF.close();                    bwS.flush();                    bwS.close();                } catch (                        Exception e) {                    e.printStackTrace();                }            }        }    }    public void changeName() {        String infileS = "/data1/home/xiaohan/rareallele/fastQTL/chr36.vcf";        String outputDir = "/data1/home/xiaohan/rareallele/fastQTL";        BufferedReader br = IOUtils.getTextReader(infileS);        BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "Chr36.vcf").getAbsolutePath());        String temp = null;        String[] temps = null;        String[] tems = null;        try {            while ((temp = br.readLine()) != null) {                if (temp.startsWith("#")) {                    temps = temp.split("\t");                    for (int i = 0; i < 1; i++) {                        tems = temps[i].split("]");                        bw.write("#" + tems[1] + "\t");                    }                    for (int i = 1; i < temps.length; i++) {                        tems = temps[i].split("]");                        bw.write(tems[1] + "\t");                    }                    bw.newLine();                } else {                    bw.write(temp);                    bw.newLine();                }            }            bw.flush();            bw.close();            br.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getGTvcf() {        String inputDir = "/data2/xiaohan/sub7/";        String outputDir = "/data2/xiaohan/GT/S7";        HashSet<String> nameSet = new HashSet<String>();        File[] fs = new File(inputDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "vcf.gz");        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;//            String[] SampleName = fs[i].getName().split("\\.");//            String Name = SampleName[0].replace(SampleName[0].substring(0, 3), "");            String Name = fs[i].getName().split("\\.")[0].split("p")[1];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach((String p) -> {            try {                System.out.println("Start reading file snp" + p + "vcf.gz");                BufferedReader br = IOUtils.getTextGzipReader(new File(inputDir, "snp" + p + ".vcf.gz").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextGzipWriter(new File(outputDir, "chr" + p + "GT.vcf.gz").getAbsolutePath());                String temp = null;                String[] temps = null;                String[] tems = null;//                S3//                String name = "B18-E007,B18-E010,B18-E011,B18-E014,B18-E016,B18-E018,B18-E029,B18-E032,B18-E035,B18-E043,B18-E045,B18-E046,B18-E049,B18-E051,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E089,B18-E097,B18-E099,B18-E115,B18-E118,B18-E124,B18-E127,B18-E134,B18-E138,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E228,B18-E233,B18-E236,B18-E237,B18-E242,B18-E244,B18-E245,B18-E252,B18-E253,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E348,B18-E355,B18-E356,B18-E357";//                S7                String name = "B18-E002,B18-E007,B18-E008,B18-E011,B18-E014,B18-E018,B18-E023,B18-E024,B18-E029,B18-E032,B18-E038,B18-E043,B18-E045,B18-E046,B18-E049,B18-E051,B18-E052,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E083,B18-E087,B18-E089,B18-E097,B18-E099,B18-E115,B18-E118,B18-E124,B18-E127,B18-E138,B18-E139,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E203,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E227,B18-E228,B18-E233,B18-E236,B18-E237,B18-E242,B18-E244,B18-E245,B18-E252,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E320,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E347,B18-E355,B18-E356,B18-E357";                String[] names = name.split(",");                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("##"))                        continue;                    if (temp.startsWith("#C")) {                        temps = temp.split("\t");                        for (int i = 0; i < 9; i++) {                            bw.write(temps[i] + "\t");                        }                        for (int j = 0; j < names.length - 1; j++) {                            bw.write(names[j] + "\t");                        }                        bw.write(names[names.length - 1]);                        bw.newLine();                        continue;                    }                    temps = temp.split("\t");                    for (int i = 0; i < 2; i++) {                        bw.write(temps[i] + "\t");                    }                    //ID                    bw.write("snp_" + temps[0] + "_" + temps[1] + "\t");                    //REF ALT                    for (int i = 3; i < 5; i++) {                        bw.write(temps[i] + "\t");                    }                    //QUAL FILTER                    for (int i = 5; i < 7; i++) {                        bw.write("." + "\t");                    }                    bw.write("INFO" + "\t" + "GT" + "\t");                    for (int i = 9; i < temps.length; i++) {                        tems = temps[i].split(":");                        bw.write(tems[0] + "\t");                    }                    bw.newLine();                }                bw.flush();                bw.close();                br.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public static void main(String[] args) {        new rareallele();    }}