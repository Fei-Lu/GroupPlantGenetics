package xiaohan.rareallele;import org.apache.commons.math3.stat.StatUtils;import pgl.infra.dna.genot.GenoIOFormat;import pgl.infra.dna.genot.GenotypeGrid;import pgl.infra.dna.genot.GenotypeOperation;import pgl.infra.dna.genot.summa.SumTaxaDivergence;import pgl.infra.utils.IOFileFormat;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.util.*;import static com.ibm.icu.lang.UCharacter.IndicPositionalCategory.NA;public class rareallele {    String Samplename = "B18-E007,B18-E008,B18-E011,B18-E014,B18-E018,B18-E023,B18-E024,B18-E029,B18-E032,B18-E038,B18-E043,B18-E046,B18-E049,B18-E051,B18-E052,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E083,B18-E087,B18-E089,B18-E097,B18-E099,B18-E118,B18-E124,B18-E127,B18-E138,B18-E139,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E203,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E227,B18-E228,B18-E233,B18-E237,B18-E242,B18-E245,B18-E252,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E320,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E347,B18-E355,B18-E356,B18-E357";    String SNPfileDir = "/data2/xiaohan/genotype_root";//根据不同MAF值过滤得到的VCF文件存放位置    String TSSpositionfileDir = "/data1/home/xiaohan/rareallele/fastQTL/expression/S7";//存储不同基因的位置区域的文件存放位置chr + start + end + gene    String ExpressionFileDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable";//存储不同表达矩阵的文件存放位置all/donor02/sub/subhomo//    String rareAlleleCountDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/rareAlleleCount/MAF010-25";//不同的上游rare allele数目统计的文件存放位置//    String donor02GeneNamelistfile = "/data1/home/xiaohan/rareallele/rankcorrelation/infor/donor02GeneName.txt";//表达个体数目大于百分之二十的基因名字列表文件    String homoGeneNamelistfile = "/data1/home/xiaohan/rareallele/rankcorrelation/infor/TheABD.txt";//ABD同源基因的基因列表文件    String enrichmentTableDir = "";//获取得到的稀有变异富集的表格文件    String[] subDir = {"chr1-42", "all", "donor02", "sub", "subhomo"};    //    String[] FileNames = {"0k_20k","20k_40k","40k_60k","60k_80k","80k_100k","0_100k","0k_200k", "200k_400k", "400k_600k", "600k_800k", "800k_1000k", "0k_1000k"};    String[] FileNames = {"0k_200k", "200k_400k", "400k_600k", "600k_800k", "800k_1000k", "0k_1000k"};    String rareAlleleCountDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/1Mupgene";    String donor02GeneNamelistfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/Top_1000_median_exp_genes.txt";    String suffix = "1000.txt";    public rareallele() {//        this.getGeneRange();//        this.getGTvcf();//将VCF转换成GT格式//        this.mkFileDir();//        this.getupstreamSNPcount();//根据上游的不同位置call出rare allele count//        this.mergeUprareCount();//        this.getdonor02File();//        this.getsubdonor02File();//        this.SplitPhenoBychr();//根据chr拆分pheno文件//        this.extractTopSNP();//获取高表达的SNP文件//        this.extractHomologousGene();//获取同源基因相关的文件//        this.extractsubgenome();//获取亚基因组的文件        this.extractTopPheno();//获取高表达的表达文件//        this.extractHomologousPheno();//        this.extractsubPheno();//        this.getIBdistane();//        this.getDensityIBS();//        this.getSamePosition();//根据RNASNP位点获取相同位点的genotype SNP文件//        this.reheader();//更改VCF文件的Sample名字；//        this.countExpDonor02();//        this.getEnrichmentTable();//        this.getsubdonor02ExpressionFile();//        this.getExprZscoreTable();//        this.getZscoreCountEnrichment();//        this.getannotationFile();    }    public void getannotationFile(){    }    private void getExprZscoreTable() {        String expressionTable = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/Dhomo_DEnorm7_87chr1-42_donor02.txt";        String outputFileDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score";        BufferedReader br = IOUtils.getTextReader(expressionTable);        BufferedWriter bw = IOUtils.getTextWriter(new File(outputFileDir, "Dhomo_DEnorm7_87chr1-42_donor02_Zscore.txt").getAbsolutePath());        BufferedWriter bwS = IOUtils.getTextWriter(new File(outputFileDir, "Dhomo_donor02_outlier_picked.txt").getAbsolutePath());        double[] exprs = new double[87];        String temp = null;        String title = null;        String[] temps = null;        String[] titles = null;        int index = 90;        try {            title = br.readLine();            titles = title.split("\t");            bw.write(title);            bw.newLine();            bwS.write("GENE" + "\t" + "IND" + "\t" + "Z-score");            bwS.newLine();            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                for (int i = 4; i < temps.length; i++) {                    exprs[i - 4] = Double.parseDouble(temps[i]);                }                double variance = StatUtils.populationVariance(exprs);                double sd = Math.sqrt(variance);                double mean = StatUtils.mean(exprs);                double[] zscores = new double[87];                double[] zscoresabs = new double[87];                for (int i = 0; i < exprs.length; i++) {                    zscores[i] = (exprs[i] - mean) / sd;                    zscoresabs[i] = Math.abs(zscores[i]);                }                for (int i = 0; i < 4; i++) {                    bw.write(temps[i] + "\t");                }                for (int i = 0; i < exprs.length; i++) {                    bw.write(String.format("%.5f", zscores[i]) + "\t");                }                //max-value                double max = Arrays.stream(zscoresabs).max().getAsDouble();                for (int i = 0; i < zscores.length; i++) {                    if (Math.abs(zscores[i]) == max) {                        index = i;                    }                }                bwS.write(temps[3] + "\t" + titles[index + 4] + "\t" + zscores[index]);                bwS.newLine();                bw.newLine();                continue;            }            br.close();            bw.flush();            bw.close();            bwS.flush();            bwS.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getZscoreCountEnrichment() {        String countFile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/1Mupgene/donor02/donor02_0k_1000k_RACount.txt";        String zscoreFile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score/DEnorm7_87chr1-42_donor02_Zscore.txt";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/enrichmentTable/1Mupgene/quatile";        BufferedReader brcount = IOUtils.getTextReader(countFile);        BufferedReader brzscore = IOUtils.getTextReader(zscoreFile);        BufferedWriter bwcount = IOUtils.getTextWriter(new File(outputDir, "donor02_enrichment_Table.txt").getAbsolutePath());        String temp = null;        String[] temps = null;        String zscore = null;        String[] zscores = new String[91];        double[] zscoresNum = new double[91];        try {            bwcount.write("Gene" + "\t" + "Underexpressed" + "\t" + "nonOutlier" + "\t" + "Overexpressed");            bwcount.newLine();            brcount.readLine();            brzscore.readLine();            while ((temp = brcount.readLine()) != null) {                zscore = brzscore.readLine();                zscores = zscore.split("\t");                for (int i = 4; i < zscores.length ; i++) {                    zscoresNum[i-4] = Double.parseDouble(zscores[i]);                }                temps = temp.split("\t");                String geneName = temps[0];//                System.out.println(geneName);                String geneName1 = zscores[3];//                System.out.println(geneName1);                int Over = 0;                int non = 0;                int Under = 0;                int Overcount = 0;                int noncount = 0;                int Undercount = 0;                double o = NA;                double u = NA;                double n = NA;                if (geneName.equals(geneName1)) {                    System.out.println(geneName);//                    min = Collections.min(Arrays.asList(ArrayUtils.toObject(zscores)));                    for (int i = 4; i < zscores.length; i++) {                        double min = Arrays.stream(zscoresNum).min().getAsDouble();                        double max = Arrays.stream(zscoresNum).max().getAsDouble();                        double value = Double.parseDouble(zscores[i]);                        if (value == max && Math.abs(value) >= 2) {                            Over = Integer.parseInt(temps[i - 3]);                            Overcount++;                        }                        if (value == min && Math.abs(value) >= 2) {                            System.out.println(temps[i-3]);                            Under = Integer.parseInt(temps[i - 3]);                            Undercount++;                        }                        if (value < max && value > min) {                            non = non + Integer.parseInt(temps[i - 3]);                            noncount++;                        }                    }//                    System.out.println(Over+"\t"+non+"\t"+Under);//                    System.out.println(Overcount+"\t"+noncount+"\t"+Undercount);                }                if (Overcount > 0) {                    o = Over / Overcount;                }                if (noncount > 0) {                    n = non / noncount;                }                if (Undercount > 0) {                    u = Under / Undercount;                }                bwcount.write(geneName + "\t" + u + "\t" + n + "\t" + o);                bwcount.newLine();            }            brcount.close();            brzscore.close();            bwcount.flush();            bwcount.close();        } catch (                Exception e) {            e.printStackTrace();        }    }    public void mkFileDir() {        for (int i = 0; i < this.subDir.length; i++) {            new File(this.rareAlleleCountDir, subDir[i]).mkdir();        }    }    public void getEnrichmentTable() {    }    public void mergeUprareCount() {        StringBuilder sb = new StringBuilder();        for (int i = 0; i < FileNames.length; i++) {            sb.append("cat chr*_" + FileNames[i] + "_RACount.txt | sort | uniq > " + this.rareAlleleCountDir + "/" + subDir[1] + "/all_" + FileNames[i] + "_RACount.txt \n");            String command = sb.toString();            try {                File dir = new File(new File(this.rareAlleleCountDir, subDir[0]).getAbsolutePath());                String[] cmdarry = {"/bin/bash", "-c", command};                Process p = Runtime.getRuntime().exec(cmdarry, null, dir);                p.waitFor();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getdonor02File() {        String inputDir = this.rareAlleleCountDir + "/" + subDir[1];//        String infile = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/DEnorm7_87chr1-42.txt";        String infor = this.donor02GeneNamelistfile;        String outputDir = this.rareAlleleCountDir + "/" + subDir[2];//        String outputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/donor02";        File[] fs = new File(inputDir).listFiles();        List<File> fList = new ArrayList(Arrays.asList());        fs = IOUtils.listFilesStartsWith(fs, "all");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;            String Name = fs[i].getName();            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String info = null;                String temp = null;                String[] temps = null;                BufferedReader brinfo = IOUtils.getTextReader(infor);                BufferedReader br = IOUtils.getTextReader(new File(inputDir, f).getAbsolutePath());//            BufferedReader br = IOUtils.getTextReader(infile);                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, f.replace("all", "donor02")).getAbsolutePath());//            BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir,"DEnorm7_87chr1-42_donor02.txt").getAbsolutePath());                HashSet<String> subGeneSet = new HashSet();                String[] geneName = null;                HashMap<String, String> tempGene = new HashMap<>();                int countline = 0;                while ((info = brinfo.readLine()) != null) {                    subGeneSet.add(info);                    countline++;                }                geneName = subGeneSet.toArray(new String[subGeneSet.size()]);                Arrays.sort(geneName);                String title = br.readLine();                bw.write(title);                bw.newLine();                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    tempGene.put(temps[0], temp);                }                for (int i = 0; i < geneName.length; i++) {                    System.out.println(geneName[i]);                    bw.write(tempGene.get(geneName[i]));                    bw.newLine();                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void getsubdonor02ExpressionFile() {        String inputfile = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/DEnorm7_87chr1-42_donor02.txt";        String infor = this.homoGeneNamelistfile;        String outputDirhomo = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/";        try {            String info = null;            String[] infos = null;            String temp = null;            String[] temps = null;            BufferedReader brinfo = IOUtils.getTextReader(infor);            BufferedReader br = IOUtils.getTextReader(new File(inputfile).getAbsolutePath());            BufferedWriter bwAhomo = IOUtils.getTextWriter(new File(outputDirhomo, "Ahomo_DEnorm7_87chr1-42_donor02.txt").getAbsolutePath());            BufferedWriter bwBhomo = IOUtils.getTextWriter(new File(outputDirhomo, "Bhomo_DEnorm7_87chr1-42_donor02.txt").getAbsolutePath());            BufferedWriter bwDhomo = IOUtils.getTextWriter(new File(outputDirhomo, "Dhomo_DEnorm7_87chr1-42_donor02.txt").getAbsolutePath());            HashSet<String> AsubGeneSet = new HashSet();            HashSet<String> BsubGeneSet = new HashSet();            HashSet<String> DsubGeneSet = new HashSet();            while ((info = brinfo.readLine()) != null) {                infos = info.split("\t");                AsubGeneSet.add(infos[1]);                BsubGeneSet.add(infos[2]);                DsubGeneSet.add(infos[3]);            }            String title = br.readLine();            bwAhomo.write(title);            bwBhomo.write(title);            bwDhomo.write(title);            bwAhomo.newLine();            bwBhomo.newLine();            bwDhomo.newLine();            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                String Name = temps[3];                if (AsubGeneSet.contains(Name)) {                    bwAhomo.write(temp);                    bwAhomo.newLine();                }                if (BsubGeneSet.contains(Name)) {                    bwBhomo.write(temp);                    bwBhomo.newLine();                }                if (DsubGeneSet.contains(Name)) {                    bwDhomo.write(temp);                    bwDhomo.newLine();                }            }            br.close();            brinfo.close();            bwAhomo.flush();            bwAhomo.close();            bwBhomo.flush();            bwBhomo.close();            bwDhomo.flush();            bwDhomo.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getsubdonor02File() {        String inputDir = this.rareAlleleCountDir + "/" + subDir[2];//        String inputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/donor02";        String infor = this.homoGeneNamelistfile;        String outputDirsub = this.rareAlleleCountDir + "/" + subDir[3];        String outputDirhomo = this.rareAlleleCountDir + "/" + subDir[4];//        String outputDirsub = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/donor02/sub";//        String outputDirhomo = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/donor02/subhomo";        File[] fs = new File(inputDir).listFiles();        List<File> fList = new ArrayList(Arrays.asList());//        fs = IOUtils.listFilesStartsWith(fs, "donor02");//        String prefix = "DE";        String prefix = "donor";        fs = IOUtils.listFilesStartsWith(fs, prefix);        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;            String Name = fs[i].getName();            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String info = null;                String[] infos = null;                String temp = null;                String[] temps = null;                BufferedReader brinfo = IOUtils.getTextReader(infor);                BufferedReader br = IOUtils.getTextReader(new File(inputDir, f).getAbsolutePath());//                BufferedWriter bwA = IOUtils.getTextWriter(new File(outputDirsub, f.replace("donor02", "A_donor02")).getAbsolutePath());//                BufferedWriter bwB = IOUtils.getTextWriter(new File(outputDirsub, f.replace("donor02", "B_donor02")).getAbsolutePath());//                BufferedWriter bwD = IOUtils.getTextWriter(new File(outputDirsub, f.replace("donor02", "D_donor02")).getAbsolutePath());//                BufferedWriter bwAhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace("donor02", "Ahomo_donor02")).getAbsolutePath());//                BufferedWriter bwBhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace("donor02", "Bhomo_donor02")).getAbsolutePath());//                BufferedWriter bwDhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace("donor02", "Dhomo_donor02")).getAbsolutePath());                BufferedWriter bwA = IOUtils.getTextWriter(new File(outputDirsub, f.replace(prefix, "A_" + prefix)).getAbsolutePath());                BufferedWriter bwB = IOUtils.getTextWriter(new File(outputDirsub, f.replace(prefix, "B_" + prefix)).getAbsolutePath());                BufferedWriter bwD = IOUtils.getTextWriter(new File(outputDirsub, f.replace(prefix, "D_" + prefix)).getAbsolutePath());                BufferedWriter bwAhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace(prefix, "Ahomo_" + prefix)).getAbsolutePath());                BufferedWriter bwBhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace(prefix, "Bhomo_" + prefix)).getAbsolutePath());                BufferedWriter bwDhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace(prefix, "Dhomo_" + prefix)).getAbsolutePath());                HashSet<String> AsubGeneSet = new HashSet();                HashSet<String> BsubGeneSet = new HashSet();                HashSet<String> DsubGeneSet = new HashSet();                while ((info = brinfo.readLine()) != null) {                    infos = info.split("\t");                    AsubGeneSet.add(infos[1]);                    BsubGeneSet.add(infos[2]);                    DsubGeneSet.add(infos[3]);                }                String title = br.readLine();                bwA.write(title);                bwB.write(title);                bwD.write(title);                bwA.newLine();                bwB.newLine();                bwD.newLine();                bwAhomo.write(title);                bwBhomo.write(title);                bwDhomo.write(title);                bwAhomo.newLine();                bwBhomo.newLine();                bwDhomo.newLine();                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    String Name = temps[0].substring(8, 9);                    String Name1 = temps[0];                    if (Name.equals("A")) {                        bwA.write(temp);                        bwA.newLine();                    }                    if (Name.equals("B")) {                        bwB.write(temp);                        bwB.newLine();                    }                    if (Name.equals("D")) {                        bwD.write(temp);                        bwD.newLine();                    }                    if (AsubGeneSet.contains(Name1)) {                        bwAhomo.write(temp);                        bwAhomo.newLine();                    }                    if (BsubGeneSet.contains(Name1)) {                        bwBhomo.write(temp);                        bwBhomo.newLine();                    }                    if (DsubGeneSet.contains(Name1)) {                        bwDhomo.write(temp);                        bwDhomo.newLine();                    }                }                br.close();                brinfo.close();                bwA.flush();                bwAhomo.flush();                bwA.close();                bwAhomo.close();                bwB.flush();                bwBhomo.flush();                bwB.close();                bwBhomo.close();                bwD.flush();                bwDhomo.flush();                bwD.close();                bwDhomo.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void countExpDonor02() {        String infileS = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/DEnorm7_87chr1-42.txt";        String outputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/donor02";        try {            String temp = null;            String[] temps = null;            BufferedReader br = IOUtils.getTextReader(infileS);            BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "GeneName.txt").getAbsolutePath());            while ((temp = br.readLine()) != null) {                if (temp.startsWith("c")) continue;                temps = temp.split("\t");                int nonExpcount = 0;                for (int i = 4; i < temps.length; i++) {                    if (Double.parseDouble(temps[i]) == 0) {                        nonExpcount++;                    }                }                if (nonExpcount < 18) {                    bw.write(temps[3]);                    bw.newLine();                }            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getGeneRange() {        String inputfileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/wheat_v1.1_Lulab.gff3";        String outputfielS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/GeneRange.txt";//        String outputfielS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/refer/Geneinformation.txt";        GeneFeature df = new GeneFeature(inputfileS);        df.writeFile(outputfielS);//        df.writeGeneSequence();    }    public void reheader() {        String infileS = "/data2/xiaohan/RNAgenotype/RNA.all.temp.vcf";//输入的VCF文件        String outfileS = "/data2/xiaohan/RNAgenotype/RNA.all.reheader.vcf";//        BufferedReader br = IOUtils.getTextReader(infileS);        BufferedWriter bw = IOUtils.getTextWriter(outfileS);        String temp = null;        String[] temps = null;        try {            while ((temp = br.readLine()) != null) {                if (temp.startsWith("##")) {                    bw.write(temp);                    bw.newLine();                }                if (temp.startsWith("#C")) {                    temps = temp.split("\t");                    for (int i = 0; i < 9; i++) {                        bw.write(temps[i] + "\t");                    }                    for (int i = 9; i < temps.length; i++) {                        bw.write(temps[i].replace("B", "RNAB") + "\t");                    }                    bw.newLine();                } else {                    bw.write(temp);                    bw.newLine();                }            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getSamePosition() {        String inputDirRNA = "/data1/home/xiaohan/rareallele/Hapscanner/outputDir/mis01VCF";        String inputDirDNA = "/data2/xiaohan/DNAgenotype";        String outputDirRNA = "/data2/xiaohan/RNAgenotype";        String outputDirDNA = "/data2/xiaohan/DNAgenotype";//        String inputDirRNA = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/changename/inputDirRNA";//        String inputDirDNA = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/changename/inputDirDNA";//        String outputDirRNA = "/Users/yxh/Documents/RareAllele/004te..st/SiPASpipeline/input/changename/outputDirRNA";//        String outputDirDNA = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/changename/outputDirDNA";        String tempRNA = null;        String[] tempRNAs = null;        String tempDNA = null;        String[] tempDNAs = null;        String tempRNA1 = null;        String[] tempRNAs1 = null;        String tempDNA1 = null;        String[] tempDNAs1 = null;        for (int i = 0; i < 42; i++) {            int chrNumber = i + 1;//            int chrNumber = 1;            try {                ////                BufferedReader brRNA = IOUtils.getTextReader(new File(inputDirRNA, "chr" + chrNumber + ".mis01.recode.vcf").getAbsolutePath());//                HashSet<String> PositionSetRNA = new HashSet();                HashSet<String> PositionSetDNA = new HashSet();                HashMap<String, String> positionRNA = new HashMap();                HashMap<String, String> positionDNA = new HashMap();//                while ((tempRNA = brRNA.readLine()) != null) {//                    if (tempRNA.startsWith("#")) continue;//                    tempRNAs = tempRNA.split("\t");//                    String position1 = tempRNAs[1];//                    PositionSetRNA.add(position1);//                    positionRNA.put(position1, tempRNA);//                }//                brRNA.close();                BufferedReader brDNA = IOUtils.getTextReader(new File(inputDirDNA, "DNAchr" + chrNumber + ".vcf").getAbsolutePath());                while ((tempDNA = brDNA.readLine()) != null) {                    if (tempDNA.startsWith("#")) continue;                    tempDNAs = tempDNA.split("\t");                    String position2 = tempDNAs[1];                    PositionSetDNA.add(position2);                    positionDNA.put(position2, tempDNA);                }                brDNA.close();//                //                BufferedReader brRNA1 = IOUtils.getTextReader(new File(inputDirRNA, "chr" + chrNumber + ".mis01.recode.vcf").getAbsolutePath());                BufferedWriter bwRNA = IOUtils.getTextWriter(new File(outputDirRNA, "RNAchr" + chrNumber + ".vcf").getAbsolutePath());                int count = 0;                System.out.println("This is writing chr" + chrNumber + " File……………………………………………………………………………………………………………………");                while ((tempRNA1 = brRNA1.readLine()) != null) {                    if (tempRNA1.startsWith("#")) {                        bwRNA.write(tempRNA1);                        bwRNA.newLine();                        continue;                    }                    tempRNAs1 = tempRNA1.split("\t");                    String positionR = tempRNAs1[1];                    if (PositionSetDNA.contains(positionR)) {                        bwRNA.write(tempRNA1);                        bwRNA.newLine();                    }                    if (count % 5000 == 1) {                        System.out.println(count);                    }                }                brRNA1.close();                bwRNA.flush();                bwRNA.close();//                BufferedReader brDNA1 = IOUtils.getTextGzipReader(new File(inputDirDNA, chrNumber + ".92.B18.recode.vcf.gz").getAbsolutePath());//                BufferedWriter bwDNA = IOUtils.getTextWriter(new File(outputDirDNA, "DNAchr" + chrNumber + ".vcf").getAbsolutePath());//                int count = 0;//                System.out.println("This is writing chr"+chrNumber+" File……………………………………………………………………………………………………………………");//                while ((tempDNA1 = brDNA1.readLine()) != null) {//                    count ++;//                    if (tempDNA1.startsWith("#")) {//                        bwDNA.write(tempDNA1);//                        bwDNA.newLine();//                        continue;//                    }//                    tempDNAs1 = tempDNA1.split("\t");//                    String positionD = tempDNAs1[1];//                    if (PositionSetRNA.contains(positionD)) {//                        bwDNA.write(tempDNA1);//                        bwDNA.newLine();//                    }//                    if(count % 5000 ==1){//                        System.out.println(count);//                    }//                }//                brDNA1.close();//                bwDNA.flush();bwDNA.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getIBdistane() {        String infileS1 = "/data2/xiaohan/DNAgenotype/DNA.all.sort.vcf";        String infileS2 = "/data2/xiaohan/RNAgenotype/RNA.all.sort.vcf";//        String infileS1 = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/DNA.all.sort.vcf";//        String infileS2 = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/RNA.all.sort.vcf";        String ibsOutfileS = "/data2/xiaohan/check.txt";//        String ibsOutfileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/check.txt";        GenotypeGrid g1 = new GenotypeGrid(infileS1, GenoIOFormat.VCF);        GenotypeGrid g2 = new GenotypeGrid(infileS2, GenoIOFormat.VCF);        GenotypeGrid g = GenotypeOperation.mergeGenotypesByTaxon(g1, g2);        SumTaxaDivergence std = new SumTaxaDivergence(g);        std.writeDxyMatrix(ibsOutfileS, IOFileFormat.Text);        g.getIBSDistanceMatrix();    }    public void getDensityIBS() {        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/check.txt";        String outfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/IBSdensity.txt";        BufferedReader br = IOUtils.getTextReader(infile);        BufferedWriter bw = IOUtils.getTextWriter(outfile);        String temp = null;        String[] temps = null;        int countlines = 0;        try {            bw.write("IBSdistance");            bw.newLine();            while ((temp = br.readLine()) != null) {                if (!temp.startsWith("B")) continue;                temps = temp.split("\t");                if (countlines < 92) {                    countlines++;                    bw.write(temps[countlines + 92]);                    bw.newLine();                }            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void extractsubPheno() {        String inputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable";        String infileS = "DEnorm7_87chr1-42.txt";        String outputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/sub";//        File[] fs = new File(inputDir).listFiles();//        List<File> fList = new ArrayList(Arrays.asList());//        fs = IOUtils.listFilesStartsWith(fs, "DE");//        HashSet<String> nameSet = new HashSet();//        for (int i = 0; i < fs.length; i++) {//            if (fs[i].isHidden()) continue;//            String Name = fs[i].getName();//            nameSet.add(Name);//            System.out.println(Name);//        }//        nameSet.stream().forEach(f -> {        try {            String temp = null;            String[] temps = null;//                String[] rank = new String[5000];//                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());//                BufferedWriter bw1 = IOUtils.getTextWriter(new File(inputDir, "A_" + f + "_count.txt").getAbsolutePath());//                BufferedWriter bw2 = IOUtils.getTextWriter(new File(inputDir, "B_" + f + "_count.txt").getAbsolutePath());//                BufferedWriter bw3 = IOUtils.getTextWriter(new File(inputDir, "D_" + f + "_count.txt").getAbsolutePath());            BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, infileS).getAbsolutePath());            BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputDir, infileS.replace("DE", "A_DE")).getAbsolutePath());            BufferedWriter bw2 = IOUtils.getTextWriter(new File(outputDir, infileS.replace("DE", "B_DE")).getAbsolutePath());            BufferedWriter bw3 = IOUtils.getTextWriter(new File(outputDir, infileS.replace("DE", "D_DE")).getAbsolutePath());            temp = br1.readLine();            bw1.write(temp);            bw2.write(temp);            bw3.write(temp);            bw1.newLine();            bw2.newLine();            bw3.newLine();            while ((temp = br1.readLine()) != null) {//                    if (!temp.startsWith("")) continue;                temps = temp.split("\t");                String geneName = temps[3];                String subgenome = geneName.substring(8, 9);                if (subgenome.equals("A")) {                    bw1.write(temp);                    bw1.newLine();                }                if (subgenome.equals("B")) {                    bw2.write(temp);                    bw2.newLine();                }                if (subgenome.equals("D")) {                    bw3.write(temp);                    bw3.newLine();                }            }            br1.close();            bw1.flush();            bw1.close();            bw2.flush();            bw2.close();            bw3.flush();            bw3.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void extractHomologousPheno() {        String inputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable";        String infileS = "DEnorm7_87chr1-42.txt";        String outputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/subhomo";        String inforDir = "/data1/home/xiaohan/rareallele/infor";        String infor = "TheABD.txt";//        File[] fs = new File(inputDir).listFiles();//        List<File> fList = new ArrayList(Arrays.asList());//        fs = IOUtils.listFilesStartsWith(fs, "DE");//        HashSet<String> nameSet = new HashSet();//        for (int i = 0; i < fs.length; i++) {//            if (fs[i].isHidden()) continue;//            String Name = fs[i].getName();//            nameSet.add(Name);//            System.out.println(Name);//        }//        nameSet.stream().forEach(f -> {        try {            String temp = null;            String[] temps = null;            HashSet GeneSetA = new HashSet();            HashSet GeneSetB = new HashSet();            HashSet GeneSetD = new HashSet();            HashMap<String, Integer> genesubAMap = new HashMap();            HashMap<String, Integer> genesubBMap = new HashMap();            HashMap<String, Integer> genesubDMap = new HashMap();            BufferedReader br = IOUtils.getTextReader(new File(inforDir, infor).getAbsolutePath());            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                GeneSetA.add(temps[1]);                GeneSetB.add(temps[2]);                GeneSetD.add(temps[3]);                genesubAMap.put(temps[1], Integer.parseInt(temps[0]));                genesubBMap.put(temps[2], Integer.parseInt(temps[0]));                genesubDMap.put(temps[3], Integer.parseInt(temps[0]));                continue;            }            String temp1 = null;            String[] temps1 = null;//                String[] rankA =null;//                String[] rankB = null;//                String[] rankD = null;            String[] rankA = new String[17108];            String[] rankB = new String[17108];            String[] rankD = new String[17108];            BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, infileS).getAbsolutePath());            BufferedReader br2 = IOUtils.getTextReader(new File(inputDir, infileS).getAbsolutePath());            BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputDir, infileS.replace("DE", "Ahomo_DE")).getAbsolutePath());            BufferedWriter bw2 = IOUtils.getTextWriter(new File(outputDir, infileS.replace("DE", "Bhomo_DE")).getAbsolutePath());            BufferedWriter bw3 = IOUtils.getTextWriter(new File(outputDir, infileS.replace("DE", "Dhomo_DE")).getAbsolutePath());//                while ((temp1 = br2.readLine()) != null) {//                    temps1 = temp1.split("\t");//                    if (temps1[0].equals("chr")) {//                        bw1.write(temp1);//                        bw1.newLine();//                        bw2.write(temp1);//                        bw2.newLine();//                        bw3.write(temp1);//                        bw3.newLine();//                    }//                }            while ((temp1 = br1.readLine()) != null) {                if ((temp1.startsWith("chr"))) {                    bw1.write(temp1);                    bw1.newLine();                    bw2.write(temp1);                    bw2.newLine();                    bw3.write(temp1);                    bw3.newLine();                }                ;                temps1 = temp1.split("\t");                if (GeneSetA.contains(temps1[3])) {                    String gene = temps1[3];                    int indexA = genesubAMap.get(gene);                    rankA[indexA - 1] = temp1;                }                if (GeneSetB.contains(temps1[3])) {                    String gene = temps1[3];                    int indexB = genesubBMap.get(gene);                    rankB[indexB - 1] = temp1;                }                if (GeneSetD.contains(temps1[3])) {                    String gene = temps1[3];                    int indexD = genesubDMap.get(gene);                    rankD[indexD - 1] = temp1;                }            }            for (int i = 0; i < rankA.length; i++) {                bw1.write(rankA[i]);                bw1.newLine();            }            for (int i = 0; i < rankB.length; i++) {                bw2.write(rankB[i]);                bw2.newLine();            }            for (int i = 0; i < rankD.length; i++) {                bw3.write(rankD[i]);                bw3.newLine();            }            br1.close();            br2.close();            bw1.flush();            bw2.flush();            bw3.flush();            bw1.close();            bw2.close();            bw3.close();            br.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void extractTopPheno() {//        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/";        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/1Mupgene/donor02";//        String infileS = "DEnorm7_87chr1-42_donor02.txt";      String infileS = "donor02_0k_1000k_RACount.txt";//        String outfileS = "Top5000_S3.txt";//        String outfileS = "DEnorm7_87chr1-42_donor02_4001_5000.txt";        String outfileS = "1001-2000/donor02_0k_1000k_RACount_1001_2000.txt";////        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7";//        String infileS = "countResult7_DESeq2.txt";//        String outfileS = "Top5000_S7.txt";//        String outfileS = "Top5000-10000_S7.txt";//        String infor = "Top_5000_median_exp_genes.txt";        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/Top_1001_to_2000_median_exp_genes.txt";        try {            String temp = null;            String[] temps = null;            HashSet GeneSet = new HashSet();            HashMap<String, Integer> geneMap = new HashMap();            BufferedReader br = IOUtils.getTextReader(new File(infor).getAbsolutePath());            System.out.println(new File(infor).getAbsolutePath());            while ((temp = br.readLine()) != null) {                if (temp.startsWith("x")) continue;                temps = temp.split("\t");                System.out.println(temps[1]);                GeneSet.add(temps[1]);                geneMap.put(temps[1], Integer.parseInt(temps[0]));                continue;            }            String temp1 = null;            String[] temps1 = null;            String[] rank = new String[1000];            BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, infileS).getAbsolutePath());            BufferedWriter bw = IOUtils.getTextWriter(new File(inputDir, outfileS).getAbsolutePath());            while ((temp1 = br1.readLine()) != null) {                temps1 = temp1.split("\t");                if (temp1.startsWith("c") || temp1.startsWith("g")) {                    bw.write(temp1);                    bw.newLine();                }                if (GeneSet.contains(temps1[0])) {                    String gene = temps1[0];                    int index = geneMap.get(gene);                    rank[index - 1] = temp1;                }            }            for (int i = 0; i < rank.length; i++) {                bw.write(rank[i]);                bw.newLine();            }            br1.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void extractTopSNP() {//        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/snp_count/major_SNP_site";//        String inforDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/expressionTable";        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/snp_count/major_SNP_site";        String inforDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable";        String infor = "Top_5000_median_exp_genes.txt";//        String infor = "Top_5001_to_10000_median_exp_genes.txt";        File[] fs = new File(inputDir).listFiles();        List<File> fList = new ArrayList(Arrays.asList());        fs = IOUtils.listFilesStartsWith(fs, "all");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;            String Name = fs[i].getName().split("_")[1] + "_" + fs[i].getName().split("_")[2];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String temp = null;                String[] temps = null;                HashSet GeneSet = new HashSet();                HashMap<String, Integer> geneMap = new HashMap();                BufferedReader br = IOUtils.getTextReader(new File(inforDir, infor).getAbsolutePath());                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("x")) continue;                    temps = temp.split("\t");                    GeneSet.add(temps[1]);                    geneMap.put(temps[1], Integer.parseInt(temps[0]));                    continue;                }                String temp1 = null;                String[] temps1 = null;                String[] rank = new String[5000];                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());                BufferedReader br2 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());//                    BufferedWriter bw = IOUtils.getTextWriter(new File(inputDir, "Top5000_" +f+ "_count.txt").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(inputDir, "Top5000-10000_" + f + "_count.txt").getAbsolutePath());                while ((temp1 = br2.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (temps1[0].startsWith("gene")) {                        bw.write(temp1);                        bw.newLine();                    }                }                while ((temp1 = br1.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (GeneSet.contains(temps1[0])) {                        String gene = temps1[0];                        int index = geneMap.get(gene);                        rank[index - 1] = temp1;                    }                }                for (int i = 0; i < rank.length; i++) {                    bw.write(rank[i]);                    bw.newLine();                }                br1.close();                br2.close();                bw.flush();                bw.close();                br.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void extractHomologousGene() {        String inputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/rareAlleleCount/all";        String outputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/rareAlleleCount/subhomo";        String inforDir = "/data1/home/xiaohan/rareallele/infor";        String infor = "TheABD.txt";        File[] fs = new File(inputDir).listFiles();        List<File> fList = new ArrayList(Arrays.asList());        fs = IOUtils.listFilesStartsWith(fs, "all");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;            String Name = fs[i].getName().split("_")[1] + "_" + fs[i].getName().split("_")[2];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String temp = null;                String[] temps = null;                HashSet GeneSetA = new HashSet();                HashSet GeneSetB = new HashSet();                HashSet GeneSetD = new HashSet();                HashMap<String, Integer> genesubAMap = new HashMap();                HashMap<String, Integer> genesubBMap = new HashMap();                HashMap<String, Integer> genesubDMap = new HashMap();                BufferedReader br = IOUtils.getTextReader(new File(inforDir, infor).getAbsolutePath());                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    GeneSetA.add(temps[1]);                    GeneSetB.add(temps[2]);                    GeneSetD.add(temps[3]);                    genesubAMap.put(temps[1], Integer.parseInt(temps[0]));                    genesubBMap.put(temps[2], Integer.parseInt(temps[0]));                    genesubDMap.put(temps[3], Integer.parseInt(temps[0]));                    continue;                }                String temp1 = null;                String[] temps1 = null;//                String[] rankA =null;//                String[] rankB = null;//                String[] rankD = null;                String[] rankA = new String[17108];                String[] rankB = new String[17108];                String[] rankD = new String[17108];                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_RACount.txt").getAbsolutePath());                BufferedReader br2 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_RACount.txt").getAbsolutePath());                BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputDir, "Ahomo_" + f + "_RACount.txt").getAbsolutePath());                BufferedWriter bw2 = IOUtils.getTextWriter(new File(outputDir, "Bhomo_" + f + "_RACount.txt").getAbsolutePath());                BufferedWriter bw3 = IOUtils.getTextWriter(new File(outputDir, "Dhomo_" + f + "_RACount.txt").getAbsolutePath());                while ((temp1 = br2.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (temps1[0].startsWith("gene")) {                        bw1.write(temp1);                        bw1.newLine();                        bw2.write(temp1);                        bw2.newLine();                        bw3.write(temp1);                        bw3.newLine();                    }                }                while ((temp1 = br1.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (GeneSetA.contains(temps1[0])) {                        String gene = temps1[0];                        int indexA = genesubAMap.get(gene);                        rankA[indexA - 1] = temp1;                    }                    if (GeneSetB.contains(temps1[0])) {                        String gene = temps1[0];                        int indexB = genesubBMap.get(gene);                        rankB[indexB - 1] = temp1;                    }                    if (GeneSetD.contains(temps1[0])) {                        String gene = temps1[0];                        int indexD = genesubDMap.get(gene);                        rankD[indexD - 1] = temp1;                    }                }                for (int i = 0; i < rankA.length; i++) {                    bw1.write(rankA[i]);                    bw1.newLine();                }                for (int i = 0; i < rankB.length; i++) {                    bw2.write(rankB[i]);                    bw2.newLine();                }                for (int i = 0; i < rankD.length; i++) {                    bw3.write(rankD[i]);                    bw3.newLine();                }                br1.close();                br2.close();                bw1.flush();                bw2.flush();                bw3.flush();                bw1.close();                bw2.close();                bw3.close();                br.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void extractsubgenome() {        String inputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/rareAlleleCount/all";        String outputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/rareAlleleCount/sub";        File[] fs = new File(inputDir).listFiles();        List<File> fList = new ArrayList(Arrays.asList());        fs = IOUtils.listFilesStartsWith(fs, "all");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;            String Name = fs[i].getName().split("_")[1] + "_" + fs[i].getName().split("_")[2];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String temp = null;                String[] temps = null;//                String[] rank = new String[5000];//                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());//                BufferedWriter bw1 = IOUtils.getTextWriter(new File(inputDir, "A_" + f + "_count.txt").getAbsolutePath());//                BufferedWriter bw2 = IOUtils.getTextWriter(new File(inputDir, "B_" + f + "_count.txt").getAbsolutePath());//                BufferedWriter bw3 = IOUtils.getTextWriter(new File(inputDir, "D_" + f + "_count.txt").getAbsolutePath());                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_RACount.txt").getAbsolutePath());                BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputDir, "A_" + f + "_RACount.txt").getAbsolutePath());                BufferedWriter bw2 = IOUtils.getTextWriter(new File(outputDir, "B_" + f + "_RACount.txt").getAbsolutePath());                BufferedWriter bw3 = IOUtils.getTextWriter(new File(outputDir, "D_" + f + "_RACount.txt").getAbsolutePath());                temp = br1.readLine();                bw1.write(temp);                bw2.write(temp);                bw3.write(temp);                bw1.newLine();                bw2.newLine();                bw3.newLine();                while ((temp = br1.readLine()) != null) {                    if (!temp.startsWith("T")) continue;                    temps = temp.split("\t");                    String geneName = temps[0];                    String subgenome = geneName.toString().substring(8, 9);                    if (subgenome.equals("A")) {                        bw1.write(temp);                        bw1.newLine();                    }                    if (subgenome.equals("B")) {                        bw2.write(temp);                        bw2.newLine();                    }                    if (subgenome.equals("D")) {                        bw3.write(temp);                        bw3.newLine();                    }                }                br1.close();                bw1.flush();                bw1.close();                bw2.flush();                bw2.close();                bw3.flush();                bw3.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void SplitPhenoBychr() {        String infileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/expressionTable/expressionboxcox3.txt";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/splitexpression";//        String infileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionboxcox7.txt";//        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/splitexpression";        try {            BufferedReader br = pgl.infra.utils.IOUtils.getTextReader(infileS);            BufferedWriter[] bw = new BufferedWriter[43];            BufferedWriter[] bw1 = new BufferedWriter[43];            for (int i = 0; i < 43; i++) {//                bw[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S7expression" + i + ".bed").getAbsolutePath());//                bw1[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S7expression" + i + ".txt").getAbsolutePath());                bw[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S3expression" + i + ".bed").getAbsolutePath());                bw1[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S3expression" + i + ".txt").getAbsolutePath());            }            String temp = null;            String[] temps = null;            temp = br.readLine();            for (int i = 0; i < 43; i++) {                bw[i].write(temp);                bw[i].newLine();                bw1[i].write(temp);                bw1[i].newLine();            }            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                int count = Integer.parseInt(temps[0]);                bw[count].write(temp);                bw[count].newLine();                bw1[count].write(temp);                bw1[count].newLine();            }            for (int i = 0; i < 43; i++) {                bw[i].flush();                bw[i].close();                bw1[i].flush();                bw1[i].close();            }            br.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getupstreamSNPcount() {//        String VCFfileDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/genotype";//        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/output";//        String expressionfileDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/phenotype";        String VCFfileDir = this.SNPfileDir;        String outputDir = this.rareAlleleCountDir + "/" + subDir[0];        String positionfileDir = this.TSSpositionfileDir;//        S3//        String name = "B18-E007,B18-E010,B18-E011,B18-E014,B18-E016,B18-E018,B18-E029,B18-E032,B18-E035,B18-E043,B18-E045,B18-E046,B18-E049,B18-E051,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E089,B18-E097,B18-E099,B18-E115,B18-E118,B18-E124,B18-E127,B18-E134,B18-E138,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E228,B18-E233,B18-E236,B18-E237,B18-E242,B18-E244,B18-E245,B18-E252,B18-E253,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E348,B18-E355,B18-E356,B18-E357";//        S7        //建立对应的name位点表        String[] Samplenames = Samplename.split(",");//        //        String[] FileNames = {"0k_2k"};//        String[] FileNames = {"2k_4k"};//        String[] FileNames = {"4k_6k"};//        String[] FileNames = {"6k_8k"};//        String[] FileNames = {"8k_10k"};//        String[] FileNames = {"0k_10k"};        //对于多个区间"i"，多个chr"j"进行rare allele count计数        System.out.println("This program is going to calculate minor allele count in every gene in different distance to TSS");        System.out.println("The calculation form is : 1.Deciding the minor allele: 0 or 1");        System.out.println("                          2.calculate the MAF and discard SNPs which MAF > 0.05");        System.out.println("                          3.0/0 or 1/1 will be counting as 0 allele count or 2 allele count decided by which one is minor allele");        System.out.println("                          4.Sum of every snp upstream genes");        System.out.println("                          5.Output file form : gene B18-E007    B18-E009");        System.out.println("                                               TraeCS4D355900 0 12");        HashSet<String> nameSet = new HashSet();        File[] fs = new File(VCFfileDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "vcf.gz");        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;            String Name = fs[i].getName().split("\\.")[1].replace("chr", "") + "." + fs[i].getName().split("\\.")[2];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.parallelStream().forEach(j -> {//        for (int j = 1; j < 43; j++) {            for (int i = 0; i < FileNames.length; i++) {                try {                    //0.读入文件和创建输出文件                    String ksite = FileNames[i].split("_")[0];                    System.out.println("This is running :" + "chr" + j + " file at " + ksite + " site");                    String[] TSS = null;                    String chr = j.split("\\.")[0];                    BufferedReader brVCF = IOUtils.getTextGzipReader(new File(VCFfileDir, "87B18.chr" + j + ".vcf.gz").getAbsolutePath());                    BufferedReader brexpr = IOUtils.getTextGzipReader(new File(positionfileDir, "S7expression" + chr + ".bed.gz").getAbsolutePath());//                    BufferedWriter bwS = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_" + FileNames[Integer.parseInt(i)] + "_RACount.txt").getAbsolutePath());                    BufferedWriter bwS = IOUtils.getTextWriter(new File(outputDir, "chr" + chr + "_" + FileNames[i] + "_RACount.txt").getAbsolutePath());                    //1.根据输出的矩阵SNPfile来对不同基因进行计数。                    bwS.write("gene\t");                    for (int m = 0; m < Samplenames.length; m++) {                        bwS.write(Samplenames[m] + "\t");                    }                    bwS.newLine();                    //2.创建一个关于基因和转录起始位点的对应关系表                    String tempexpr = null;                    String[] expr = null;                    HashMap<String, String> TSSMap = new HashMap<>();                    Set<String> TSSset = new HashSet<>();                    while ((tempexpr = brexpr.readLine()) != null) {                        if (tempexpr.startsWith("#")) continue;                        List<String> tList = pgl.infra.utils.PStringUtils.fastSplit(tempexpr);                        expr = tList.toArray(new String[tList.size()]);                        TSSMap.put(expr[3], expr[1]);                        TSSset.add(expr[3]);                        //TSSMap --> gene -- start                        //TSSset --> gene                    }                    System.out.println("Finish creating gene site map");                    TSS = TSSset.toArray(new String[TSSset.size()]);                    Arrays.sort(TSS);                    //3.创建计数矩阵并将其初始化为0                    int[][] count = new int[TSS.length][Samplenames.length];                    for (int m = 0; m < TSS.length; m++) {                        for (int n = 0; n < Samplenames.length; n++) {                            count[m][n] = 0;                        }                    }                    System.out.println("Finished initializing count matrix");                    //4.对VCF文件读入每一行进行处理输出MAF<0.05的SNPfile矩阵                    String[] VCF = null;                    String tempVCF = null;                    //4.1根据FileName定下所筛选的TSS上游的位置范围//                    int DiscontrolS = Integer.parseInt(FileNames[Integer.parseInt(i)].split("_")[0].replace("k", "")) * 1000;//                    int DiscontrolE = Integer.parseInt(FileNames[Integer.parseInt(i)].split("_")[1].replace("k", "")) * 1000;//                    int k = Integer.parseInt(i) + 1;                    int DiscontrolS = Integer.parseInt(FileNames[i].split("_")[0].replace("k", "")) * 1000;                    int DiscontrolE = Integer.parseInt(FileNames[i].split("_")[1].replace("k", "")) * 1000;                    System.out.println(DiscontrolE + "\t" + DiscontrolS);                    int first = Integer.parseInt(FileNames[i].split("_")[0].replace("k", ""));                    int last = Integer.parseInt(FileNames[i].split("_")[1].replace("k", ""));                    System.out.println("This is calculating " + first + "k to " + last + "k rare allele count");                    HashMap<String, Integer> VCFMap = new HashMap();                    int countline = 0;                    while ((tempVCF = brVCF.readLine()) != null) {                        countline++;                        if (countline % 5000 == 0) {                            System.out.print(countline + "\n");                        }                        if (tempVCF.startsWith("##")) continue;                        if (tempVCF.startsWith("#C")) {                            VCF = tempVCF.split("\t");                            for (int m = 9; m < VCF.length; m++) {                                VCFMap.put(VCF[m], m);                            }                            continue;                        } else {                            VCF = tempVCF.split("\t");                            int snpsite = Integer.parseInt(VCF[1]);                            int TSSrow = Integer.MAX_VALUE;                            for (int l = 0; l < TSS.length; l++) {                                int startsite = Integer.parseInt(TSSMap.get(TSS[l]));                                int distance = (int) (startsite - snpsite);//                                int distance = (int) (snpsite - startsite);                                if (distance >= DiscontrolS && distance < DiscontrolE) {                                    TSSrow = l;                                    String[] VCFforGT = new String[VCF.length - 9];                                    for (int m = 0; m < VCFforGT.length; m++) {                                        VCFforGT[m] = VCF[m + 9].split(":")[0];                                    }                                    int site0 = 0;                                    int site1 = 0;                                    for (int m = 0; m < VCFforGT.length; m++) {//读出0和1的个数，按照小值计算MAF。                                        if (VCFforGT[m].equals("0/0")) {                                            site0++;                                            site0++;                                        }                                        if (VCFforGT[m].equals("0/1")) {                                            site0++;                                            site1++;                                        }                                        if (VCFforGT[m].equals("1/1")) {                                            site1++;                                            site1++;                                        }                                    }                                    int minorAllele = Integer.MAX_VALUE;                                    if (site0 > site1) {                                        minorAllele = 1;                                    }                                    if (site1 > site0) {                                        minorAllele = 0;                                    }                                    if (minorAllele == 0) {                                        for (int m = 0; m < Samplenames.length; m++) {                                            if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("0/0")) {                                                count[TSSrow][m] += 2;                                            }                                            if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("1/1")) {                                                count[TSSrow][m] += 0;                                            }                                        }                                    }                                    if (minorAllele == 1) {                                        for (int m = 0; m < Samplenames.length; m++) {                                            if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("0/0")) {                                                count[TSSrow][m] += 0;                                            }                                            if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("1/1")) {                                                count[TSSrow][m] += 2;                                            }                                        }                                    }                                } else {                                    continue;                                }                            }                        }                    }//                            if (TSSrow < TSS.length) {////                                System.out.println("TSSrow: " + TSSrow + "\t\t\t");//                                String[] VCFforGT = new String[VCF.length - 9];//                                for (int m = 0; m < VCFforGT.length; m++) {//                                    VCFforGT[m] = VCF[m + 9].split(":")[0];//把每一行中的GT格式文件读出来////                                    System.out.println(VCFforGT[m]);//                                }//                                //4.2根据MAF值进行筛选是否要跳行//                                int site0 = 0;//                                int site1 = 0;////                                double MAF = 0.0000;//                                for (int m = 0; m < VCFforGT.length; m++) {//读出0和1的个数，按照小值计算MAF。//                                    if (VCFforGT[m].equals("0/0")) {//                                        site0++;//                                        site0++;//                                    }//                                    if (VCFforGT[m].equals("0/1")) {//                                        site0++;//                                        site1++;//                                    }//                                    if (VCFforGT[m].equals("1/1")) {//                                        site1++;//                                        site1++;//                                    }//                                }//                                int minorAllele = 0;////                                int sitesum = site0 + site1;//                                if (site0 > site1) {////                            MAF = new BigDecimal((float) site1 / sitesum).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();//                                    minorAllele = 1;//                                }//                                if (site1 > site0) {////                                MAF = new BigDecimal((float) site0 / sitesum).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();//                                    minorAllele = 0;//                                }//                                //4.3当MAF值小于0.05时，将对应的0/0和1/1计入数字////                            if (MAF < 0.05 && MAF > 0) {////                        SNPfile[0] = Integer.parseInt(VCF[1]);//                                if (minorAllele == 0) {//                                    for (int m = 0; m < Samplenames.length; m++) {//                                        if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("0/0")) {////                                    SNPfile[m + 1] = 2;//                                            count[TSSrow][m] += 2;//                                        }//                                        if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("1/1")) {////                                    SNPfile[m + 1] = 0;//                                            count[TSSrow][m] += 0;//                                        }//                                    }//                                }//                                if (minorAllele == 1) {//                                    for (int m = 0; m < Samplenames.length; m++) {//                                        if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("0/0")) {////                                    SNPfile[m + 1] = 0;//                                            count[TSSrow][m] += 0;//                                        }//                                        if (VCFforGT[VCFMap.get(Samplenames[m]) - 9].equals("1/1")) {////                                    SNPfile[m + 1] = 2;//                                            count[TSSrow][m] += 2;//                                        }//                                    }//                                }//                            }//                        for (int m = 0; m < SNPfile.length - 1; m++) {//                            for (int n = 0; n < TSS.length; n++) {//                                int snpsite = SNPfile[0];//                                int startsite = Integer.parseInt(TSSMap.get(TSS[n]));//                                int distance = (int) (startsite - snpsite);//                                if (distance >= DiscontrolS && distance < DiscontrolE) {//                                    count[n][m] += SNPfile[m + 1];//                                }//                            }//                        }                    for (int m = 0; m < TSS.length; m++) {                        bwS.write(TSS[m] + "\t");                        for (int n = 0; n < Samplenames.length; n++) {                            bwS.write(count[m][n] + "\t");                        }                        bwS.newLine();                    }                    System.out.println("complete writing file : " + "chr" + chr + "at " + ksite + " site");                    brexpr.close();                    brVCF.close();                    bwS.flush();                    bwS.close();                } catch (                        Exception e) {                    e.printStackTrace();                }            }        });    }    public void changeName() {        String infileS = "/data1/home/xiaohan/rareallele/fastQTL/chr36.vcf";        String outputDir = "/data1/home/xiaohan/rareallele/fastQTL";        BufferedReader br = IOUtils.getTextReader(infileS);        BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "Chr36.vcf").getAbsolutePath());        String temp = null;        String[] temps = null;        String[] tems = null;        try {            while ((temp = br.readLine()) != null) {                if (temp.startsWith("#")) {                    temps = temp.split("\t");                    for (int i = 0; i < 1; i++) {                        tems = temps[i].split("]");                        bw.write("#" + tems[1] + "\t");                    }                    for (int i = 1; i < temps.length; i++) {                        tems = temps[i].split("]");                        bw.write(tems[1] + "\t");                    }                    bw.newLine();                } else {                    bw.write(temp);                    bw.newLine();                }            }            bw.flush();            bw.close();            br.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getGTvcf() {        String inputDir = "/data2/xiaohan/sub7/";        String outputDir = "/data2/xiaohan/GT/S7";        HashSet<String> nameSet = new HashSet<String>();        File[] fs = new File(inputDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "vcf.gz");        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) continue;//            String[] SampleName = fs[i].getName().split("\\.");//            String Name = SampleName[0].replace(SampleName[0].substring(0, 3), "");            String Name = fs[i].getName().split("\\.")[0].split("p")[1];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach((String p) -> {            try {                System.out.println("Start reading file snp" + p + "vcf.gz");                BufferedReader br = IOUtils.getTextGzipReader(new File(inputDir, "snp" + p + ".vcf.gz").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextGzipWriter(new File(outputDir, "chr" + p + "GT.vcf.gz").getAbsolutePath());                String temp = null;                String[] temps = null;                String[] tems = null;//                S3//                String name = "B18-E007,B18-E010,B18-E011,B18-E014,B18-E016,B18-E018,B18-E029,B18-E032,B18-E035,B18-E043,B18-E045,B18-E046,B18-E049,B18-E051,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E089,B18-E097,B18-E099,B18-E115,B18-E118,B18-E124,B18-E127,B18-E134,B18-E138,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E228,B18-E233,B18-E236,B18-E237,B18-E242,B18-E244,B18-E245,B18-E252,B18-E253,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E348,B18-E355,B18-E356,B18-E357";//                S7                String name = "B18-E002,B18-E007,B18-E008,B18-E011,B18-E014,B18-E018,B18-E023,B18-E024,B18-E029,B18-E032,B18-E038,B18-E043,B18-E045,B18-E046,B18-E049,B18-E051,B18-E052,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E083,B18-E087,B18-E089,B18-E097,B18-E099,B18-E115,B18-E118,B18-E124,B18-E127,B18-E138,B18-E139,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E203,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E227,B18-E228,B18-E233,B18-E236,B18-E237,B18-E242,B18-E244,B18-E245,B18-E252,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E320,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E347,B18-E355,B18-E356,B18-E357";                String[] names = name.split(",");                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("##"))                        continue;                    if (temp.startsWith("#C")) {                        temps = temp.split("\t");                        for (int i = 0; i < 9; i++) {                            bw.write(temps[i] + "\t");                        }                        for (int j = 0; j < names.length - 1; j++) {                            bw.write(names[j] + "\t");                        }                        bw.write(names[names.length - 1]);                        bw.newLine();                        continue;                    }                    temps = temp.split("\t");                    for (int i = 0; i < 2; i++) {                        bw.write(temps[i] + "\t");                    }                    //ID                    bw.write("snp_" + temps[0] + "_" + temps[1] + "\t");                    //REF ALT                    for (int i = 3; i < 5; i++) {                        bw.write(temps[i] + "\t");                    }                    //QUAL FILTER                    for (int i = 5; i < 7; i++) {                        bw.write("." + "\t");                    }                    bw.write("INFO" + "\t" + "GT" + "\t");                    for (int i = 9; i < temps.length; i++) {                        tems = temps[i].split(":");                        bw.write(tems[0] + "\t");                    }                    bw.newLine();                }                bw.flush();                bw.close();                br.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public static void main(String[] args) {        new rareallele();    }}