package xiaohan.rareallele;import daxing.load.ancestralSite.Standardization;import org.apache.commons.math3.stat.StatUtils;import pgl.infra.dna.genot.GenoIOFormat;import pgl.infra.dna.genot.GenotypeGrid;import pgl.infra.dna.genot.GenotypeOperation;import pgl.infra.dna.genot.summa.SumTaxaDivergence;import pgl.infra.range.Range;import pgl.infra.utils.IOFileFormat;import pgl.infra.utils.PStringUtils;import smile.stat.Stat;import java.io.BufferedReader;import java.io.BufferedWriter;import java.io.File;import java.io.IOException;import java.math.BigDecimal;import java.math.RoundingMode;import java.text.DecimalFormat;import java.util.*;import static com.ibm.icu.lang.UCharacter.IndicPositionalCategory.NA;import static pgl.infra.utils.Benchmark.getTimeSpanNanoseconds;public class rareallele {    String Samplename = "B18-E007,B18-E008,B18-E011,B18-E014,B18-E018,B18-E023,B18-E024,B18-E029,B18-E032,B18-E038,B18-E043,B18-E046,B18-E049,B18-E051,B18-E052,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E083,B18-E087,B18-E089,B18-E097,B18-E099,B18-E118,B18-E124,B18-E127,B18-E138,B18-E139,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E203,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E227,B18-E228,B18-E233,B18-E237,B18-E242,B18-E245,B18-E252,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E320,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E347,B18-E355,B18-E356,B18-E357";    String SNPfileDir = "/data2/xiaohan/genotype_root/genotype_rootMaf005";//根据不同MAF值过滤得到的VCF文件存放位置    String TSSpositionfileDir = "/data1/home/xiaohan/rareallele/fastQTL/expression/S7";//存储不同基因的位置区域的文件存放位置chr + start + end + gene    String ExpressionFileDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable";//存储不同表达矩阵的文件存放位置all/donor02/sub/subhomo    //    String rareAlleleCountDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/rareAlleleCount/MAF010-25";//不同的上游rare allele数目统计的文件存放位置//    String donor02GeneNamelistfile = "/data1/home/xiaohan/rareallele/rankcorrelation/infor/donor02GeneName.txt";//表达个体数目大于百分之二十的基因名字列表文件    String homoGeneNamelistfile = "/Users/yxh/Documents/RareAllele/006information/TheABD.txt";//ABD同源基因的基因列表文件    String enrichmentTableDir = "";//获取得到的稀有变异富集的表格文件    String[] subDir = {"chr1-42", "all", "donor02", "sub", "subhomo"};    //    String[] FileNames = {"0k_20k","20k_40k","40k_60k","60k_80k","80k_1000k","0_1000k","0k_200k", "200k_400k", "400k_600k", "600k_800k", "800k_1000k", "0k_1000k"};//    String[] FileNames = {"0k_200k", "200k_400k", "400k_600k", "600k_800k", "800k_1000k", "0k_1000k"};//    String[] FileNames = {"0k_1000k"};//    String[] FileNames = {"100k_200k", "200k_300k", "300k_400k", "400k_500k", "500k_600k", "600k_700k", "700k_800k", "800k_900k", "900k_1000k"};    //    String[] FileNames = {"0k_100k"};    String rareAlleleCountDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/rareAlleleCount/1Mupgene";    String donor02GeneNamelistfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/donor02GeneName.txt";    String suffix = "1000.txt";    public rareallele() throws IOException {//        this.getGeneRange();//获取基因的各项信息//        this.getGTvcf();//将VCF转换成GT格式////        this.temp();////        this.mkFileDir();//生成文件夹//        this.getupstreamSNPcount();//根据上游的不同位置call出rare allele count//        this.mergeUprareCount();//将生成的不同染色体的rare allele count进行合并//        this.getdonor02File();//将rare allele count数目只取表达的基因//        this.getsubdonor02File();//在donor文件中分A，B，D，Ahomo，Bhomo，Dhomo////        this.changeSNPID();//        this.FDRcalculation();////        this.SplitPhenoBychr();//根据chr拆分pheno文件//////        this.extractTopPheno();//获取高表达的表达文件//        this.extractTopSNP();//根据表达量的高低，获取对应基因的SNP count////        this.extractsubPheno();//获取不同亚基因组的表达数据//        this.extracthomoPheno();//        //for basic analysis pattern//        this.getSNPdensity();//        this.getminorAlleleFrequency();//        this.getheterozygosityindi();//        this.getheterozygositysite();//        this.getmissingrate();//        this.changefile();//        this.getIBdistane();//获取ibs//        this.getDensityIBS();//获取ibs列表做density plot////        this.getSamePosition();//根据RNASNP位点获取相同位点的genotype SNP文件//        this.reheader();//更改VCF文件的Sample名字；////        this.countExpDonor02();//get donor02 expressed gene list////        this.getExpmedian();//        this.getExprZscoreTable();//        this.getlogFoldChange();//        this.getOutlierGene();//        this.getOutlierRareVariantsCount();//        this.getZscoreCountEnrichment();//        this.getSnpsite();//        this.distributioningenome();//        this.getUpStreamSNPlist();//        this.splitGFF();//        this.setFile();//        this.Gerp2();//        this.subGerp2();//        this.subVCF();//        this.getGerpdensity();//        this.triadsexpression();//算出每个traids中三个基因的表达及比例（总和）        //TraesCS3A02G300900	597.5899390050001	TraesCS3B02G335600	985.9759645109998	TraesCS3D02G300900	254.87338734399998        //TraesCS3A02G300900	0.3250528543292037	TraesCS3B02G335600	0.536311407949605	TraesCS3D02G300900	0.13863573772119137//        this.getTriadindex();//算出每个triads中三个基因在表达总表中的index         //TraesCS3A02G300900	34211	TraesCS3B02G335600	39776	TraesCS3D02G300900	45369//        this.getexpression();//查看A、B、D中整体表达水平哪个更高        //A	B	D        //4.815450103	9.630900205	70.16798721//        this.getSingleTissueTriads();        //根据donor基因选出来组织特异表达的triads        //TraesCS3A02G300900	TraesCS3B02G335600	TraesCS3D02G300900//        this.getPattern();        //根据表达的结果算出来pattern        //TraesCS3A02G300900	0.3250528543292037	TraesCS3B02G335600	0.536311407949605	TraesCS3D02G300900	0.13863573772119137	M110//        this.triadsExpRareCount();        //在表达结果中加入每个triads每个个体（总共）的A、B、Dcount数目和        //geneA	ratioA	geneB	ratioB	geneD	ratioD	state	countA	countB	countD        //TraesCS3A02G300900	0.3250528543292037	TraesCS3B02G335600	0.536311407949605	TraesCS3D02G300900	0.13863573772119137	M110	58	96	218//        this.getPatternCount();////        this.getmergeCountmix1();//        this.getmergeCountmix2();        /*           Enrichment        *///        this.getTransposonEnrichment();//        this.UpstreamRaretoCommon();//        this.UpstreamRaretoCommon1();//        this.UpstreamRaretoCommon2();//        this.transformVCF();//        this.conservationCount();//        this.writeposition();//        this.writePositioninBins();//        this.distancepvalue();//        this.eQTL();//        this.geneticLoad2();//        this.TransposonTransformation();//        this.getPatternProportion();//        this.FPKM();        //get fastQTL//        this.eGeneVariantspair();//        this.check();//        this.check1();//        this.getsubfrq();//        this.geteGene();//        this.geteGeneNumber();//        this.getsharedeGene();//        this.getsharedeQTL();//        this.geteGeneName();//        this.getGeneConstraint();//        this.getGeneConstraintMap();//        this.getdistanceNumber();//        this.getdistanceNumberforeGene();//        this.getdistanceNumberforsub();//        this.getdistanceEffect();//        this.getdistanceEffectforeGene();//        this.getdistanceEffectforsub();//        this.getMafEffect();//        this.getConstrainteQTLfile();//        this.getConstriantEffect();//        this.getCommonwithRare();//        this.getUpstreamVCF();        this.temp1();    }    public void temp1() {//        int a = 360;//        int b = 22;//        double het = (double) a / b;//        String h = String.valueOf(het);//        DecimalFormat df = new DecimalFormat("0.000000");//        df.setRoundingMode(RoundingMode.HALF_UP);//        double h1 = new BigDecimal(het).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();////        System.out.println(decFor.format((a/b)*1000/1000));//        System.out.println(df.format(h1));        String[] str = {"0", "1"};        String[] str1 = {"2", "3"};        String[] str2 = {"4", "5"};        ArrayList<String> number = new ArrayList<>(Arrays.asList(str));        ArrayList<String> number1 = new ArrayList<>(Arrays.asList(str1));        ArrayList<String> number2 = new ArrayList<>(Arrays.asList(str2));        HashMap<String, ArrayList<String>> geneMap = new HashMap<>();        String site1 = "1_1";        String site2 = "1_2";        geneMap.put(site1, number1);        geneMap.put(site2, number2);        ArrayList<String> newlist = new ArrayList<>();        newlist = geneMap.get(site1);        for (int i = 0; i < str.length; i++) {            if (!newlist.contains(str[i])) {                newlist.add(str[i]);            }        }        geneMap.put(site1, newlist);        String[] output = new String[newlist.size()];        newlist.toArray(output);        ArrayList<String> newlist1 = geneMap.get("1_2");        String[] output1 = new String[newlist1.size()];        newlist1.toArray(output1);        for (int i = 0; i < output1.length; i++) {            System.out.println(output1[i]);        }//        int max = 1000;//        int min = 0;//        int[] snpsite = new int[100];//        for (int i = 0; i < snpsite.length; i++) {//            snpsite[i] = i * 10;//        }//        int[] dis = new int[10];//        for (int i = 0; i < dis.length; i++) {//            dis[i] = i * 3;//        }//        int[] startsite = new int[10];//        for (int i = 0; i < startsite.length; i++) {//            startsite[i] = (i + 1) * 100 - dis[i];//        }//        Arrays.sort(snpsite);//        Arrays.sort(startsite);//        System.out.println("This is snpsite");//        for (int i = 0; i < snpsite.length; i++) {//            System.out.println(snpsite[i]);//        }//        System.out.println("This is startsite");//        for (int i = 0; i < startsite.length; i++) {//            System.out.println(startsite[i]);//        }//        int distance = 8;//        for (int j = 0; j < snpsite.length; j++) {//            for (int i = 0; i < startsite.length; i++) {//                int distanceNumber = startsite[i] - snpsite[j];//                if (distanceNumber > distance) {//                    System.out.println("not get it of startsite: " + startsite[i] + ", snpsite: " + snpsite[j]);//                    break;//                }//                if (distanceNumber >= 0 && distanceNumber <= distance) {//                    System.out.println(snpsite[j] + "\t" + startsite[i]);//                }//                if (distanceNumber < 0) {//                    System.out.println("end of startsite: " + startsite[i] + ", snpsite: " + snpsite[j]);//                    continue;//                }////            }//        }    }    public void transformVCF() {        String VCFfileDir = "/data2/xiaohan/genotype_root/genotype_root";        String outputDir1 = "/data2/xiaohan/genotype_root/genotype_root/variantspos012";        String outputDir2 = "/data2/xiaohan/genotype_root/genotype_root/variantspos01";        int samplesize = 87;        HashSet nameSet = new HashSet<>();        File[] fs = new File(VCFfileDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "vcf.gz");        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("\\.")[1].replace("chr", "");//            if (36 <= Integer.parseInt(Name) && Integer.parseInt(Name) <= 36) {            nameSet.add(Name);            System.out.println(Name);//            }        }        nameSet.stream().forEach(j -> {            try {                String infor = "/data2/xiaohan/VCF_information/frq/chr" + j + ".frq";                HashMap<String, String> minorBaseMap = xiaohan.utils.MinorAlleleFrequency.getMinorBase(infor);                BufferedReader brVCF = IOUtils.getTextGzipReader(new File(VCFfileDir, "87B18.chr" + j + ".recode.vcf.gz").getAbsolutePath());                BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputDir1, "chr" + j + "_variantspos012.txt").getAbsolutePath());//                BufferedWriter bw2 = IOUtils.getTextWriter(new File(outputDir2, "chr" + j + "_variantspos01.txt").getAbsolutePath());                String[] VCF = null;                String tempVCF = null;                int countline = 0;                int minor = -1;                while ((tempVCF = brVCF.readLine()) != null) {                    countline++;                    if (countline % 5000 == 0) {                        System.out.print(countline + "\n");                    }                    if (tempVCF.startsWith("##")) {                        continue;                    }                    if (tempVCF.startsWith("#C")) {                        bw1.write("Gene" + "\t" + "POS" + "\t");//                        bw2.write("Gene" + "\t" + "POS" + "\t");                        VCF = tempVCF.split("\t");                        for (int m = 9; m < VCF.length; m++) {                            bw1.write(VCF[m] + "\t");//                            bw2.write(VCF[m] + "\t");                        }                        bw1.newLine();//                        bw2.newLine();                        continue;                    }                    VCF = tempVCF.split("\t");                    int snpsite = Integer.parseInt(VCF[1]);                    String snp = String.valueOf(snpsite);                    if (VCF[3].equals(minorBaseMap.get(snp))) {                        minor = 0;                    } else if (VCF[4].equals(minorBaseMap.get(snp))) {                        minor = 1;                    }                    String[] genotype = xiaohan.utils.MinorAlleleFrequency.getMinorGenotype(minor);                    StringBuilder sb1 = new StringBuilder();//                    StringBuilder sb2 = new StringBuilder();                    sb1.append(j).append("\t").append(snp).append("\t");//                    sb2.append(j).append("\t").append(snp).append("\t");                    for (int m = 0; m < samplesize; m++) {                        if (VCF[m + 9].split(":")[0].equals(genotype[0])) {                            sb1.append("1\t");//                            sb2.append("0\t");                        }                        if (VCF[m + 9].split(":")[0].equals(genotype[1])) {                            sb1.append("2\t");//                            sb2.append("2\t");                        } else {                            sb1.append("0\t");//                            sb2.append("0\t");                        }                    }                    bw1.write(sb1.toString());//                    bw2.write(sb2.toString());                    bw1.newLine();//                    bw2.newLine();                }                brVCF.close();                bw1.flush();                bw1.close();//                bw2.flush();//                bw2.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void UpstreamRaretoCommon2() {        String VCFfileDir = "/data2/xiaohan/genotype_root/genotype_root/variantspos01";        String outputDir = "/data1/home/xiaohan/rareallele/";        int samplesize = 87;        HashSet nameSet = new HashSet<>();        File[] fs = new File(VCFfileDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "vcf.gz");        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("\\.")[1].replace("chr", "");            if (36 <= Integer.parseInt(Name) && Integer.parseInt(Name) <= 36) {                nameSet.add(Name);                System.out.println(Name);            }        }        nameSet.parallelStream().forEach(j -> {            for (int fn = 0; fn < FileNames.length; fn++) {                try {                    String infor = "/data2/xiaohan/VCF_information/frq/chr" + j + ".frq";                    HashMap<String, Double> FrequencyMap = xiaohan.utils.MinorAlleleFrequency.getMinorFrequency(infor);                    String infile = "/data1/home/xiaohan/rareallele/chr36map_1M.txt";                    HashMap<String, ArrayList<String>> siteGenMap = xiaohan.utils.geneUpstreamSnp.getSnpGeneMap(infile);                    int minor = 0;                    String[] geneNames = xiaohan.utils.geneUpstreamSnp.getGenes(infile);                    HashSet<String> siteSet = xiaohan.utils.geneUpstreamSnp.getSites(infile);                    HashMap<String, Integer> geneIndexMap = new HashMap<>();                    for (int i = 0; i < geneNames.length; i++) {                        geneIndexMap.put(geneNames[i], i);                    }                    int[][] countrare = new int[geneNames.length][samplesize];                    for (int m = 0; m < geneNames.length; m++) {                        for (int n = 0; n < samplesize; n++) {                            countrare[m][n] = 0;                        }                    }                    int[][] countcommon = new int[geneNames.length][samplesize];                    for (int m = 0; m < geneNames.length; m++) {                        for (int n = 0; n < samplesize; n++) {                            countcommon[m][n] = 0;                        }                    }                    BufferedReader brVCF = IOUtils.getTextGzipReader(new File(VCFfileDir, "chr" + j + "_variantspos01.txt").getAbsolutePath());                    BufferedWriter bwS = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_enrichment.txt").getAbsolutePath());                    BufferedWriter bwS1 = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_rare.txt").getAbsolutePath());                    BufferedWriter bwS2 = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_common.txt").getAbsolutePath());                    System.out.println("Finished initializing count matrix");                    String[] VCF = null;                    String tempVCF = null;                    int countline = 0;                    while ((tempVCF = brVCF.readLine()) != null) {                        countline++;                        if (countline % 5000 == 0) {                            System.out.print(countline + "\n");                        }                        if (tempVCF.startsWith("Gene")) {                            bwS.write(tempVCF.split("\t")[0] + "\t" + tempVCF.split("POS\t")[1]);                            bwS.newLine();                            bwS1.write(tempVCF.split("\t")[0] + "\t" + tempVCF.split("POS\t")[1]);                            bwS1.newLine();                            bwS2.write(tempVCF.split("\t")[0] + "\t" + tempVCF.split("POS\t")[1]);                            bwS2.newLine();                            continue;                        }                        VCF = tempVCF.split("\t");                        String snp = VCF[1];                        if (!siteSet.contains(snp)) continue;                        ArrayList<String> genelist = siteGenMap.get(snp);                        String[] genes = genelist.toArray(new String[genelist.size()]);                        double frequency = FrequencyMap.get(snp);                        if (frequency <= 0.05) {                            for (int i = 0; i < genes.length; i++) {                                for (int m = 0; m < samplesize; m++) {                                    countrare[geneIndexMap.get(genes[i])][m] += Integer.parseInt(VCF[m+2]);                                }                            }                        } else if (frequency > 0.05) {                            for (int i = 0; i < genes.length; i++) {                                for (int m = 0; m < samplesize; m++) {                                    countcommon[geneIndexMap.get(genes[i])][m] += Integer.parseInt(VCF[m+2]);                                }                            }                        }                    }                    DecimalFormat df = new DecimalFormat("0.00000");                    for (int p = 0; p < geneNames.length; p++) {                        StringBuilder sb = new StringBuilder();                        StringBuilder sb1 = new StringBuilder();                        StringBuilder sb2 = new StringBuilder();                        sb.append(geneNames[p] + "\t");                        sb1.append(geneNames[p] + "\t");                        sb2.append(geneNames[p] + "\t");                        for (int q = 0; q < samplesize; q++) {                            if (countcommon[p][q] != 0) {                                double het = (double) countrare[p][q] / countcommon[p][q];                                double h1 = new BigDecimal(het).setScale(5, BigDecimal.ROUND_HALF_UP).doubleValue();                                sb.append(df.format(h1) + "\t");                                sb1.append(countrare[p][q] + "\t");                                sb2.append(countcommon[p][q] + "\t");                            } else {                                sb.append("NA\t");                                sb1.append(countrare[p][q] + "\t");                                sb2.append(countcommon[p][q] + "\t");                            }                        }                        bwS.write(sb.toString());                        bwS.newLine();                        bwS1.write(sb1.toString());                        bwS1.newLine();                        bwS2.write(sb2.toString());                        bwS2.newLine();                    }                    brVCF.close();                    bwS.flush();                    bwS.close();                    bwS1.flush();                    bwS1.close();                    bwS2.flush();                    bwS2.close();                } catch (Exception e) {                    e.printStackTrace();                }            }        });    }    public void UpstreamRaretoCommon1() {        String VCFfileDir = "/data2/xiaohan/genotype_root/genotype_root";        String outputDir = "/data1/home/xiaohan/rareallele/";        int samplesize = 87;        HashSet nameSet = new HashSet<>();        File[] fs = new File(VCFfileDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "vcf.gz");        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("\\.")[1].replace("chr", "");            if (36 <= Integer.parseInt(Name) && Integer.parseInt(Name) <= 36) {                nameSet.add(Name);                System.out.println(Name);            }        }        nameSet.parallelStream().forEach(j -> {            for (int fn = 0; fn < FileNames.length; fn++) {                try {                    String infor = "/data2/xiaohan/VCF_information/frq/chr" + j + ".frq";                    HashMap<String, String> minorBaseMap = xiaohan.utils.MinorAlleleFrequency.getMinorBase(infor);                    HashMap<String, Double> FrequencyMap = xiaohan.utils.MinorAlleleFrequency.getMinorFrequency(infor);                    String infile = "/data1/home/xiaohan/rareallele/chr36map_1M.txt";                    HashMap<String, ArrayList<String>> siteGenMap = xiaohan.utils.geneUpstreamSnp.getSnpGeneMap(infile);                    int minor = 0;                    String[] geneNames = xiaohan.utils.geneUpstreamSnp.getGenes(infile);                    HashSet<String> siteSet = xiaohan.utils.geneUpstreamSnp.getSites(infile);                    HashMap<String, Integer> geneIndexMap = new HashMap<>();                    for (int i = 0; i < geneNames.length; i++) {                        geneIndexMap.put(geneNames[i], i);                    }                    int[][] countrare = new int[geneNames.length][samplesize];                    for (int m = 0; m < geneNames.length; m++) {                        for (int n = 0; n < samplesize; n++) {                            countrare[m][n] = 0;                        }                    }                    int[][] countcommon = new int[geneNames.length][samplesize];                    for (int m = 0; m < geneNames.length; m++) {                        for (int n = 0; n < samplesize; n++) {                            countcommon[m][n] = 0;                        }                    }                    BufferedReader brVCF = IOUtils.getTextGzipReader(new File(VCFfileDir, "87B18.chr" + j + ".recode.vcf.gz").getAbsolutePath());                    BufferedWriter bwS = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_enrichment.txt").getAbsolutePath());                    BufferedWriter bwS1 = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_rare.txt").getAbsolutePath());                    BufferedWriter bwS2 = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_common.txt").getAbsolutePath());                    System.out.println("Finished initializing count matrix");                    String[] VCF = null;                    String tempVCF = null;                    int countline = 0;                    while ((tempVCF = brVCF.readLine()) != null) {                        countline++;                        if (countline % 5000 == 0) {                            System.out.print(countline + "\n");                        }                        if (tempVCF.startsWith("##")) {                            continue;                        }                        if (tempVCF.startsWith("#C")) {                            bwS.write("Gene" + "\t");                            VCF = tempVCF.split("\t");                            for (int m = 9; m < VCF.length; m++) {                                bwS.write(VCF[m] + "\t");                            }                            bwS.newLine();                            continue;                        }                        VCF = tempVCF.split("\t");                        int snpsite = Integer.parseInt(VCF[1]);                        String snp = String.valueOf(snpsite);                        if (!siteSet.contains(snp)) continue;                        ArrayList<String> genelist = siteGenMap.get(snp);                        String[] genes = genelist.toArray(new String[genelist.size()]);                        if (VCF[3].equals(minorBaseMap.get(snp))) {                            minor = 0;                        } else if (VCF[4].equals(minorBaseMap.get(snp))) {                            minor = 1;                        }                        String[] genotype = xiaohan.utils.MinorAlleleFrequency.getMinorGenotype(minor);                        double frequency = FrequencyMap.get(snp);                        if (frequency <= 0.05) {                            for (int i = 0; i < genes.length; i++) {                                for (int m = 0; m < samplesize; m++) {                                    if (VCF[m + 9].split(":")[0].equals(genotype[0])) {                                        countrare[geneIndexMap.get(genes[i])][m] += 1;                                    }                                    if (VCF[m + 9].split(":")[0].equals(genotype[1])) {                                        countrare[geneIndexMap.get(genes[i])][m] += 2;                                    }                                }                            }                        } else if (frequency > 0.05) {                            for (int i = 0; i < genes.length; i++) {                                for (int m = 0; m < samplesize; m++) {                                    if (VCF[m + 9].split(":")[0].equals(genotype[0])) {                                        countcommon[geneIndexMap.get(genes[i])][m] += 1;                                    }                                    if (VCF[m + 9].split(":")[0].equals(genotype[1])) {                                        countcommon[geneIndexMap.get(genes[i])][m] += 2;                                    }                                }                            }                        }                    }                    DecimalFormat df = new DecimalFormat("0.00000");                    for (int p = 0; p < geneNames.length; p++) {                        StringBuilder sb = new StringBuilder();                        StringBuilder sb1 = new StringBuilder();                        StringBuilder sb2 = new StringBuilder();                        sb.append(geneNames[p] + "\t");                        sb1.append(geneNames[p] + "\t");                        sb2.append(geneNames[p] + "\t");                        for (int q = 0; q < samplesize; q++) {                            if (countcommon[p][q] != 0) {                                double het = (double) countrare[p][q] / countcommon[p][q];                                double h1 = new BigDecimal(het).setScale(5, BigDecimal.ROUND_HALF_UP).doubleValue();                                sb.append(df.format(h1) + "\t");                                sb1.append(countrare[p][q] + "\t");                                sb2.append(countcommon[p][q] + "\t");                            } else {                                sb.append("NA\t");                                sb1.append(countrare[p][q] + "\t");                                sb2.append(countcommon[p][q] + "\t");                            }                        }                        bwS.write(sb.toString());                        bwS.newLine();                        bwS1.write(sb1.toString());                        bwS1.newLine();                        bwS2.write(sb2.toString());                        bwS2.newLine();                    }                    brVCF.close();                    bwS.flush();                    bwS.close();                    bwS1.flush();                    bwS1.close();                    bwS2.flush();                    bwS2.close();                } catch (Exception e) {                    e.printStackTrace();                }            }        });    }    public void UpstreamRaretoCommon() {        String gff3 = "/data1/home/xiaohan/rareallele/SiPASpipeline/reference/wheat_v1.1_Lulab.gff3";//        String gff3 = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/wheat_v1.1_Lulab.gff3";        GeneFeature gf = new GeneFeature(gff3);        String VCFfileDir = "/data2/xiaohan/genotype_root/genotype_root";//        String VCFfileDir = "/Users/yxh/Documents/RareAllele/004test";//        String outputDir = "/Users/yxh/Documents/RareAllele/004test";        String outputDir = "/data1/home/xiaohan/rareallele/RareVariantEnrichment";//        String[] FileNames = {"100k_200k", "200k_300k", "300k_400k", "400k_500k", "500k_600k", "600k_700k", "700k_800k", "800k_900k", "900k_1000k"};        String[] FileNames = {"0k_1000k"};        int samplesize = 87;        HashSet nameSet = new HashSet<>();        File[] fs = new File(VCFfileDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "vcf.gz");        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("\\.")[1].replace("chr", "");//            if (36 <= Integer.parseInt(Name) && Integer.parseInt(Name) <= 36) {            nameSet.add(Name);//                System.out.println(Name);//            }        }        nameSet.parallelStream().forEach(j -> {            for (int fn = 0; fn < FileNames.length; fn++) {                try {//                    String infor = "/Users/yxh/Documents/RareAllele/004test/chr" + j + ".frq";                    String infor = "/data2/xiaohan/VCF_information/frq/chr" + j + ".frq";                    HashMap<String, Double> FrequencyMap = new HashMap<>(160000);                    FrequencyMap = xiaohan.utils.MinorAlleleFrequency.getMinorFrequency(infor);                    HashMap<String, String> minorBaseMap = xiaohan.utils.MinorAlleleFrequency.getMinorBase(infor);                    int minor = 0;                    BufferedReader brVCF = IOUtils.getTextGzipReader(new File(VCFfileDir, "87B18.chr" + j + ".recode.vcf.gz").getAbsolutePath());                    BufferedWriter bwS = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_" + FileNames[fn] + "_enrichment.txt").getAbsolutePath());                    BufferedWriter bwS1 = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_" + FileNames[fn] + "_rare.txt").getAbsolutePath());                    BufferedWriter bwS2 = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_" + FileNames[fn] + "_common.txt").getAbsolutePath());                    HashSet<String> geneName = new HashSet<>();                    for (int i = 0; i < gf.genes.length; i++) {                        String name = gf.genes[i].geneName;//                        System.out.println(name);                        int chr = gf.genes[i].geneRange.chr;                        if (chr == Integer.parseInt(String.valueOf(j))) {                            geneName.add(name);                        }                    }                    String[] geneNames = geneName.toArray(new String[geneName.size()]);                    Arrays.sort(geneNames);                    int[][] countrare = new int[geneNames.length][samplesize];                    for (int m = 0; m < geneNames.length; m++) {                        for (int n = 0; n < samplesize; n++) {                            countrare[m][n] = 0;                        }                    }                    int[][] countcommon = new int[geneNames.length][samplesize];                    for (int m = 0; m < geneNames.length; m++) {                        for (int n = 0; n < samplesize; n++) {                            countcommon[m][n] = 0;                        }                    }                    System.out.println("Finished initializing count matrix");                    //4.对VCF文件读入每一行进行处理输出MAF<0.05的SNPfile矩阵                    String[] VCF = null;                    String tempVCF = null;                    //4.1根据FileName定下所筛选的TSS上游的位置范围                    int DiscontrolS = Integer.parseInt(FileNames[fn].split("_")[0].replace("k", "")) * 1000;                    int DiscontrolE = Integer.parseInt(FileNames[fn].split("_")[1].replace("k", "")) * 1000;                    System.out.println(DiscontrolE + "\t" + DiscontrolS);//                    HashMap<String, Integer> VCFMap = new HashMap();                    int countline = 0;                    while ((tempVCF = brVCF.readLine()) != null) {                        countline++;                        if (countline % 5000 == 0) {                            System.out.print(countline + "\n");                        }                        if (tempVCF.startsWith("##")) {                            continue;                        }                        if (tempVCF.startsWith("#C")) {                            bwS.write("Gene" + "\t");                            VCF = tempVCF.split("\t");                            for (int m = 9; m < VCF.length; m++) {                                bwS.write(VCF[m] + "\t");                            }                            bwS.newLine();                            continue;                        }                        VCF = tempVCF.split("\t");                        int snpsite = Integer.parseInt(VCF[1]);                        String snp = String.valueOf(j) + "_" + String.valueOf(snpsite);                        double frequency = FrequencyMap.get(snp);                        int TSSrow = Integer.MAX_VALUE;                        for (int l = 0; l < geneNames.length; l++) {                            int strand = gf.getGeneStrand(gf.getGeneIndex(geneNames[l]));                            int startsite = gf.getGeneStart(gf.getGeneIndex(geneNames[l]));                            int endsite = gf.getGeneEnd(gf.getGeneIndex(geneNames[l]));                            int distance = Integer.MAX_VALUE;//                            System.out.println(strand);                            if (strand == 1) {                                distance = startsite - snpsite;                            } else {                                distance = snpsite - endsite;                            }                            if (distance >= DiscontrolS && distance < DiscontrolE) {                                String[] VCFforGT = new String[VCF.length - 9];                                for (int m = 0; m < VCFforGT.length; m++) {                                    VCFforGT[m] = VCF[m + 9].split(":")[0];                                }                                if (VCF[3].equals(minorBaseMap.get(snpsite))) {                                    minor = 0;                                } else if (VCF[4].equals(minorBaseMap.get(snpsite))) {                                    minor = 1;                                }                                String[] genotype = xiaohan.utils.MinorAlleleFrequency.getMinorGenotype(minor);                                if (frequency < 0.05) {                                    for (int m = 0; m < samplesize; m++) {                                        if (VCFforGT[m].equals(genotype[0])) {                                            countrare[l][m] += 1;                                        }                                        if (VCFforGT[m].equals(genotype[1])) {                                            countrare[l][m] += 2;                                        }                                    }                                } else if (frequency >= 0.05) {                                    for (int m = 0; m < samplesize; m++) {                                        if (VCFforGT[m].equals(genotype[0])) {                                            countcommon[l][m] += 1;                                        }                                        if (VCFforGT[m].equals(genotype[1])) {                                            countcommon[l][m] += 2;                                        }                                    }                                }                            }                        }                    }                    DecimalFormat df = new DecimalFormat("0.00000");                    for (int p = 0; p < geneNames.length; p++) {                        StringBuilder sb = new StringBuilder();                        StringBuilder sb1 = new StringBuilder();                        StringBuilder sb2 = new StringBuilder();                        sb.append(geneNames[p] + "\t");                        sb1.append(geneNames[p] + "\t");                        sb2.append(geneNames[p] + "\t");                        for (int q = 0; q < samplesize; q++) {                            if (countcommon[p][q] != 0) {                                double het = (double) countrare[p][q] / countcommon[p][q];                                double h1 = new BigDecimal(het).setScale(5, BigDecimal.ROUND_HALF_UP).doubleValue();                                sb.append(df.format(h1) + "\t");                                sb1.append(countrare[p][q] + "\t");                                sb2.append(countcommon[p][q] + "\t");                            } else {                                sb.append("NA\t");                                sb1.append(countrare[p][q] + "\t");                                sb2.append(countcommon[p][q] + "\t");                            }                        }                        bwS.write(sb.toString());                        bwS.newLine();                        bwS1.write(sb1.toString());                        bwS1.newLine();                        bwS2.write(sb2.toString());                        bwS2.newLine();                    }                    brVCF.close();                    bwS.flush();                    bwS.close();                    bwS1.flush();                    bwS1.close();                    bwS2.flush();                    bwS2.close();                } catch (Exception e) {                    e.printStackTrace();                }            }        });    }    public void distancepvalue() {        String infor = "/data1/home/xiaohan/rareallele/SiPASpipeline/reference/wheat_v1.1_Lulab.gff3";        GeneFeature gf = new GeneFeature(infor);        String[] names = {"less", "more"};        for (int i = 0; i < names.length; i++) {            for (int j = 0; j < 17; j++) {                int chrnumber = j + 1;                String infile = "/data1/home/xiaohan/rareallele/testforutest/summary/" + names[i] + "sum" + j + ".txt";                String outfile = "/data1/home/xiaohan/rareallele/testforutest/summarynew/" + names[i] + "sum" + j + "new.txt";                BufferedReader br = IOUtils.getTextReader(infile);                BufferedWriter bw = IOUtils.getTextWriter(outfile);//        HashMap<String,Integer> genestrand = new HashMap<>();//        for (int i = 0; i < gf.genes.length; i++) {//            String geneName = gf.genes[i].geneName;//            int strand = gf.genes[i].strand;//            genestrand.put(geneName,strand);//        }                String temp = null;                String[] temps = null;                try {                    StringBuilder sbtemp = new StringBuilder();                    sbtemp.append("CHR\tStart\tEnd\tGene\tSite\tpvalue\tdistance\tstate");                    bw.write(sbtemp.toString());                    bw.newLine();                    while ((temp = br.readLine()) != null) {                        temps = temp.split("\t");                        String geneName = temps[3];                        String state = null;                        int distance = 0;                        if (gf.genes[gf.getGeneIndex(geneName)].strand == 1) {                            distance = Integer.parseInt(temps[4]) - Integer.parseInt(temps[1]);                            if (distance > 0) {                                state = "upstream";                            } else {                                state = "downstream";                            }                        } else {                            distance = Integer.parseInt(temps[2]) - Integer.parseInt(temps[4]);                            if (distance > 0) {                                state = "upstream";                            } else {                                state = "downstream";                            }                        }                        if (Integer.parseInt(temps[1]) < Integer.parseInt(temps[4]) && Integer.parseInt(temps[2]) > Integer.parseInt(temps[4])) {                            state = "intergenic";                        }                        StringBuilder sb = new StringBuilder();                        sb.append(temp).append("\t").append(distance).append("\t").append(state);                        bw.write(sb.toString());                        bw.newLine();                    }                    br.close();                    bw.flush();                    bw.close();                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }    public void writeposition() {        for (int m = 0; m < 42; m++) {            int chrNumber = m + 1;            String infile = "/data2/xiaohan/VCF_information/frq/chr" + chrNumber + ".frq";            HashMap<String, String> baseMap = xiaohan.utils.MinorAlleleFrequency.getMajorBase(infile);            System.out.println("Compeleting HashMap building…………………………………………………………");            String vcf = "/data2/xiaohan/genotype_root/genotype_rootMaf005/87B18.chr" + chrNumber + ".maf005.vcf.gz";            String out = "/data1/home/xiaohan/rareallele/variantsInfo/";            BufferedReader br = IOUtils.getTextGzipReader(vcf);            String temp = null;            String[] temps = null;//            BufferedWriter[] bw = new BufferedWriter[17];//            BufferedWriter[] bw1 = new BufferedWriter[17];//            for (int i = 0; i < 17; i++) {//                int number = i + 1;//                bw[i] = IOUtils.getTextWriter(new File(out, "chr"+chrNumber + "_variants_" + number + ".txt").getAbsolutePath());//                bw1[i] = IOUtils.getTextWriter(new File(out, "chr"+chrNumber + "_nonvariants_" + number + ".txt").getAbsolutePath());//            }            BufferedWriter bw = IOUtils.getTextWriter(new File(out, "chr" + chrNumber + "_nonvariants.txt").getAbsolutePath());            BufferedWriter bw1 = IOUtils.getTextWriter(new File(out, "chr" + chrNumber + "_variants.txt").getAbsolutePath());//            }            try {                int countline = 0;                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("#")) continue;                    countline++;                    if (countline % 50000 == 0) {                        System.out.println(countline);                    }                    temps = temp.split("\t");                    String snpsite = temps[0] + "_" + temps[1];                    String base = baseMap.get(snpsite);                    int minor = 0;                    int major = 1;                    if (base.equals(temps[3])) {                        minor = 1;                        major = 0;                    }                    if (base.equals(temps[4])) {                        minor = 0;                        major = 1;                    }//                System.out.println(temp);                    HashSet<String> variantSet = new HashSet<>();                    HashSet<String> nonvariantSet = new HashSet<>();                    int countnumber = 0;                    int countnumbernon = 0;                    for (int i = 9; i < temps.length; i++) {                        int index = i - 8;                        if (major == 1) {                            if (temps[i].split(":")[0].equals(major + "/" + major)) {                                countnumbernon++;                                nonvariantSet.add(String.valueOf(index));                            } else if (temps[i].split(":")[0].equals(minor + "/" + major) || temps[i].split(":")[0].equals(minor + "/" + minor)) {                                countnumber++;                                variantSet.add(String.valueOf(index));                            }                        }                        if (major == 0) {                            if (temps[i].split(":")[0].equals(major + "/" + major)) {                                countnumbernon++;                                nonvariantSet.add(String.valueOf(index));                            } else if (temps[i].split(":")[0].equals(major + "/" + minor) || temps[i].split(":")[0].equals(minor + "/" + minor)) {                                countnumber++;                                variantSet.add(String.valueOf(index));                            }                        }                    }//                    countnumber = 87 - countnumbernon;//                    if (countnumber <= 17) {                    if (countnumber == 0) continue;                    String site = temps[1];                    StringBuilder sb = new StringBuilder();                    StringBuilder sb1 = new StringBuilder();                    sb.append(site).append("\t");                    sb1.append(site).append("\t");                    String[] varaintsindex = variantSet.toArray(new String[variantSet.size()]);                    sb.append(varaintsindex.length).append("\t");                    for (int i = 0; i < varaintsindex.length; i++) {                        sb1.append(varaintsindex[i]).append("\t");                    }                    String[] nonvaraintsindex = nonvariantSet.toArray(new String[nonvariantSet.size()]);                    sb1.append(varaintsindex.length).append("\t");                    for (int i = 0; i < nonvaraintsindex.length; i++) {                        sb.append(nonvaraintsindex[i]).append("\t");                    }//                    bw[countnumber - 1].write(sb.toString());//                    bw1[countnumber - 1].write(sb1.toString());//                    bw[countnumber - 1].newLine();//                    bw1[countnumber - 1].newLine();                    bw.write(sb.toString());                    bw1.write(sb1.toString());                    bw.newLine();                    bw1.newLine();//                    } else if (countnumber > 17) {//                        countnumber = 87 - countnumber;//                        if (countnumber == 0 || countnumber > 17) continue;//                        String[] varaintsindex = nonvariantSet.toArray(new String[nonvariantSet.size()]);//                        String site = temps[1];//                        StringBuilder sb = new StringBuilder();//                        StringBuilder sb1 = new StringBuilder();//                        sb.append(site).append("\t");//                        for (int i = 0; i < varaintsindex.length; i++) {//                            sb.append(varaintsindex[i]).append("\t");//                        }//                        String[] nonvaraintsindex = variantSet.toArray(new String[variantSet.size()]);//                        sb1.append(site).append("\t");//                        for (int i = 0; i < nonvaraintsindex.length; i++) {//                            sb1.append(nonvaraintsindex[i]).append("\t");//                        }//                        bw[countnumber - 1].write(sb.toString());//                        bw1[countnumber - 1].write(sb1.toString());//                        bw[countnumber - 1].newLine();//                        bw1[countnumber - 1].newLine();//                    }                }                br.close();                bw.flush();                bw.close();                bw1.flush();                bw1.close();//                for (int i = 0; i < 17; i++) {//                    bw[i].flush();//                    bw[i].close();//                    bw1[i].flush();//                    bw1[i].close();//                }            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void writePositioninBins() {        String annotationfile = "/data1/home/xiaohan/rareallele/SiPASpipeline/reference/wheat_v1.1_Lulab.gff3";        String infileDir = "/data1/home/xiaohan/rareallele/variantsInfo";        String outfileDir = "/data1/home/xiaohan/rareallele/variantsInfo/binsVariantsIndex";        String[] FileNames = {"0_1"};        for (int fn = 0; fn < FileNames.length; fn++) {            int DiscontrolS = Integer.parseInt(FileNames[fn].split("_")[0]) * 100;            int DiscontrolE = Integer.parseInt(FileNames[fn].split("_")[1]) * 100;            GeneFeature gf = new GeneFeature(annotationfile);            HashSet<String> nameSet = new HashSet<>();            for (int i = 0; i < 42; i++) {                String chr = String.valueOf(i + 1);                if (chr.equals("36")) {                    nameSet.add(chr);                }            }            nameSet.parallelStream().forEach(f -> {                int chrNumber = Integer.parseInt(f);                HashSet<String> geneName = new HashSet<>();                for (int i = 0; i < gf.genes.length; i++) {                    String name = gf.genes[i].geneName;                    int chr = gf.genes[i].geneRange.chr;                    if (chr == chrNumber) {                        geneName.add(name);                    }                }                String[] geneNames = geneName.toArray(new String[geneName.size()]);                Arrays.sort(geneNames);                HashMap<String, ArrayList<String>> geneIndexMap = new HashMap<>();                ArrayList<String> nalist = new ArrayList<>();                for (int i = 0; i < geneNames.length; i++) {                    geneIndexMap.put(geneNames[i], nalist);                }                BufferedReader br = IOUtils.getTextReader(new File(infileDir, "chr" + f + "_nonvariants.txt").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outfileDir, "chr" + f + "_variantsbins.txt").getAbsolutePath());                String temp = null;                String[] temps = null;                List<String> tList = new ArrayList();                try {                    while ((temp = br.readLine()) != null) {                        tList = PStringUtils.fastSplit(temp);                        temps = tList.toArray(new String[tList.size()]);                        int site = Integer.parseInt(temps[0]);                        for (int l = 0; l < geneNames.length; l++) {                            String gene = geneNames[l];                            int strand = gf.getGeneStrand(gf.getGeneIndex(geneNames[l]));                            int startsite = gf.getGeneStart(gf.getGeneIndex(geneNames[l]));                            int endsite = gf.getGeneEnd(gf.getGeneIndex(geneNames[l]));                            int distance = Integer.MAX_VALUE;                            if (strand == 1) {                                distance = startsite - site;                            } else {                                distance = site - endsite;                            }                            if (distance >= DiscontrolS && distance < DiscontrolE) {                                ArrayList<String> newlist = geneIndexMap.get(gene);                                for (int i = 2; i < temps.length; i++) {                                    if (!newlist.contains(temps[i])) {                                        newlist.add(temps[i]);                                    }                                }                                geneIndexMap.put(gene, newlist);                            }                        }                    }                    br.close();                    for (int i = 0; i < geneNames.length; i++) {                        ArrayList<String> newlist = geneIndexMap.get(geneNames[i]);                        String[] output = new String[newlist.size()];                        newlist.toArray(output);                        StringBuilder sb = new StringBuilder();                        sb.append(geneNames[i]).append("\t");                        for (int j = 0; j < output.length; j++) {                            sb.append(output[j]).append("\t");                        }                        bw.write(sb.toString());                        bw.newLine();                    }                    bw.flush();                    bw.close();                } catch (Exception e) {                    e.printStackTrace();                }            });        }    }    public void eQTL() {        String input = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/eQTL/5.all.permutations.storey.txt";        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/Conservation/all.txt";        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/eQTL/eGene_eQTLNumber.txt";        String outfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/eQTL/outfile.txt";        String info = null;        String[] infos = null;        BufferedReader brin = IOUtils.getTextReader(input);        BufferedReader br = IOUtils.getTextReader(infile);        BufferedReader brinfo = IOUtils.getTextReader(infor);        BufferedWriter bw = IOUtils.getTextWriter(outfile);        String temp = null;        String[] temps = null;        String in = null;        String[] inputs = null;        try {            HashMap<String, String> countMap = new HashMap<>();            while ((info = brinfo.readLine()) != null) {                infos = info.split("\t");                if (info.startsWith("gene")) continue;                countMap.put(infos[0], infos[1]);            }            HashSet<String> geneSet = new HashSet<>();            while ((in = brin.readLine()) != null) {                if (in.startsWith("Gene")) continue;                geneSet.add(in.split(" ")[0]);            }            while ((temp = br.readLine()) != null) {                if (temp.startsWith("eGene")) {                    bw.write(temp + "\tcount\tGroup");                    bw.newLine();                    continue;                }                temps = temp.split("\t");                StringBuilder sb = new StringBuilder();                if (geneSet.contains(temps[0])) {                    sb.append(temp).append("\t").append(countMap.get(temps[0])).append("\t").append("yes");                }                if (!geneSet.contains(temps[0])) {                    sb.append(temp).append("\t").append(countMap.get(temps[0])).append("\t").append("no");                }                bw.write(sb.toString());                bw.newLine();            }            br.close();            brin.close();            brinfo.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    private void geneticLoad() {        String infile = "/Users/yxh/Documents/important/Lulab/Genetic Load/001_geneSummary_hexaploid.txt";        String outfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/GeneticLoad/GL.txt";        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/Conservation/all.txt";        String temp = null;        String[] temps = null;        String info = null;        String[] infos = null;        BufferedReader br = IOUtils.getTextReader(infile);        BufferedReader brinfo = IOUtils.getTextReader(infor);        BufferedWriter bw = IOUtils.getTextWriter(outfile);        try {            HashMap<String, String> countMap = new HashMap<>();            while ((info = brinfo.readLine()) != null) {                infos = info.split("\t");                if (info.startsWith("gene")) continue;                countMap.put(infos[0], infos[1]);            }            while ((temp = br.readLine()) != null) {                if (temp.startsWith("Transcript")) {                    bw.write("gene\tNumberOfSyn\tNonVsSynRatio\tNumberOfHGDeleterious");                    bw.newLine();                    continue;                }                temps = temp.split("\t");                StringBuilder sb = new StringBuilder();                sb.append(temps[0].split("\\.")[0]).append("\t");                sb.append(temps[5]).append("\t");                sb.append(temps[9]).append("\t");                sb.append(temps[12]).append("\t");                sb.append(countMap.get(temps[0].split("\\.")[0]));                bw.write(sb.toString());                bw.newLine();            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void conservationCount() {        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/Conservation/all.txt";        String outfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/Conservation/classification.txt";        String temp = null;        String[] temps = null;        BufferedReader br = IOUtils.getTextReader(infile);        BufferedWriter bw = IOUtils.getTextWriter(outfile);        try {            Double Gerp = 0.0;            String Group = null;            while ((temp = br.readLine()) != null) {                if (temp.startsWith("gene")) {                    bw.write(temp + "\t");                    bw.write("Group");                    bw.newLine();                    continue;                }                temps = temp.split("\t");                Gerp = Double.parseDouble(temps[2]);                if (Gerp >= 2) {                    Group = "Top1";                }                if (Gerp >= 1.8 && Gerp < 2) {                    Group = "Top2";                }                if (Gerp >= 1.6 && Gerp < 1.8) {                    Group = "Top3";                }                if (Gerp >= 1.4 && Gerp < 1.6) {                    Group = "Top4";                }                if (Gerp >= 1.2 && Gerp < 1.4) {                    Group = "Top5";                }                if (Gerp >= 1.0 && Gerp < 1.2) {                    Group = "Top6";                }                if (Gerp >= 0.8 && Gerp < 1.0) {                    Group = "Top7";                }                if (Gerp >= 0.6 && Gerp < 0.8) {                    Group = "Top8";                }                if (Gerp >= 0.4 && Gerp < 0.6) {                    Group = "Top9";                }                if (Gerp >= 0.2 && Gerp < 0.4) {                    Group = "Top10";                } else if (Gerp >= 0 && Gerp < 0.2) {                    Group = "Top11";                }                bw.write(temp + "\t");                bw.write(Group);                bw.newLine();            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void TransposonTransformation() {        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/Transposon/input";        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/Transposon/Snptotal.txt";        String lengthDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/Transposon/length";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/downstreamAnalysis/Transposon/output";        String temp = null;        String[] temps = null;        BufferedReader br = IOUtils.getTextReader(infor);        try {            String chr = null;            String rate = null;            HashMap<String, String> chrrate = new HashMap<>();            HashSet<String> chrSet = new HashSet<>();            while ((temp = br.readLine()) != null) {                if (temp.startsWith("#")) continue;                temps = temp.split("\t");                chr = temps[0];                rate = temps[1];                chrrate.put(chr, rate);                chrSet.add(chr);            }            br.close();            String[] chrleng = {"1A", "1B", "1D", "2A", "2B", "2D", "3A", "3B", "3D", "4A", "4B", "4D", "5A", "5B", "5D", "6A", "6B", "6D", "7A", "7B", "7D"};            int[] max = {202864, 237025, 179410, 270823, 276239, 236198, 255880, 288495, 224247, 257102, 241328, 186496, 242275, 254182, 204980, 210532, 246742, 172814, 252994, 259113, 231252};            HashMap<String, Integer> maxlength = new HashMap<>();            for (int i = 0; i < chrleng.length; i++) {                maxlength.put(chrleng[i], max[i]);            }            String[] chrs = chrSet.toArray(new String[chrSet.size()]);            for (int i = 0; i < chrs.length; i++) {                String chrABD = chrs[i];                BufferedReader brlenght = IOUtils.getTextReader(new File(lengthDir, chrABD + ".txt").getAbsolutePath());                int[] lengths = new int[maxlength.get(chrABD)];                String len = null;                int number = 0;                while ((len = brlenght.readLine()) != null) {                    lengths[number] = Integer.parseInt(len);                    number++;                }                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, chrABD + ".txt").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, chrABD + "_Enrichment.txt").getAbsolutePath());                String temp1 = null;                String[] temps1 = null;                String rate1 = chrrate.get(chrABD);                bw.write("totalupstream\ttotalwithin\ttotaldownstream\tupstream\twithin\tdownstream\taverage\tupenrich\twithinenrich\tdownenrich\t");                bw.newLine();                int countline = 0;                while ((temp1 = br1.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (temps1[3].equals("0")) continue;                    StringBuilder sb = new StringBuilder();                    if (lengths[countline] == 0) {                        countline++;                        continue;                    }                    sb.append(temps1[0]).append("\t").append(temps1[1]).append("\t").append(temps1[2]).append("\t");                    double upstream = (double) (Integer.parseInt(temps1[0])) / 1000;                    double within = (double) (Integer.parseInt(temps1[1])) / lengths[countline];                    double downstream = (double) (Integer.parseInt(temps1[2])) / 1000;                    double up = (double) upstream / Double.parseDouble(rate1);                    double in = (double) within / Double.parseDouble(rate1);                    double down = (double) downstream / Double.parseDouble(rate1);                    sb.append(upstream).append("\t").append(within).append("\t").append(downstream).append("\t");                    sb.append(up).append("\t").append(in).append("\t").append(down).append("\t");                    countline++;                    /////////////////////                    if(Integer.parseInt(temps1[0]) == 0){//                        sb.append("0" + "\t");//                    }else {//                        sb.append(Math.log(((Integer.parseInt(temps1[0])) / (1000 * Double.parseDouble(rate))) + 1)/Math.log(2) + "\t");//                    }//                    if(Integer.parseInt(temps1[1]) == 0){//                        sb.append("0" + "\t");//                    }else {//                        sb.append(Math.log(((Integer.parseInt(temps1[1])) / (Integer.parseInt(temps1[3]) * Double.parseDouble(rate))) + 1)/Math.log(2) + "\t");//                    }//                    if(Integer.parseInt(temps1[2]) == 0){//                        sb.append("0" + "\t");//                    }else {//                        sb.append(Math.log(((Integer.parseInt(temps1[2])) / (1000 * Double.parseDouble(rate))) + 1)/Math.log(2) + "\t");//                    }//                    bw.write(sb.toString());                    bw.newLine();                }                br1.close();                bw.flush();                bw.close();            }        } catch (Exception e) {            e.printStackTrace();        }    }    public void getTransposonEnrichment() {//        String infileDir = "/data2/xiaohan/genotype_root/genotype_rootMaf005";        String gff3 = "/data2/xiaohan/Transposon/chr";        String outputdir = "/data2/xiaohan/Transposon/enrichment";//        File[] fs = new File(infileDir).listFiles();//        fs = IOUtils.listFilesEndsWith(fs, ".gz");        HashSet<String> nameSet = new HashSet();//        for (int i = 0; i < fs.length; i++) {//            if (fs[i].isHidden()) continue;//            String Name = fs[i].getName().split("\\.")[1].split("chr")[1];////            if ( 41 <= Integer.parseInt(Name) && Integer.parseInt(Name) <= 41) {//                nameSet.add(Name);//                System.out.println(Name);////            }//        }//        String[] max = {"161314", "41550", "149688", "87337", "163527", "15883", "163284", "107539", "157986", "118253", "167585", "68613", "155416", "100464", "156750", "131745", "174312", "49935", "154526", "102576", "160736", "80592", "165370", "21126", "154742", "87533", "162763", "91419", "164112", "40868", "154323", "56209", "154150", "92592", "164392", "8422", "154761", "98233", "154984", "104129", "164596", "66656"};//        HashMap<Integer, Integer> countMap = new HashMap<>();//        for (int i = 0; i < 42; i++) {//            int chr = i + 1;//            countMap.put(chr, Integer.parseInt(max[i]));//        }        for (int i = 0; i < 42; i++) {            String chr = String.valueOf(i);            nameSet.add(chr);        }        nameSet.stream().forEach(f -> {            try {                String temp = null;                String[] temps = null;                String temp1 = null;                String[] temps1 = null;//                BufferedReader br = IOUtils.getTextGzipReader(new File(infileDir, "87B18.chr" + f + ".maf005.vcf.gz").getAbsolutePath());                BufferedReader br1 = IOUtils.getTextReader(new File(gff3, "chr" + f + "_Transposon.gff3").getAbsolutePath());//                int number = countMap.get(Integer.parseInt(String.valueOf(f)));//                int[][] startend = new int[number][2];//                int[][] snpcount = new int[number][3];//                double[][] snpenrichmet = new double[number][3];//                for (int i = 0; i < number; i++) {//                    for (int j = 0; j < 3; j++) {//                        snpcount[i][j] = 0;//                    }//                    for (int j = 0; j < 4; j++) {//                        startend[i][j] = 0;//                    }//                    for (int j = 0; j < 3; j++) {//                        snpenrichmet[i][j] = 0.0;//                    }//                }                int countline = 0;                BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputdir, "chr" + f + "_length.txt").getAbsolutePath());                while ((temp1 = br1.readLine()) != null) {                    if (temp1.startsWith("#")) continue;                    temps1 = temp1.split("\t");//                    if(temps1[6].equals("+")) {//                    startend[countline][0] = Integer.parseInt(temps1[3]);//                    startend[countline][1] = Integer.parseInt(temps1[4]);//                    startend[countline][0] = Integer.parseInt(temps1[3]) - 1000;//                    startend[countline][3] = Integer.parseInt(temps1[4]) + 1000;                    countline++;                    if (countline % 5000 == 0) {                        System.out.println("Reading " + countline);                    }//                    }//                    if(temps1[6].equals("-")) {//                        startend[countline][1] = Integer.parseInt(temps1[4]);//                        startend[countline][2] = Integer.parseInt(temps1[3]);//                        startend[countline][0] = Integer.parseInt(temps1[4]) + 1000;//                        startend[countline][3] = Integer.parseInt(temps1[3]) - 1000;//                        countline++;//                        if(countline % 5000 == 0){//                            System.out.println(countline);//                        }//                    }//                }//                while ((temp = br.readLine()) != null) {//                    if (temp.startsWith("#")) continue;//                    temps = temp.split("\t");//                    int pos = Integer.parseInt(temps[1]);//                    for (int i = 0; i < number; i++) {//                        if (pos > startend[i][3]) continue;////                        if( startend[i][1] > startend[i][2] && pos > startend[i][2] )continue;//                        if (pos >= startend[i][0] && pos <= startend[i][1]) {//                            snpcount[i][0]++;//                        }//                        if (pos >= startend[i][1] && pos <= startend[i][2]) {//                            snpcount[i][1]++;//                        }//                        if (pos >= startend[i][2] && pos <= startend[i][3]) {//                            snpcount[i][2]++;//                        }//                        if (i % 5000 == 0) {//                            System.out.println("Calculating " + i);//                        }//                    }//                }//                BufferedWriter bw = IOUtils.getTextWriter(new File(outputdir, "chr" + f + "_enrichment.txt").getAbsolutePath());//                BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputdir, "chr" + f + "_count.txt").getAbsolutePath());                    int ll = Integer.parseInt(temps1[4]) - Integer.parseInt(temps1[3]);                    bw1.write(String.valueOf(ll));                    bw1.newLine();//                for (int i = 0; i < number; i++) {//                    int length = startend[i][2] - startend[i][1];//                    bw1.write(snpcount[i][0] + "\t" + snpcount[i][1] + "\t" + snpcount[i][2] + "\t" + length);//                    bw1.newLine();//                    if (i % 5000 == 0) {//                        System.out.println("Writing " + i);//                    }//                }//                DecimalFormat decfor = new DecimalFormat("0.000");//                for (int i = 0; i < number; i++) {//                    int length = startend[i][2] - startend[i][1];//////                    if((startend[i][2] - startend[i][1]) > 0) {//                    bw.write(snpcount[i][0] / 1000 + "\t" + snpcount[i][1] / length + "\t" + snpcount[i][2] / 1000);////                    bw.write(decfor.format(snpcount[i][0] / 1000) + "\t" + decfor.format(snpcount[i][1] / length) + "\t" + decfor.format(snpcount[i][2] / 1000));//                    bw.newLine();//////                    }//////                    if((startend[i][2] - startend[i][1]) < 0) {//////                        bw.write(decfor.format(snpcount[i][0] / 1000) + "\t" + decfor.format(snpcount[i][1] / (startend[i][1] - startend[i][2])) + "\t" + decfor.format(snpcount[i][2] / 1000));//////                        bw.newLine();//////                    }                }//                br.close();                br1.close();//                bw.flush();//                bw.close();                bw1.flush();                bw1.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void temp() {        for (int i = 0; i < 12; i++) {            int species = i + 1;            System.out.println("nohup java -jar SiPAS-Profiler.jar SiPAS" + species + "M.txt > log" + species + "M.txt &");        }        for (int i = 0; i < 12; i++) {            int species = i + 1;            System.out.println("nohup java -jar SiPAS-Profiler.jar SiPASR" + species + "M.txt > log" + species + "M.txt &");        }        for (int i = 0; i < 12; i++) {            int species = i + 1;            System.out.println("nohup java -jar SiPAS-Profiler.jar SiPASU" + species + "M.txt > log" + species + "M.txt &");        }        for (int i = 0; i < 12; i++) {            int species = i + 1;            System.out.println("nohup java -jar SiPAS-Profiler.jar SiPASUR" + species + "M.txt > log" + species + "M.txt &");        }        for (int i = 0; i < 12; i++) {            int species = i + 1;            System.out.println("nohup java -jar SiPAS-Profiler.jar Truseq" + species + "M.txt > log" + species + "M.txt &");        }    }    public void getsubfrq() {        String infileDir = "/data2/xiaohan/VCF_information/frq";        String outfileDir = "/data2/xiaohan/VCF_information/frqMaf005";        File[] fs = new File(infileDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "frq");        HashSet nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            String name = fs[i].getName();            nameSet.add(name);        }        nameSet.stream().forEach(f -> {            BufferedReader br = IOUtils.getTextReader(new File(infileDir, String.valueOf(f)).getAbsolutePath());            BufferedWriter bw = IOUtils.getTextWriter(new File(outfileDir, String.valueOf(f)).getAbsolutePath());            String temp = null;            String[] temps = null;            try {                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("CHR")) {                        bw.write(temp);                        bw.newLine();                        continue;                    }                    temps = temp.split("\t");                    double maf = Double.parseDouble(temps[temps.length - 1].split(":")[1]);                    if (maf <= 0.05) {                        bw.write(temp);                        bw.newLine();                    }                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void getUpstreamVCF() {        String infileDir = "";        String outputDir = "";    }    public void geteGeneName() {        String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";        String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/rareeGene.txt";//        String infile = "/data2/junxu/5.all.permutations.storey.txt.gz";//        String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/commoneGene.txt";        String temp = null;        String[] temps = null;//        for (int m = 0; m < infiles.length; m++) {        BufferedReader br = IOUtils.getTextReader(infile);        BufferedWriter bw = IOUtils.getTextWriter(outfile);        HashSet<String> eGeneSet = new HashSet();        try {            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                String eGene = temps[0];                eGeneSet.add(eGene);            }            String[] eGeneArray = eGeneSet.toArray(new String[eGeneSet.size()]);            for (int i = 0; i < eGeneArray.length; i++) {//                    System.out.println(eGeneArray[i]);                bw.write(eGeneArray[i]);                bw.newLine();            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getsharedeGene() {        String infile = "/data2/xiaohan/all.maf005.nomianls.txt.gz";        String outfile = "/data2/xiaohan/eQTL/eGene_eQTLNumber.txt";        HashSet<String> eGeneSet = new HashSet();        HashMap<String, Integer> eGeneMap = new HashMap();        String temp = null;        String[] temps = null;        BufferedReader br = IOUtils.getTextGzipReader(infile);        BufferedReader br1 = IOUtils.getTextGzipReader(infile);        BufferedWriter bw = IOUtils.getTextWriter(outfile);        try {            int countline = 0;            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                String eGene = temps[0];                eGeneSet.add(eGene);                countline++;                if (countline % 10000000 == 0) {                    System.out.println("Reading " + countline);                }            }            String[] eGeneArray = eGeneSet.toArray(new String[eGeneSet.size()]);            for (int i = 0; i < eGeneArray.length; i++) {                eGeneMap.put(eGeneArray[i], 0);            }            int count = 0;            while ((temp = br1.readLine()) != null) {                temps = temp.split("\t");                String eGene = temps[0];                eGeneMap.put(eGene, eGeneMap.get(eGene) + 1);                if (count % 10000000 == 0) {                    System.out.println("calculating " + count);                }            }            bw.write("eGene\teQTLNumber");            bw.newLine();            for (int i = 0; i < eGeneArray.length; i++) {                bw.write(eGeneArray[i] + "\t" + eGeneMap.get(eGeneArray[i]));                bw.newLine();                if (i % 10000000 == 0) {                    System.out.println("Writint " + i);                }            }            br.close();            br1.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getsharedeQTL() {        String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";        String outfile = "/data2/xiaohan/eQTL/eQTL_eGeneNumber.txt";        HashSet<String> eQTLSet = new HashSet();        HashMap<String, Integer> eQTLMap = new HashMap();        String temp = null;        String[] temps = null;        BufferedReader br = IOUtils.getTextReader(infile);        BufferedReader br1 = IOUtils.getTextReader(infile);        BufferedWriter bw = IOUtils.getTextWriter(outfile);        try {            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                String eQTL = temps[1];                eQTLSet.add(eQTL);            }            String[] eQTLArray = eQTLSet.toArray(new String[eQTLSet.size()]);            for (int i = 0; i < eQTLArray.length; i++) {                eQTLMap.put(eQTLArray[i], 0);            }            while ((temp = br1.readLine()) != null) {                temps = temp.split("\t");                String eQTL = temps[1];                eQTLMap.put(eQTL, eQTLMap.get(eQTL) + 1);            }            bw.write("eQTL\teGeneNumber");            bw.newLine();            for (int i = 0; i < eQTLArray.length; i++) {                bw.write(eQTLArray[i] + "\t" + eQTLMap.get(eQTLArray[i]));                bw.newLine();            }            br.close();            br1.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void geteGeneNumber() {        String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/per5/cov5.permutations.all.chunks.storey.txt";        String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/subgenome.txt";        try {            String temp = null;            String[] temps = null;            BufferedReader br = IOUtils.getTextReader(infile);            BufferedWriter bw = IOUtils.getTextWriter(outfile);            int A = 0;            int B = 0;            int D = 0;            while ((temp = br.readLine()) != null) {                if (!temp.startsWith("T")) {                    continue;                }                temps = temp.split("\t");                String subgenome = temps[0].substring(8, 9);                if (subgenome.equals("A")) {                    A++;                }                if (subgenome.equals("B")) {                    B++;                }                if (subgenome.equals("D")) {                    D++;                }            }            bw.write("A\t" + A);            bw.newLine();            bw.write("B\t" + B);            bw.newLine();            bw.write("D\t" + D);            bw.newLine();            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void geteGene() {//        String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/per5/cov5.permutations.all.chunks.storey.txt";//        String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/per5/chr_eGene.txt";        String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";        String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/chr_eQTL.txt";        BufferedReader br = IOUtils.getTextReader(infile);        BufferedWriter bw = IOUtils.getTextWriter(outfile);        String temp = null;        String[] temps = null;        int[][] chr_Number = new int[42][2];        for (int i = 0; i < 42; i++) {            int chrNumber = i + 1;            chr_Number[i][0] = chrNumber;            chr_Number[i][1] = 0;        }        try {            while ((temp = br.readLine()) != null) {                if (temp.startsWith("gene")) {                    continue;                }                temps = temp.split("\t");                String pos = temps[1];                String chr = pos.split("_")[0];                int chrNumber = Integer.parseInt(chr) - 1;                chr_Number[chrNumber][1]++;            }            bw.write("chr\tnumber");            bw.newLine();            for (int i = 0; i < 42; i++) {                bw.write(chr_Number[i][0] + "\t" + chr_Number[i][1]);                bw.newLine();            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getConstrainteQTLfile() {        String infile = "";        BufferedReader br = IOUtils.getTextReader(infile);        String temp = null;        String[] temps = null;        HashMap<String, String> chrposMap = new HashMap<>();        try {            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                String pos = temps[1];            }        } catch (Exception e) {            e.printStackTrace();        }    }    public void getConstriantEffect() throws IOException {        String infoDir = "/data2/xiaohan/GerpOrigin/chr";        String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";        String outDir = "/data1/home/xiaohan/rareallele/constraintMap/";        File[] fs = new File(infoDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "gz");        HashSet nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            String name = fs[i].getName().split("\\.")[0].split("r")[1];//            if(name.equals("36")){            nameSet.add(name);            System.out.println(name);//            }        }        nameSet.stream().forEach(f -> {            HashSet<String> posSet = new HashSet();            HashMap<String, Double> PosGerpMap = new HashMap<>();            int countline1 = 0;            try {                BufferedReader br = IOUtils.getTextGzipReader(new File(infoDir, "chr" + f + ".bed.gz").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outDir, "chr" + f + "ConstriantEffect.txt").getAbsolutePath());                bw.write("species" + "\t" + "chr" + "\t" + "pos" + "\t" + "Gerp" + "\t" + "Effect");                bw.newLine();                String temp = null;                String[] temps = null;                while ((temp = br.readLine()) != null) {                    countline1++;                    if (countline1 % 500000 == 0) {                        System.out.println("This is reading bed file chr" + f + " " + countline1);                    }                    if (temp.startsWith("CHROM")) {                        continue;                    }                    temps = temp.split("\t");                    String pos = temps[0] + "_" + temps[2];                    double gerp = Double.parseDouble(temps[4]);                    posSet.add(pos);                    PosGerpMap.put(pos, gerp);                }                BufferedReader br1 = IOUtils.getTextReader(infile);                String temp1 = null;                String[] temps1 = null;                while ((temp1 = br1.readLine()) != null) {                    temps1 = temp1.split("\t");                    String pos = temps1[1];                    if (posSet.contains(pos)) {                        String chr = pos.split("_")[0];                        int chrNumber = Integer.parseInt(chr);                        String species = null;                        if (chrNumber % 6 == 1 || chrNumber % 6 == 2) {                            species = "A";                        }                        if (chrNumber % 6 == 3 || chrNumber % 6 == 4) {                            species = "B";                        }                        if (chrNumber % 6 == 5 || chrNumber % 6 == 0) {                            species = "D";                        }                        bw.write(species + "\t" + chr + "\t" + pos + "\t" + PosGerpMap.get(pos) + "\t" + temps1[7]);                        bw.newLine();                    } else {                        continue;                    }                }                br.close();                br1.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void geteGeneVariants() {    }    public void getGeneConstraintMap() {        String infileDir = "/data2/xiaohan/GerpOrigin/chr";        String outfileDir = "/data2/xiaohan/VCF_information/geneUpconstraint/100k";        String annotationfile = "/data1/home/xiaohan/rareallele/SiPASpipeline/reference/wheat_v1.1_Lulab.gff3";        DecimalFormat df = new DecimalFormat("0.000000");        File[] fs = new File(infileDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "gz");        HashSet nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            String name = fs[i].getName().split("\\.")[0].split("r")[1];//            if(Integer.parseInt(name) == 36){            nameSet.add(name);            System.out.println(name);//            }//            continue;        }        String max = "77978608,28841156,71240251,45624633,101656590,13498321,77036701,61243346,78743121,62678326,101083623,47008648,72458858,58856214,73194704,68411442,105435603,35872744,65389579,62492180,68791060,37920812,92793943,15968849,75344375,54325058,78026679,53475387,101074694,31999816,71641226,33479703,80526120,53500305,97597307,8117377,99427943,66524995,84191767,60332067,101510240,44519138";        String[] maxs = max.split(",");//        int max = 28000000;        nameSet.stream().forEach(f -> {            int chrNumber = Integer.parseInt(String.valueOf(f));            BufferedReader br = IOUtils.getTextGzipReader(new File(infileDir, "chr" + f + ".bed.gz").getAbsolutePath());            BufferedWriter bw = IOUtils.getTextWriter(new File(outfileDir, "chr" + f + ".txt").getAbsolutePath());            try {                String temp = null;                String[] temps = null;//                System.out.println(maxs[chrNumber-1]);//                System.out.println(Integer.parseInt(maxs[chrNumber-1]));                HashMap<String, Double> GerpScoreMap = new HashMap<>(Integer.parseInt(maxs[chrNumber - 1]));                HashSet<String> GerpScoreSet = new HashSet<>(Integer.parseInt(maxs[chrNumber - 1]));                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    String pos = temps[0] + "_" + temps[2];                    double Score = Double.parseDouble(temps[4]);                    GerpScoreSet.add(pos);                    GerpScoreMap.put(pos, Score);                }                System.out.println("Finished building GerpScoreMap …………………………");                GeneFeature gf = new GeneFeature(annotationfile);                HashSet<String> geneName = new HashSet<>();                for (int i = 0; i < gf.genes.length; i++) {                    String name = gf.genes[i].geneName;                    int chr = gf.genes[i].geneRange.chr;                    if (chr == chrNumber) {                        geneName.add(name);//                        System.out.println(name);                    }                }                String[] geneNames = geneName.toArray(new String[geneName.size()]);                Arrays.sort(geneNames);                int[] length = new int[geneNames.length];                int[] length1 = new int[geneNames.length];                for (int i = 0; i < length.length; i++) {                    length[i] = 0;                    length1[i] = 0;                }                double[] constraint = new double[geneNames.length];                for (int i = 0; i < constraint.length; i++) {                    constraint[i] = 0.0;                }                double[] constraintAverage = new double[geneNames.length];                double[] constraintAverage1 = new double[geneNames.length];                for (int i = 0; i < constraintAverage.length; i++) {                    constraintAverage[i] = 0.0;                }                for (int i = 0; i < geneNames.length; i++) {                    int index = gf.getGeneIndex(geneNames[i]);                    int startsite = gf.genes[index].geneRange.start;                    int strand = gf.getGeneStrand(gf.getGeneIndex(geneNames[i]));                    int endsite = gf.getGeneEnd(gf.getGeneIndex(geneNames[i]));                    int start = 0;                    int startpoint = 0;                    if (strand == 1) {                        start = startsite;                        if (start > 100000) {                            startpoint = start - 100000;                        }                        length[i] = start - startpoint;                        for (int j = startpoint; j < start; j++) {                            String pos = chrNumber + "_" + j;                            if (GerpScoreSet.contains(pos)) {                                double posSore = GerpScoreMap.get(pos);                                if (posSore > 0.0) {                                    length1[i]++;                                    constraint[i] += posSore;                                    continue;                                }                            }                        }                    } else {                        start = endsite;                        startpoint = start + 100000;                        length[i] = start - startpoint;                        for (int j = start; j < startpoint; j++) {                            String pos = chrNumber + "_" + j;                            if (GerpScoreSet.contains(pos)) {                                double posSore = GerpScoreMap.get(pos);                                if (posSore > 0.0) {                                    length1[i]++;                                    constraint[i] += posSore;                                    continue;                                }                            }                        }                    }//                    int end = gf.genes[index].geneRange.end;//                    length[i] = end - start + 1;//                    for (int j = start; j < end + 1; j++) {                    constraintAverage[i] = Double.parseDouble(df.format((constraint[i] / length[i]) * 1000000 / 1000000));                    constraintAverage1[i] = Double.parseDouble(df.format((constraint[i] / length1[i]) * 1000000 / 1000000));                }                for (int i = 0; i < geneNames.length; i++) {                    bw.write(geneNames[i] + "\t" + constraintAverage[i] + "\t" + constraintAverage1[i]);                    bw.newLine();                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void getGeneConstraint() {        //建立pos与gerp的对应表        String infoDir = "/data2/xiaohan/GerpOrigin/chr";        //为每个基因计算gerp值        String bedfileDir = "/data1/home/xiaohan/rareallele/fastQTL/expression/S7";        //输出文件        String constrianMap = "/data1/home/xiaohan/rareallele/constraintMap";        //variants        String geneVariants = "/data1/home/xiaohan/rareallele/rankcorrelation/root/rareAlleleCount/1Mupgene/chr1-42";        File[] fs = new File(infoDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "gz");        HashSet nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            String name = fs[i].getName().split("\\.")[0].split("r")[1];//            if(name.equals("36")){            nameSet.add(name);            System.out.println(name);//            }        }        nameSet.stream().forEach(f -> {            System.out.println("This is reading file" + f);            BufferedReader brvar = IOUtils.getTextReader(new File(geneVariants, "chr" + f + "_0k_1000k_RACount.txt").getAbsolutePath());            BufferedReader br = IOUtils.getTextGzipReader(new File(infoDir, "chr" + f + ".bed.gz").getAbsolutePath());            BufferedReader br1 = IOUtils.getTextGzipReader(new File(bedfileDir, "S7expression" + f + ".bed.gz").getAbsolutePath());            BufferedWriter bw = IOUtils.getTextWriter(new File(constrianMap, "S7constraint" + f + ".txt").getAbsolutePath());            String temp = null;            String[] temps = null;            try {                bw.write("geneName" + "\t" + "ScoreNumber" + "\t" + "ScoreSum" + "\t" + "ScoreMean" + "\t" + "ScoreAverage" + "\t" + "sd" + "\t" + "varSum" + "\t" + "varMean" + "\t" + "varMedian" + "\t" + "varsd");                bw.newLine();                HashMap<String, Double> genevarSum = new HashMap();                HashMap<String, Double> genevarMean = new HashMap();                HashMap<String, Double> genevarMedian = new HashMap();//                    HashMap<String, double[]> genevar = new HashMap();                HashMap<String, Double> genevarsd = new HashMap();                String variant = null;                String[] variants = null;                int countline = 0;                while ((variant = brvar.readLine()) != null) {                    countline++;                    if (countline % 50 == 0) {                        System.out.println("This is reading variants file chr" + f + " " + countline);                    }                    if (!variant.startsWith("T")) {                        continue;                    }                    variants = variant.split("\t");                    String geneName = variants[0];                    double[] count = new double[87];                    for (int i = 1; i < variants.length; i++) {                        count[i - 1] = Double.parseDouble(variants[i]);                    }                    double varSum = StatUtils.sum(count);                    double varMean = StatUtils.mean(count);                    Arrays.sort(count);                    double varMedian = count[count.length / 2];                    double varsd = StatUtils.populationVariance(count);//                        double[] var = count;                    genevarSum.put(geneName, varSum);                    genevarMean.put(geneName, varMean);                    genevarMedian.put(geneName, varMedian);//                        genevar.put(geneName,var);                    genevarsd.put(geneName, varsd);                }                brvar.close();                HashSet<String> posSet = new HashSet();                HashMap<String, Double> PosGerpMap = new HashMap<>();                int countline1 = 0;                while ((temp = br.readLine()) != null) {                    countline1++;                    if (countline1 % 50000 == 0) {                        System.out.println("This is reading bed file chr" + f + " " + countline1);                    }                    if (temp.startsWith("CHROM")) {                        continue;                    }                    temps = temp.split("\t");                    String pos = temps[0] + "_" + temps[2];                    double gerp = Double.parseDouble(temps[4]);                    posSet.add(pos);                    PosGerpMap.put(pos, gerp);                }                String bed = null;                String[] beds = null;                //为每个基因计算gerp值                int countline2 = 0;                while ((bed = br1.readLine()) != null) {                    countline2++;                    if (countline2 % 50 == 0) {                        System.out.println("This is reading expression file chr" + f + " " + countline2 + " and calculating contriant");                    }                    if (bed.startsWith("#")) {                        continue;                    }                    beds = bed.split("\t");                    String geneName = beds[3];                    double[] exprs = new double[87];                    for (int i = 4; i < beds.length; i++) {                        exprs[i - 4] = Double.parseDouble(beds[i]);                    }                    double variance = StatUtils.populationVariance(exprs);                    double sd = Math.sqrt(variance);                    int startpoint = Integer.parseInt(beds[1]);                    int endpoint = Integer.parseInt(beds[2]);                    int ScoreNumber = 0;                    double ScoreSum = 0.0;                    for (int i = startpoint; i < endpoint; i++) {                        String pos1;                        pos1 = String.valueOf(i);                        String pos = beds[0] + "_" + pos1;                        if (posSet.contains(pos)) {//                                System.out.println(pos);                            ScoreNumber++;                            ScoreSum += PosGerpMap.get(pos);                        }                    }                    int geneLength = endpoint - startpoint;                    double ScoreMean = ScoreSum / ScoreNumber;                    double ScoreAverage = ScoreSum / geneLength;                    double varMean1 = genevarMean.get(geneName);                    double varSum1 = genevarSum.get(geneName);                    double varMedian1 = genevarMedian.get(geneName);                    double varsd1 = genevarsd.get(geneName);                    bw.write(geneName + "\t" + ScoreNumber + "\t" + ScoreSum + "\t" + ScoreMean + "\t" + ScoreAverage + "\t" + sd + "\t" + varSum1 + "\t" + varMean1 + "\t" + varMedian1 + "\t" + varsd1);//                        for(int i = 0;i<var1.length;i++){//                            bw.write(var1[i]+"\t");//                        }                    bw.newLine();                }                br.close();                br1.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void check1() {//        String infile1 = "";//        String infile2 = "";//        String outputfile = "";//        HashSet<String> name = new HashSet();//        for (int i = 0; i < name.length; i++) {//        String names = "name";//        name.add(names);//        }//        for (int i = 0; i < name.length; i++) {//        String[] pos = name.toArray(new String[name.size()]);//        System.out.println(pos[0]);//        }//        HashMap<String,String>[] hash = new HashMap[2];//        hash[0].put("1","1");//        hash[1].put("1,","2");//        System.out.println(hash[0].get(1));//        for (int i = 0; i < 42; i += 6) {//            int chr1 = i + 1;//            int chr2 = i + 2;//            System.out.print("S7constraint" + chr1 + ".txt " + "S7constraint" + chr2 + ".txt ");//        }//        System.out.println("");//        for (int i = 0; i < 42; i += 6) {//            int chr3 = i + 3;//            int chr4 = i + 4;//            System.out.print("S7constraint" + chr3 + ".txt " + "S7constraint" + chr4 + ".txt ");//        }//        System.out.println("");//        for (int i = 0; i < 42; i += 6) {//            int chr5 = i + 5;//            int chr6 = i + 6;//            System.out.print("S7constraint" + chr5 + ".txt " + "S7constraint" + chr6 + ".txt ");//        }//        for (int i = 0; i < 42; i += 6) {//            int chr1 = i + 1;//            int chr2 = i + 2;//            System.out.print("chr" + chr1 + "ConstriantEffect.txt " + "chr" + chr2 + "ConstriantEffect.txt ");//        }//        System.out.println("");//        for (int i = 0; i < 42; i += 6) {//            int chr3 = i + 3;//            int chr4 = i + 4;//            System.out.print("chr" + chr3 + "ConstriantEffect.txt " + "chr" + chr4 + "ConstriantEffect.txt ");//        }//        System.out.println("");//        for (int i = 0; i < 42; i += 6) {//            int chr5 = i + 5;//            int chr6 = i + 6;//            System.out.print("chr" + chr5 + "ConstriantEffect.txt " + "chr" + chr6 + "ConstriantEffect.txt ");//        }        for (int i = 0; i < 42; i++) {            int chrNumber = i + 1;////              System.out.println("vcftools --gzvcf /data2/junxu/genotype/"+chrNumber+".346.B18.recode.vcf.gz  --TajimaD 1 --out chr"+chrNumber+" &");//              System.out.println("sed -e '/nan/d' chr"+chrNumber+".Tajima.D > chr"+chrNumber+".Tajima.D_fixed.txt && rm chr"+chrNumber+".Tajima.D &");//          }            System.out.println("vcftools --gzvcf /data2/junxu/genotype/" + chrNumber + ".346.B18.recode.vcf.gz --het --out heter" + chrNumber + " &");        }    }    public void check() {//        String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";//        String infile1 = "/data1/home/xiaohan/rareallele/fastQTL/output/per5/cov5.permutations.all.chunks.storey.txt";//        String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/check.txt";//        BufferedReader br = IOUtils.getTextReader(infile);//        BufferedReader br1 = IOUtils.getTextReader(infile1);//        BufferedWriter bw = IOUtils.getTextWriter(outfile);//        HashSet<String> gene1 = new HashSet();//        HashSet<String> gene2 = new HashSet();//        String temp = null;//        String[] temps = null;//        String temp1 = null;//        String[] temps1 = null;//        try {//            while ((temp = br.readLine()) != null) {//                temps = temp.split("\t");//                String gene = temps[0];//                if (!gene1.contains(gene)) {//                    gene1.add(gene);//                }//            }//            while ((temp1 = br1.readLine()) != null) {//                temps1 = temp1.split("\t");//                String gene = temps1[0];//                if (!gene2.contains(gene)) {//                    gene2.add(gene);//                }//            }//            String[] genes1 = gene1.toArray(new String[gene1.size()]);//            String[] genes2 = gene2.toArray(new String[gene2.size()]);//            int max = Math.max(genes1.length, genes2.length);//            for (int i = 0; i < max; i++) {//                if (i < genes1.length) {//                    bw.write(genes1[i] + "\t");//                } else {//                    bw.write("null\t");//                }//                if (i < genes2.length) {//                    bw.write(genes2[i]);//                } else {//                    bw.write("null");//                }//                bw.newLine();//            }//            br.close();//            br1.close();//            bw.flush();//            bw.close();//        } catch (Exception e) {//            e.printStackTrace();//        }        int chrNumber = 36;        String annotationfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/wheat_v1.1_Lulab.gff3";        GeneFeature gf = new GeneFeature(annotationfile);        HashSet<String> geneName = new HashSet<>();        System.out.println(gf);        for (int i = 0; i < gf.genes.length; i++) {            System.out.println(i);            String name = gf.genes[i].geneName;            System.out.println(name);            int chr = gf.genes[i].geneRange.chr;            System.out.println(chr);            if (chr == chrNumber) {                geneName.add(name);                System.out.println(name);            }        }        System.out.println("Got it");    }    public void getCommonwithRare() {    }    public void getMafEffect() {        String infoDir = "/data2/xiaohan/genotype/genotypeMaf005/frq";        File[] fs = new File(infoDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "frq");        HashSet nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            String name = fs[i].getName();//            if (name.split("freq")[0].equals("chr6")) {            nameSet.add(name);            System.out.println(name);//            }        }//        DecimalFormat decFor = new DecimalFormat("0.000");        HashMap<String, Double> PosMafMap = new HashMap<>();        nameSet.stream().forEach(f -> {            System.out.println("This is reading file" + f);            BufferedReader br = IOUtils.getTextReader(new File(infoDir, f.toString()).getAbsolutePath());            String temp = null;            String[] temps = null;            try {//                int countline = 0;                while ((temp = br.readLine()) != null) {//                    countline ++;//                    if(countline%500 == 0){//                        System.out.println(countline);//                    }                    if (temp.startsWith("CHROM")) {                        continue;                    }                    temps = temp.split("\t");                    String pos = temps[0] + "_" + temps[1];//                    double maf = Double.parseDouble(decFor.format(temps[5]));                    double maf = Double.parseDouble(temps[5].split(":")[1]);//                    System.out.println(maf);                    PosMafMap.put(pos, maf);                }            } catch (Exception e) {                e.printStackTrace();            }        });        System.out.println("Finished creating posmafmap");        String[] suffix = {"neg.txt", "pos.txt"};        for (int m = 0; m < suffix.length; m++) {            String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";            String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/MafWithEffectall" + suffix[m];//            String outfile1 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/MafWithEffectA" + suffix[m];//            String outfile2 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/MafWithEffectB" + suffix[m];//            String outfile3 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/MafWithEffectD" + suffix[m];            BufferedReader br = IOUtils.getTextReader(infile);            BufferedWriter bw = IOUtils.getTextWriter(outfile);//            BufferedWriter bw2 = IOUtils.getTextWriter(outfile2);//            BufferedWriter bw3 = IOUtils.getTextWriter(outfile3);            System.out.println(infile);            HashMap<String, Double> posMaf = new HashMap();            HashMap<String, Double> poseff = new HashMap();            HashSet<String> posSet = new HashSet();//            HashMap[] posMafA = new HashMap[10];//            HashMap[] posMafB = new HashMap[10];//            HashMap[] posMafD = new HashMap[10];//            HashMap[] poseffA = new HashMap[10];//            HashMap[] poseffB = new HashMap[10];//            HashMap[] poseffD = new HashMap[10];//            HashSet<String>[] posSetA = new HashSet[10];//            HashSet<String>[] posSetB = new HashSet[10];//            HashSet<String>[] posSetD = new HashSet[10];            System.out.println("Finished matrix building………………");            String temp = null;            String[] temps = null;            try {                int countline = 0;                while ((temp = br.readLine()) != null) {                    countline++;                    if (countline % 500000 == 0) {                        System.out.println(countline);                    }                    temps = temp.split("\t");//                    System.out.println(temps[1]);//                    if (!temps[1].startsWith("6")) continue;                    String distance = temps[2];                    String position = temps[1];                    double minorF = PosMafMap.get(position);//                    String geneName = temps[0];                    int dis = Integer.parseInt(distance);                    for (int i = 0; i < 10; i++) {                        double mafmin = i * 0.005;                        double mafmax = (i + 1) * 0.005;//                        System.out.println(mafmin);                        Boolean disvalue = Boolean.FALSE;                        Boolean sentence = Boolean.FALSE;                        sentence = mafmin < minorF && minorF <= mafmax;//                        System.out.println(sentence.booleanValue());                        if (m == 0) {                            disvalue = dis <= 0;                        }                        if (m == 1) {                            disvalue = dis >= 0;                        }                        if (sentence && disvalue) {                            System.out.println(sentence);//                            String subgenome = geneName.substring(8, 9);//                            if (!posSet[i].contains(position)) {                            posSet.add(position);//                            }                            posMaf.put(position, minorF);                            poseff.put(position, Double.parseDouble(temps[7]));//                            System.out.println(subgenome);//                            mafeff[i].add(temps[7]);//                            if (subgenome.equals("A")) {//                                posSetA[i].add(position);//                                posMafA[i].put(position,minorF);//                                poseffA[i].put(position,temps[7]);//                            }//                            if (subgenome.equals("B")) {//                                posSetB[i].add(position);//                                posMafB[i].put(position,minorF);//                                poseffB[i].put(position,temps[7]);//                            }//                            if (subgenome.equals("D")) {//                                posSetD[i].add(position);//                                posMafD[i].put(position,minorF);//                                poseffD[i].put(position,temps[7]);//                            }                        }                    }                }                bw.write("species\tpos\tgroup\tmaf\teffect\t");//                System.out.println("species\tpos\tgroup\tmaf\teffect\t");                bw.newLine();                String[] pos = posSet.toArray(new String[posSet.size()]);                for (int j = 0; j < posSet.size(); j++) {                    String pos1 = pos[j];                    String chr = pos1.split("_")[0];                    int chrNumber = Integer.parseInt(chr);                    String species = null;                    if (chrNumber % 6 == 1 || chrNumber % 6 == 2) {                        species = "A";                    }                    if (chrNumber % 6 == 3 || chrNumber % 6 == 4) {                        species = "B";                    }                    if (chrNumber % 6 == 5 || chrNumber % 6 == 0) {                        species = "D";                    }                    for (int i = 0; i < 10; i++) {                        double mafmin = i * 0.005;                        double mafmax = (i + 1) * 0.005;                        String group = mafmin + "-" + mafmax;                        if (mafmin < posMaf.get(pos1) && mafmax >= posMaf.get(pos1)) {                            bw.write(species + "\t" + pos1 + "\t" + group + "\t" + posMaf.get(pos1) + "\t" + poseff.get(pos1));                            bw.newLine();                        }                    }//                    String[] posA = posSetA[i].toArray(new String[posSetA[i].size()]);//                    for (int j = 0; j < posSetA[i].size(); j++) {//                        String pos1 = posA[j];//                        bw.write("A\t" + pos1 + "\t" + group + "\t" + posMafA[i].get(pos1) + "\t" + poseffA[i].get(pos1));//                        bw.newLine();//                    }//                    String[] posB = posSetB[i].toArray(new String[posSetB[i].size()]);//                    for (int j = 0; j < posSetB[i].size(); j++) {//                        String pos1 = posB[j];//                        bw.write("A\t" + pos1 + "\t" + group + "\t" + posMafB[i].get(pos1) + "\t" + poseffB[i].get(pos1));//                        bw.newLine();//                    }//                    String[] posD = posSetD[i].toArray(new String[posSetD[i].size()]);//                    for (int j = 0; j < posSetD[i].size(); j++) {//                        String pos1 = posD[j];//                        bw.write("A\t" + pos1 + "\t" + group + "\t" + posMafD[i].get(pos1) + "\t" + poseffD[i].get(pos1));//                        bw.newLine();//                    }                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getdistanceEffectforsub() {        String[] suffix = {"neg.txt", "pos.txt"};        for (int i = 0; i < suffix.length; i++) {            String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithEffectindi" + suffix[i];            String outfile1 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithEffectA" + suffix[i];            String outfile2 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithEffectB" + suffix[i];            String outfile3 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithEffectD" + suffix[i];            BufferedReader br = IOUtils.getTextReader(infile);            BufferedWriter bw1 = IOUtils.getTextWriter(outfile1);            BufferedWriter bw2 = IOUtils.getTextWriter(outfile2);            BufferedWriter bw3 = IOUtils.getTextWriter(outfile3);            String temp = null;            String[] temps = null;            try {                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("gene")) {                        bw1.write(temp);                        bw2.write(temp);                        bw3.write(temp);                        continue;                    }                    temps = temp.split("\t");                    String gene = temps[0];                    String sub = gene.substring(8, 9);                    if (sub.equals("A")) {                        bw1.write(temp);                    }                    if (sub.equals("B")) {                        bw2.write(temp);                    }                    if (sub.equals("D")) {                        bw3.write(temp);                    }                }                br.close();                bw1.flush();                bw2.flush();                bw3.flush();                bw1.close();                bw2.close();                bw3.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getdistanceEffectforeGene() {        String[] suffix = {"neg.txt", "pos.txt"};        for (int m = 0; m < suffix.length; m++) {            String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";            String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithEffectindi" + suffix[m];//            String outfile1 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithEffectA" + suffix[m];//            String outfile2 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithEffectB" + suffix[m];//            String outfile3 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithEffectD" + suffix[m];            String infor = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";            BufferedReader brinfo = IOUtils.getTextReader(infor);            HashSet<String> geneSet = new HashSet<>();            HashMap<String, Integer> geneMap = new HashMap<>();            String info = null;            String[] infos = null;            try {                while ((info = brinfo.readLine()) != null) {                    if (info.startsWith("gene")) {                        continue;                    }                    infos = info.split("\t");                    String gene = infos[0];                    String sub = gene.substring(8, 9);                    geneSet.add(gene);                }            } catch (Exception e) {                e.printStackTrace();            }            BufferedReader br = IOUtils.getTextReader(infile);            BufferedWriter bw = IOUtils.getTextWriter(outfile);            String[] genestring = geneSet.toArray(new String[geneSet.size()]);            int[][] countgene = new int[1000][genestring.length];            double[][] Effectgene = new double[1000][genestring.length];            for (int i = 0; i < 1000; i++) {                for (int j = 0; j < genestring.length; j++) {                    countgene[i][j] = 0;                }            }            for (int i = 0; i < genestring.length; i++) {                geneMap.put(genestring[i], i);            }            String temp = null;            String[] temps = null;            try {                int countline = 0;                while ((temp = br.readLine()) != null) {                    countline++;                    if (countline % 500 == 0) {                        System.out.println(countline);                    }                    temps = temp.split("\t");                    String distance = temps[2];                    String geneName = temps[0];                    String sub1 = geneName.substring(8, 9);                    int dis = Integer.parseInt(distance);                    for (int i = 0; i < 1000; i++) {                        int dismin = 0;                        int dismax = 0;                        Boolean sentence = Boolean.FALSE;                        if (m == 0) {                            dismin = -i * 1000;                            dismax = -(i + 1) * 1000;                            sentence = dismin >= dis && dis > dismax;                        }                        if (m == 1) {                            dismin = i * 1000;                            dismax = (i + 1) * 1000;                            sentence = dismin <= dis && dis < dismax;                        }                        if (sentence) {                            countgene[i][geneMap.get(geneName)]++;                            Effectgene[i][geneMap.get(geneName)] += Double.parseDouble(temps[7]);                        }                    }                }                bw.write("gene\tdistanceMin");                for (int i = 0; i < 1000; i++) {                    int dismin = 0;                    if (m == 0) {                        dismin = -i * 1000;                    }                    if (m == 1) {                        dismin = i * 1000;                    }                    bw.write(dismin + "\t");                }                bw.newLine();                bw.write("gene\tdistanceMax");                for (int i = 0; i < 1000; i++) {                    int dismax = 0;                    if (m == 0) {                        dismax = -(i + 1) * 1000;                    }                    if (m == 1) {                        dismax = (i + 1) * 1000;                    }                    bw.write(dismax + "\t");                }                bw.newLine();                for (int i = 0; i < genestring.length; i++) {                    bw.write(genestring[i] + "\t");                    for (int j = 0; j < 1000; j++) {                        Double effA = Effectgene[j][i] / countgene[j][i];                        bw.write(effA + "\t");                    }                    bw.newLine();                }                br.close();                brinfo.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getdistanceEffect() {        String[] suffix = {"neg.txt", "pos.txt"};        for (int m = 0; m < suffix.length; m++) {            String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";            String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithEffect" + suffix[m];            BufferedReader br = IOUtils.getTextReader(infile);            BufferedWriter bw = IOUtils.getTextWriter(outfile);            System.out.println(infile);            int[] countA = new int[1000];            int[] countB = new int[1000];            int[] countD = new int[1000];            double[] effectA = new double[1000];            double[] effectB = new double[1000];            double[] effectD = new double[1000];            int[] allcount = new int[1000];            double[] alleffect = new double[1000];            for (int i = 0; i < 1000; i++) {                countA[i] = 0;                countB[i] = 0;                countD[i] = 0;                allcount[i] = 0;            }            System.out.println("Finished matrix building………………");            String temp = null;            String[] temps = null;            try {                int countline = 0;                while ((temp = br.readLine()) != null) {                    countline++;                    if (countline % 5 == 0) {                        System.out.println(countline);                    }                    temps = temp.split("\t");                    String distance = temps[2];                    String geneName = temps[0];                    int dis = Integer.parseInt(distance);                    for (int i = 0; i < 1000; i++) {                        int dismin = 0;                        int dismax = 0;                        Boolean sentence = Boolean.FALSE;//                        System.out.println(sentence.booleanValue());                        if (m == 0) {                            dismin = -i * 1000;                            dismax = -(i + 1) * 1000;                            sentence = dismin >= dis && dis > dismax;                        }                        if (m == 1) {                            dismin = i * 1000;                            dismax = (i + 1) * 1000;                            sentence = dismin <= dis && dis < dismax;                        }                        if (sentence) {//                            System.out.println(sentence.booleanValue());//                        System.out.println("Got one!!");                            String subgenome = geneName.substring(8, 9);//                            System.out.println(subgenome);                            allcount[i]++;                            alleffect[i] += Double.parseDouble(temps[7]);                            if (subgenome.equals("A")) {                                countA[i]++;                                effectA[i] += Double.parseDouble(temps[7]) * Double.parseDouble(temps[7]);//                            System.out.println(countA[i]);                            }                            if (subgenome.equals("B")) {                                countB[i]++;                                effectB[i] += Double.parseDouble(temps[7]) * Double.parseDouble(temps[7]);                            }                            if (subgenome.equals("D")) {                                countD[i]++;                                effectD[i] += Double.parseDouble(temps[7]) * Double.parseDouble(temps[7]);                            }                        }                    }                }                bw.write("distanceMin\tdistanceMax\teffA\teffB\teffD\teffall");                bw.newLine();                for (int i = 0; i < 1000; i++) {                    int dismin = 0;                    int dismax = 0;                    if (m == 0) {                        dismin = -i * 1000;                        dismax = -(i + 1) * 1000;                    }                    if (m == 1) {                        dismin = i * 1000;                        dismax = (i + 1) * 1000;                    }                    double effA = effectA[i] / countA[i];                    double effB = effectB[i] / countB[i];                    double effD = effectD[i] / countD[i];                    double effall = alleffect[i] / allcount[i];                    bw.write(dismin + "\t" + dismax + "\t" + effA + "\t" + effB + "\t" + effD + "\t" + effall);                    bw.newLine();                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getdistanceNumberforsub() {        String[] suffix = {"neg.txt", "pos.txt"};        for (int i = 0; i < suffix.length; i++) {            String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithCountindi" + suffix[i];            String outfile1 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithCountA" + suffix[i];            String outfile2 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithCountB" + suffix[i];            String outfile3 = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithCountD" + suffix[i];            BufferedReader br = IOUtils.getTextReader(infile);            BufferedWriter bw1 = IOUtils.getTextWriter(outfile1);            BufferedWriter bw2 = IOUtils.getTextWriter(outfile2);            BufferedWriter bw3 = IOUtils.getTextWriter(outfile3);            String temp = null;            String[] temps = null;            try {                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("gene")) {                        bw1.write(temp);                        bw2.write(temp);                        bw3.write(temp);                        continue;                    }                    temps = temp.split("\t");                    String gene = temps[0];                    String sub = gene.substring(8, 9);                    if (sub.equals("A")) {                        bw1.write(temp);                    }                    if (sub.equals("B")) {                        bw2.write(temp);                    }                    if (sub.equals("D")) {                        bw3.write(temp);                    }                }                br.close();                bw1.flush();                bw2.flush();                bw3.flush();                bw1.close();                bw2.close();                bw3.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getdistanceNumberforeGene() {        String[] suffix = {"neg.txt", "pos.txt"};        for (int m = 0; m < suffix.length; m++) {            String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";            String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithCountindi" + suffix[m];//        String outfile1 = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/DistanceWithCountA.txt";//        String outfile2 = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/DistanceWithCountB.txt";//        String outfile3 = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/DistanceWithCountD.txt";            String infor = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";            BufferedReader brinfo = IOUtils.getTextReader(infor);            HashSet<String> geneSet = new HashSet<>();            HashMap<String, Integer> geneMap = new HashMap<>();            String info = null;            String[] infos = null;            try {                while ((info = brinfo.readLine()) != null) {                    if (info.startsWith("gene")) {                        continue;                    }                    infos = info.split("\t");                    String gene = infos[0];                    geneSet.add(gene);                }            } catch (Exception e) {                e.printStackTrace();            }            BufferedReader br = IOUtils.getTextReader(infile);            BufferedWriter bw = IOUtils.getTextWriter(outfile);            String[] genestring = geneSet.toArray(new String[geneSet.size()]);            int[][] countgene = new int[1000][genestring.length];            for (int i = 0; i < 1000; i++) {                for (int j = 0; j < genestring.length; j++) {                    countgene[i][j] = 0;                }            }            for (int i = 0; i < genestring.length; i++) {                geneMap.put(genestring[i], i);            }            String temp = null;            String[] temps = null;            try {                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    String distance = temps[2];                    String geneName = temps[0];                    int dis = Integer.parseInt(distance);                    for (int i = 0; i < 1000; i++) {                        int dismin = 0;                        int dismax = 0;                        Boolean sentence = Boolean.FALSE;                        if (m == 0) {                            dismin = -i * 1000;                            dismax = -(i + 1) * 1000;                            sentence = dismin >= dis && dis > dismax;                        }                        if (m == 1) {                            dismin = i * 1000;                            dismax = (i + 1) * 1000;                            sentence = dismin <= dis && dis < dismax;                        }                        if (sentence) {                            countgene[i][geneMap.get(geneName)]++;                        }                    }                }                bw.write("gene\tdistanceMin");                for (int i = 0; i < 1000; i++) {                    int dismin = 0;                    if (m == 0) {                        dismin = -i * 1000;                    }                    if (m == 1) {                        dismin = i * 1000;                    }                    bw.write(dismin + "\t");                }                bw.newLine();                bw.write("gene\tdistanceMax");                for (int i = 0; i < 1000; i++) {                    int dismax = 0;                    if (m == 0) {                        dismax = -(i + 1) * 1000;                    }                    if (m == 1) {                        dismax = (i + 1) * 1000;                    }                    bw.write(dismax + "\t");                }                bw.newLine();                for (int i = 0; i < genestring.length; i++) {                    bw.write(genestring[i] + "\t");                    for (int j = 0; j < 1000; j++) {                        bw.write(countgene[j][i] + "\t");                    }                    bw.newLine();                }                br.close();                brinfo.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getdistanceNumber() {        String[] suffix = {"neg.txt", "pos.txt"};        for (int m = 0; m < suffix.length; m++) {            String infile = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal5/all.nominals.correct.txt";            String outfile = "/data1/home/xiaohan/rareallele/fastQTL/output/Results5/DistanceWithCount" + suffix[m];            BufferedReader br = IOUtils.getTextReader(infile);            BufferedWriter bw = IOUtils.getTextWriter(outfile);            int[] countA = new int[1000];            int[] countB = new int[1000];            int[] countD = new int[1000];            for (int i = 0; i < 1000; i++) {                countA[i] = 0;                countB[i] = 0;                countD[i] = 0;            }            String temp = null;            String[] temps = null;            try {                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    String distance = temps[2];                    String geneName = temps[0];                    int dis = Integer.parseInt(distance);                    for (int i = 0; i < 1000; i++) {                        int dismin = 0;                        int dismax = 0;                        Boolean sentence = Boolean.FALSE;                        if (m == 0) {                            dismin = -i * 1000;                            dismax = -(i + 1) * 1000;                            sentence = dismin >= dis && dis > dismax;                        }                        if (m == 1) {                            dismin = i * 1000;                            dismax = (i + 1) * 1000;                            sentence = dismin <= dis && dis < dismax;                        }                        if (sentence) {//                        System.out.println("Got one!!");                            String subgenome = geneName.substring(8, 9);                            System.out.println(subgenome);                            if (subgenome.equals("A")) {                                countA[i]++;//                            System.out.println(countA[i]);                            }                            if (subgenome.equals("B")) {                                countB[i]++;                            }                            if (subgenome.equals("D")) {                                countD[i]++;                            }                        }                    }                }                bw.write("distanceMin\tdistanceMax\tCountA\tCountB\tCountD");                bw.newLine();                for (int i = 0; i < 1000; i++) {                    int dismin = 0;                    int dismax = 0;                    if (m == 0) {                        dismin = -i * 1000;                        dismax = -(i + 1) * 1000;                    }                    if (m == 1) {                        dismin = i * 1000;                        dismax = (i + 1) * 1000;                    }                    bw.write(dismin + "\t" + dismax + "\t" + countA[i] + "\t" + countB[i] + "\t" + countD[i]);                    bw.newLine();                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void eGeneVariantspair() {        int number = 5;        String inputDir = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal" + number;        String outputDir = "/data1/home/xiaohan/rareallele/fastQTL/output/nominal" + number;        String infoDir = "/data1/home/xiaohan/rareallele/fastQTL/output/per" + number;        try {            BufferedReader brinfo = IOUtils.getTextReader(new File(infoDir, "cov" + number + ".permutations.all.chunks.storey.txt").getAbsolutePath());            BufferedReader br = IOUtils.getTextGzipReader(new File(inputDir, "all.nominals.txt.gz").getAbsolutePath());            BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "all.nominals.correct.txt").getAbsolutePath());            BufferedReader brinfo2 = IOUtils.getTextGzipReader(new File(infoDir, "all.permutations.txt.gz").getAbsolutePath());            String temp = null;            String[] temps = null;            String info = null;            String[] infos = null;            HashSet eGeneNames = new HashSet();            HashMap<String, Double> eGenepnomal = new HashMap<>();            while ((info = brinfo.readLine()) != null) {                infos = info.split("\t");                String eGene = infos[0];                if (!eGeneNames.contains(eGene)) {                    eGeneNames.add(eGene);                }            }            while ((info = brinfo2.readLine()) != null) {                infos = info.split("\t");                if (infos[12].equals("NA")) {                    continue;                }                String eGene = infos[0];                String pnomal = infos[15];                eGenepnomal.put(eGene, Double.parseDouble(pnomal));            }            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                String eGene = temps[0];                if (eGeneNames.contains(eGene)) {                    if (temps[6].equals("NA")) {                        continue;                    }                    double pnomaldecimal = Double.parseDouble(temps[6]);                    double pnomal = eGenepnomal.get(eGene);                    if (pnomaldecimal <= pnomal) {                        bw.write(temp);                        bw.newLine();                    }                }            }            br.close();            brinfo.close();            brinfo2.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void changefile() {        String infile = "/data2/xiaohan/genotype/genotypeMaf005/frq/all_minorAlleleFrq.txt";        String outputfile = "/data2/xiaohan/genotype/genotypeMaf005/frq/all_minorAlleleFrq_new.txt";        BufferedReader br = IOUtils.getTextReader(infile);        BufferedWriter bw = IOUtils.getTextWriter(outputfile);        String temp = null;        String[] temps = null;//        HashMap chrMap = new HashMap();        try {            bw.write("Frequency");            bw.newLine();            while ((temp = br.readLine()) != null) {                if (temp.startsWith("Frequency")) {                    continue;                }                bw.write(temp);                bw.newLine();            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }//        String[] chr42 = {"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","40","41","42"};//        String[] chr21 = {"1A","1A","1B","1B","1D","1D","2A","2A","2B","2B","2D","2D","3A","3A","3B","3B","3D","3D","4A","4A","4B","4B","4D","4D","5A","5A","5B","5B","5D","5D","6A","6A","6B","6B","6D","6D","7A","7A","7B","7B","7D","7D"};//        for(int i = 0; i<42; i++){//            chrMap.put(chr42[i],chr21[i]);//        }//        try{////            while((temp = br.readLine())!=null){//                if(temp.startsWith("SNP")){//                    bw.write("SNP\tCHR\tPOS");//                    bw.newLine();//                    continue;//                }//                temps = temp.split("\t");//                bw.write(temps[0] + "\t" + chrMap.get(temps[1]) + "\t" + temps[2]);//                bw.newLine();//            }//            br.close();//            bw.flush();//            bw.close();//        }catch(Exception e){//            e.printStackTrace();//        }    }    public void getSNPdensity() {        String fileDir = "/data2/junxu/genotype/";        String outputDir = "/data2/xiaohan/allgenopattern/density";        for (int i = 0; i < 42; i++) {            int chrNumber = i + 1;            BufferedReader br = IOUtils.getTextGzipReader(new File(fileDir, chrNumber + ".346.B18.recode.vcf.gz").getAbsolutePath());            BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "Chr" + chrNumber + "_SNPdensity.txt").getAbsolutePath());            String temp = null;            String[] temps = null;            try {                bw.write("SNP\tCHR\tPOS");                bw.newLine();                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("#")) {                        continue;                    }                    temps = temp.split("\t");                    bw.write("snp" + temps[0] + "_" + temps[1] + "\t" + temps[0] + "\t" + temps[1]);                    bw.newLine();                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getminorAlleleFrequency() {        String inputDir = "/data2/xiaohan/genotype/genotypeMaf005";        String outputDir = "/data2/xiaohan/genotype/genotypeMaf005";        for (int i = 0; i < 42; i++) {            try {                int chrNumber = i + 1;                BufferedReader br = IOUtils.getTextReader(new File(inputDir, "chr" + chrNumber + "freq.txt.frq").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, chrNumber + "_minorAlleleFrq.txt").getAbsolutePath());                String temp = null;                String[] temps = null;                bw.write("Frequency");                bw.newLine();                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("CHROM")) {                        continue;                    }                    temps = temp.split("\t");                    String frequency = temps[5].split(":")[1];                    bw.write(frequency);                    bw.newLine();                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getheterozygositysite() {        String inputDir = "/data2/xiaohan/VCF_information/hardy";        String outputDir = "/data2/xiaohan/VCF_information/hardy/summary";        File[] fs = new File(inputDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "hwe");        HashSet nameSet = new HashSet();        DecimalFormat df = new DecimalFormat("0.00000");        for (int i = 0; i < fs.length; i++) {            String name = fs[i].getName().split("\\.")[0].split("y")[1];//            if(name.equals("6")) {            nameSet.add(name);            System.out.println(name);//            }        }        nameSet.stream().forEach(f -> {            try {                BufferedReader br = IOUtils.getTextReader(new File(inputDir, "hardy" + f + ".hwe").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "heterForsite_chr" + f + ".txt").getAbsolutePath());                String temp = null;                String[] temps = null;                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("CHR")) {                        bw.write("CHR\tPOS\tHeter");                        bw.newLine();                        continue;                    }                    temps = temp.split("\t");                    int het = Integer.parseInt(temps[2].split("/")[1]);                    int total = Integer.parseInt(temps[2].split("/")[0]) + Integer.parseInt(temps[2].split("/")[1]) + Integer.parseInt(temps[2].split("/")[2]);                    double het1 = (double) het / total;                    double h1 = new BigDecimal(het1).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();                    StringBuilder sb = new StringBuilder();                    sb.append(temps[0]).append("\t").append(temps[1]).append("\t").append(df.format(h1));                    bw.write(sb.toString());                    bw.newLine();                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void getheterozygosityindi() throws IOException {        String infileDir = "/data2/xiaohan/VCF_information/heter";        String outputDir = "/data2/xiaohan/VCF_information/heter/summary";        String outfile = "/data2/xiaohan/VCF_information/heter/heterall.txt";        HashSet<String> nameSet = new HashSet<>();        for (int i = 1; i < 43; i++) {            nameSet.add(String.valueOf(i));        }        int[][] count = new int[346][3];        for (int i = 0; i < 346; i++) {            for (int j = 0; j < 3; j++) {                count[i][j] = 0;            }        }        String[] ID = new String[346];        nameSet.stream().forEach(f -> {            try {                BufferedReader br = IOUtils.getTextReader(new File(infileDir, "heter" + f + ".het").getAbsolutePath());                BufferedWriter bwS = IOUtils.getTextWriter(new File(outputDir, "heter" + f + ".txt").getAbsolutePath());                String temp = null;                String[] temps = null;                int[][] chrcount = new int[346][3];                for (int i = 0; i < 346; i++) {                    for (int j = 0; j < 3; j++) {                        chrcount[i][j] = 0;                    }                }                int countline = 0;                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("INDV")) continue;                    temps = temp.split("\t");                    count[countline][0] += Integer.parseInt(temps[1]);                    count[countline][1] += Integer.parseInt(temps[3]);                    chrcount[countline][0] = Integer.parseInt(temps[1]);                    chrcount[countline][1] = Integer.parseInt(temps[3]);                    ID[countline] = temps[0];                    countline++;                }                for (int i = 0; i < 346; i++) {                    chrcount[i][2] = chrcount[i][1] - chrcount[i][0];                }                bwS.write("ID\tHET\t");                bwS.newLine();                DecimalFormat df = new DecimalFormat("0.0000");                df.setRoundingMode(RoundingMode.HALF_UP);                for (int i = 0; i < 346; i++) {                    double het = (double) chrcount[i][2] / chrcount[i][1];                    double h1 = new BigDecimal(het).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();                    bwS.write(ID[i] + "\t" + df.format(h1));                    bwS.newLine();                }                bwS.flush();                bwS.close();                br.close();            } catch (Exception e) {                e.printStackTrace();            }        });        for (int i = 0; i < 346; i++) {            count[i][2] = count[i][1] - count[i][0];        }        BufferedWriter bw = IOUtils.getTextWriter(outfile);        bw.write("ID\tHET\t");        bw.newLine();        DecimalFormat df = new DecimalFormat("0.0000");        df.setRoundingMode(RoundingMode.HALF_UP);        for (int i = 0; i < 346; i++) {            double het = (double) count[i][2] / count[i][1];            double h1 = new BigDecimal(het).setScale(4, BigDecimal.ROUND_HALF_UP).doubleValue();            bw.write(ID[i] + "\t" + df.format(h1));            bw.newLine();        }        bw.flush();        bw.close();    }    public void getmissingrate() {    }    public void FPKM() {        String info = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/DEnorm7_87chr1-42_donor02.txt";        String infile = "/data2/xiaohan/count/codingcount/donor02/donor02_codingRACount.txt";        String outfile = "/data2/xiaohan/count/codingcount/donor02_codingRACount.txt";        BufferedReader br = IOUtils.getTextReader(infile);        BufferedReader brinfo = IOUtils.getTextReader(info);        BufferedWriter bw = IOUtils.getTextWriter(new File(outfile).getAbsolutePath());        String temp = null;        String[] temps = null;        String infor = null;        String[] infors = null;        DecimalFormat decFor = new DecimalFormat("0.000");        HashMap<String, Integer> genelength = new HashMap();        try {            while ((infor = brinfo.readLine()) != null) {                if (infor.startsWith("#")) {                    continue;                }                infors = infor.split("\t");                String geneName = infors[3];                int start = Integer.parseInt(infors[1]);                int stop = Integer.parseInt(infors[2]);                int length = stop - start;                genelength.put(geneName, length);            }            while ((temp = br.readLine()) != null) {                if (temp.startsWith("gene")) {                    bw.write(temp);                    bw.newLine();                    continue;                }                temps = temp.split("\t");                String gene = temps[0];                int geneL = genelength.get(gene);                bw.write(gene + "\t");                for (int i = 1; i < temps.length; i++) {                    double count = Double.parseDouble(temps[i]) / geneL;                    String count1 = decFor.format(count);                    bw.write(count1 + "\t");                }                bw.newLine();            }            brinfo.close();            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getPatternProportion() {        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/triads";//        String[] prefix = {"M001","M010","M1000","M011","M110","M101","M111"};        String[] prefix = {"M011", "M101", "M110"};        HashMap<String, Integer> prefixMap = new HashMap();        prefixMap.put(prefix[0], 0);        prefixMap.put(prefix[1], 1);        prefixMap.put(prefix[2], 2);        String[] suffix = {"A", "B", "D"};        String tempA = null;        String[] tempsA = null;        String tempB = null;        String[] tempsB = null;        String tempD = null;        String[] tempsD = null;        BufferedReader[] br = new BufferedReader[3];        BufferedWriter bw = IOUtils.getTextWriter(new File(inputDir, "proportion.txt").getAbsolutePath());        try {            for (int j = 0; j < prefix.length; j++) {                for (int i = 0; i < 3; i++) {                    br[i] = IOUtils.getTextReader(new File(inputDir, prefix[j] + suffix[i] + "_rareCount.txt").getAbsolutePath());                }                String pre = prefix[j];                int index = prefixMap.get(pre);//                System.out.println(index);                int maxindex = 3;                int yes = 0;                int no = 0;                tempA = br[0].readLine();                tempB = br[1].readLine();                tempD = br[2].readLine();                while ((tempA = br[0].readLine()) != null) {                    tempB = br[1].readLine();                    tempD = br[2].readLine();                    tempsA = tempA.split("\t");                    tempsB = tempB.split("\t");                    tempsD = tempD.split("\t");                    for (int m = 1; m < tempsA.length; m++) {                        int countA = Integer.parseInt(tempsA[m]);                        int countB = Integer.parseInt(tempsB[m]);                        int countD = Integer.parseInt(tempsD[m]);//                        System.out.println(countA+"\t"+countB+"\t"+countD);                        int max = Math.max(countA, countB);                        max = Math.max(max, countD);//                        System.out.println(max);                        if (countA == max) {                            maxindex = 0;                        }                        if (countB == max) {                            maxindex = 1;                        }                        if (countD == max) {                            maxindex = 2;                        }//                        System.out.println(maxindex);                    }                    if (maxindex == index) {                        yes++;                    } else {                        no++;                    }                }                int sum = yes + no;                System.out.println(sum);                double proportionyes = yes / sum;                double proportionno = no / sum;                System.out.println(yes / sum);                System.out.println(no / sum);                bw.write(prefix[j] + "\t");                bw.write(yes + "\t");                bw.write(no + "\t");                bw.write(proportionyes + "\t");                bw.write(proportionno + "\t");                bw.newLine();                br[0].close();                br[1].close();                br[2].close();            }            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getPatternCount() {        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/1Mupgene/donor02/donor02_0k_1000_RACount.txt";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/triads";        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/median/triadsEXppatternMedian.txt";        BufferedReader brinfo = IOUtils.getTextReader(new File(infor).getAbsolutePath());        String info = null;        String[] infos = null;        String temp = null;        String[] temps = null;        BufferedReader br = IOUtils.getTextReader(new File(infile).getAbsolutePath());        BufferedWriter[] bwM001 = new BufferedWriter[3];        BufferedWriter[] bwM010 = new BufferedWriter[3];        BufferedWriter[] bwM1000 = new BufferedWriter[3];        BufferedWriter[] bwM011 = new BufferedWriter[3];        BufferedWriter[] bwM101 = new BufferedWriter[3];        BufferedWriter[] bwM110 = new BufferedWriter[3];        BufferedWriter[] bwM111 = new BufferedWriter[3];        String[] sub = {"A", "B", "D"};        for (int i = 0; i < sub.length; i++) {            bwM001[i] = IOUtils.getTextWriter(new File(outputDir, "M001" + sub[i] + "_rareCount.txt").getAbsolutePath());            bwM010[i] = IOUtils.getTextWriter(new File(outputDir, "M010" + sub[i] + "_rareCount.txt").getAbsolutePath());            bwM1000[i] = IOUtils.getTextWriter(new File(outputDir, "M1000" + sub[i] + "_rareCount.txt").getAbsolutePath());            bwM011[i] = IOUtils.getTextWriter(new File(outputDir, "M011" + sub[i] + "_rareCount.txt").getAbsolutePath());            bwM101[i] = IOUtils.getTextWriter(new File(outputDir, "M101" + sub[i] + "_rareCount.txt").getAbsolutePath());            bwM110[i] = IOUtils.getTextWriter(new File(outputDir, "M110" + sub[i] + "_rareCount.txt").getAbsolutePath());            bwM111[i] = IOUtils.getTextWriter(new File(outputDir, "M111" + sub[i] + "_rareCount.txt").getAbsolutePath());        }        HashMap<String, String> geneCountMap = new HashMap<>();        try {            String title = br.readLine();            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                geneCountMap.put(temps[0], temp);                System.out.println(temps[0]);            }            for (int i = 0; i < sub.length; i++) {                bwM001[i].write(title);                bwM010[i].write(title);                bwM1000[i].write(title);                bwM011[i].write(title);                bwM101[i].write(title);                bwM110[i].write(title);                bwM111[i].write(title);                bwM001[i].newLine();                bwM010[i].newLine();                bwM1000[i].newLine();                bwM011[i].newLine();                bwM101[i].newLine();                bwM110[i].newLine();                bwM111[i].newLine();            }            while ((info = brinfo.readLine()) != null) {                infos = info.split("\t");                if (infos[6].equals("M001")) {                    bwM001[0].write(geneCountMap.get(infos[0]));                    bwM001[1].write(geneCountMap.get(infos[2]));                    bwM001[2].write(geneCountMap.get(infos[4]));                    bwM001[0].newLine();                    bwM001[1].newLine();                    bwM001[2].newLine();                }                if (infos[6].equals("M010")) {                    bwM010[0].write(geneCountMap.get(infos[0]));                    bwM010[1].write(geneCountMap.get(infos[2]));                    bwM010[2].write(geneCountMap.get(infos[4]));                    bwM010[0].newLine();                    bwM010[1].newLine();                    bwM010[2].newLine();                }                if (infos[6].equals("M1000")) {                    bwM1000[0].write(geneCountMap.get(infos[0]));                    bwM1000[1].write(geneCountMap.get(infos[2]));                    bwM1000[2].write(geneCountMap.get(infos[4]));                    bwM1000[0].newLine();                    bwM1000[1].newLine();                    bwM1000[2].newLine();                }                if (infos[6].equals("M011")) {                    bwM011[0].write(geneCountMap.get(infos[0]));                    bwM011[1].write(geneCountMap.get(infos[2]));                    bwM011[2].write(geneCountMap.get(infos[4]));                    bwM011[0].newLine();                    bwM011[1].newLine();                    bwM011[2].newLine();                }                if (infos[6].equals("M101")) {                    bwM101[0].write(geneCountMap.get(infos[0]));                    bwM101[1].write(geneCountMap.get(infos[2]));                    bwM101[2].write(geneCountMap.get(infos[4]));                    bwM101[0].newLine();                    bwM101[1].newLine();                    bwM101[2].newLine();                }                if (infos[6].equals("M110")) {                    bwM110[0].write(geneCountMap.get(infos[0]));                    bwM110[1].write(geneCountMap.get(infos[2]));                    bwM110[2].write(geneCountMap.get(infos[4]));                    bwM110[0].newLine();                    bwM110[1].newLine();                    bwM110[2].newLine();                }                if (infos[6].equals("M111")) {                    bwM111[0].write(geneCountMap.get(infos[0]));                    bwM111[1].write(geneCountMap.get(infos[2]));                    bwM111[2].write(geneCountMap.get(infos[4]));                    bwM111[0].newLine();                    bwM111[1].newLine();                    bwM111[2].newLine();                }            }            br.close();            brinfo.close();            for (int i = 0; i < sub.length; i++) {                bwM001[i].flush();                bwM010[i].flush();                bwM1000[i].flush();                bwM011[i].flush();                bwM101[i].flush();                bwM110[i].flush();                bwM111[i].flush();                bwM001[i].close();                bwM010[i].close();                bwM1000[i].close();                bwM011[i].close();                bwM101[i].close();                bwM110[i].close();                bwM111[i].close();            }        } catch (Exception e) {            e.printStackTrace();        }    }    public void changeSNPID() {        String inputDir = "/data2/xiaohan/genotype/genotypeMaf005";        String outputDir = "/data2/xiaohan/genotype/temp";        HashSet nameSet = new HashSet();        for (int i = 30; i < 35; i++) {            int chr = i + 1;            nameSet.add(chr);            System.out.println(chr);        }        nameSet.parallelStream().forEach(f -> {            BufferedReader br = IOUtils.getTextGzipReader(new File(inputDir, "346B18.chr" + f + ".maf005.recode.vcf.gz").getAbsolutePath());            BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "346B18.chr" + f + ".maf005.recode.vcf").getAbsolutePath());            try {                String temp = null;                String[] temps = null;                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("#")) {                        bw.write(temp);                        bw.newLine();                        continue;                    }                    temps = temp.split("\t");                    String snpID = temps[0] + "_" + temps[1];//                    temps[2] = temps[0] + "_" + temps[1];                    for (int j = 0; j < 2; j++) {                        bw.write(temps[j] + "\t");                    }                    bw.write(snpID + "\t");                    for (int j = 3; j < temps.length - 1; j++) {                        bw.write(temps[j] + "\t");                    }                    bw.write(temps[temps.length - 1]);                    bw.newLine();                }                br.close();                bw.flush();                bw.close();                StringBuilder sb = new StringBuilder();                sb.append("bgzip 346B18.chr" + f + ".maf005.recode.vcf && tabix -p vcf 346B18.chr" + f + ".maf005.recode.vcf.gz");                String command = sb.toString();                File dir = new File(new File(outputDir).getAbsolutePath());                String[] cmdarry = {"/bin/bash", "-c", command};                Process p = Runtime.getRuntime().exec(cmdarry, null, dir);                p.waitFor();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void FDRcalculation() {        String inputDir = "";        String outputDir = "";        for (int i = 0; i < 30; i++) {            for (int j = 0; j < 42; j++) {                int chunk = i + 1;                int chr = j + 1;                try {                    BufferedReader br = IOUtils.getTextGzipReader(new File(inputDir, "chr" + chr + ".chunk" + chunk + ".nominals.txt.gz").getAbsolutePath());                    BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "").getAbsolutePath());                    String temp = null;                    String[] temps = null;                    while ((temp = br.readLine()) != null) {                        temps = temp.split("\t");                    }                } catch (Exception e) {                    e.printStackTrace();                }            }        }    }    public void getmergeCountmix2() {//        String[] subdir = {"20k", "25k", "30k", "35k", "40k", "45k", "50k"};//        String[] subdir = {"35k"};        String inputDir = "/data2/xiaohan/ERCCdouble";        String titlemix2 = "gene\tmix2\tTpm_1\tTpm_2\tTpm_3\tR2_1\tR2_2\tR2_3\tR2_4\tR2_5\tR2_6\tS2_1\tS2_2\tS2_3\tS2_4\tS2_5\tS2_6\tU2_1\tU2_2\tU2_3\tU2_4\tU2_5\tU2_6\tUR2_1\tUR2_2\tUR2_3\tUR2_4\tUR2_5\tUR2_6";        String mix2count = "14.87272297\t10.87344411\t10.87344411\t9.874212935\t0.228555679\t1.501339619\t3.057314878\t0.425805972\t0.040696407\t3.057314878\t8.875749351\t0.425805972\t5.897089128\t0.937741617\t1.501339619\t0.543756852\t3.057314878\t6.884933648\t2.698921662\t1.246889019\t0.543756852\t8.875749351\t9.874212935\t7.465821456\t12.87286723\t0.040696407\t5.897089128\t4.921097088\t4.521845778\t0.030629419\t1.905575039\t4.921097088\t7.878817285\t0.156320137\t3.967946706\t2.220982853\t2.220982853\t6.473959366\t0.937741617\t14.4577015\t0.020491705\t8.461735222\t3.057314878\t5.897089128\t6.884933648\t0.543756852\t0.010282234\t5.490098755\t1.501339619\t0.297346204\t5.897089128\t4.921097088\t13.87277106\t0.156320137\t0.118799166\t4.521845778\t0.297346204\t7.878817285\t0.937741617\t9.459687756\t7.878817285\t12.45789384\t6.884933648\t0.08027625\t1.246889019\t0.08027625\t3.967946706\t12.87286723\t4.921097088\t0.543756852\t8.875749351\t1.501339619\t0.156320137\t0.297346204\t2.698921662\t3.057314878\t10.45866293\t0.297346204\t3.967946706\t2.220982853\t1.501339619\t0.156320137\t3.583317865\t0.543756852\t3.967946706\t6.473959366\t4.921097088\t0.754156788\t6.884933648\t0.937741617\t2.220982853\t11.87305955";        String[] mix2 = mix2count.split("\t");        String ERCC = "ERCC-00002\tERCC-00003\tERCC-00004\tERCC-00009\tERCC-00012\tERCC-00013\tERCC-00014\tERCC-00016\tERCC-00017\tERCC-00019\tERCC-00022\tERCC-00024\tERCC-00025\tERCC-00028\tERCC-00031\tERCC-00033\tERCC-00034\tERCC-00035\tERCC-00039\tERCC-00040\tERCC-00041\tERCC-00042\tERCC-00043\tERCC-00044\tERCC-00046\tERCC-00048\tERCC-00051\tERCC-00053\tERCC-00054\tERCC-00057\tERCC-00058\tERCC-00059\tERCC-00060\tERCC-00061\tERCC-00062\tERCC-00067\tERCC-00069\tERCC-00071\tERCC-00073\tERCC-00074\tERCC-00075\tERCC-00076\tERCC-00077\tERCC-00078\tERCC-00079\tERCC-00081\tERCC-00083\tERCC-00084\tERCC-00085\tERCC-00086\tERCC-00092\tERCC-00095\tERCC-00096\tERCC-00097\tERCC-00098\tERCC-00099\tERCC-00104\tERCC-00108\tERCC-00109\tERCC-00111\tERCC-00112\tERCC-00113\tERCC-00116\tERCC-00117\tERCC-00120\tERCC-00123\tERCC-00126\tERCC-00130\tERCC-00131\tERCC-00134\tERCC-00136\tERCC-00137\tERCC-00138\tERCC-00142\tERCC-00143\tERCC-00144\tERCC-00145\tERCC-00147\tERCC-00148\tERCC-00150\tERCC-00154\tERCC-00156\tERCC-00157\tERCC-00158\tERCC-00160\tERCC-00162\tERCC-00163\tERCC-00164\tERCC-00165\tERCC-00168\tERCC-00170\tERCC-00171";        String[] ERCCs = ERCC.split("\t");        String file1 = "countResult_tpm.txt";        String file2 = "countResult_cpm.txt";        HashSet nameSet = new HashSet();        for (int i = 0; i < 12; i++) {            int species = i + 1;            nameSet.add(species);        }        nameSet.stream().forEach(f -> {            BufferedReader brT = IOUtils.getTextReader(new File(inputDir + "/Truseq/output/" + f + "M/countTable", file1).getAbsolutePath());            BufferedReader brR = IOUtils.getTextReader(new File(inputDir + "/SiPASR/output/" + f + "M/countTable", file2).getAbsolutePath());            BufferedReader brS = IOUtils.getTextReader(new File(inputDir + "/SiPAS/output/" + f + "M/countTable", file2).getAbsolutePath());            BufferedReader brU = IOUtils.getTextReader(new File(inputDir + "/SiPASU/output/" + f + "M/countTable", file2).getAbsolutePath());            BufferedReader brUR = IOUtils.getTextReader(new File(inputDir + "/SiPASUR/output/" + f + "M/countTable", file2).getAbsolutePath());            BufferedWriter bw1 = IOUtils.getTextWriter(new File(inputDir + "/mixlog2_TPM_CPM/", "mix2_" + f + "M.txt").getAbsolutePath());            String temp = null;            String[] temps = null;            try {                HashMap<String, double[]> Tgenemix1 = new HashMap();                while ((temp = brT.readLine()) != null) {                    if (!temp.startsWith("ERCC")) {                        continue;                    }                    temps = temp.split("\t");                    double[] logchange = new double[3];                    for (int i = 0; i < logchange.length; i++) {//                        int count = Integer.parseInt(temps[i+4]);                        double count = Double.parseDouble(temps[i + 4]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    Tgenemix1.put(temps[0], logchange);                }                HashMap<String, double[]> Rgenemix1 = new HashMap();                while ((temp = brR.readLine()) != null) {                    if (!temp.startsWith("ERCC")) {                        continue;                    }                    temps = temp.split("\t");                    double[] logchange = new double[6];                    for (int i = 0; i < logchange.length - 3; i++) {//                        double count = Integer.parseInt(temps[i+10]);                        double count = Double.parseDouble(temps[i + 10]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    for (int i = 3; i < logchange.length; i++) {//                        int count = Integer.parseInt(temps[i-2]);                        double count = Double.parseDouble(temps[i - 2]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    Rgenemix1.put(temps[0], logchange);                }                HashMap<String, double[]> Sgenemix1 = new HashMap();                while ((temp = brS.readLine()) != null) {                    if (!temp.startsWith("ERCC")) {                        continue;                    }                    temps = temp.split("\t");                    double[] logchange = new double[6];                    for (int i = 0; i < logchange.length - 3; i++) {//                        int count = Integer.parseInt(temps[i+10]);                        double count = Double.parseDouble(temps[i + 10]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    for (int i = 3; i < logchange.length; i++) {//                        int count = Integer.parseInt(temps[i-2]);                        double count = Double.parseDouble(temps[i - 2]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    Sgenemix1.put(temps[0], logchange);                }                HashMap<String, double[]> Ugenemix1 = new HashMap();                while ((temp = brU.readLine()) != null) {                    if (!temp.startsWith("ERCC")) {                        continue;                    }                    temps = temp.split("\t");                    double[] logchange = new double[6];                    for (int i = 0; i < logchange.length - 3; i++) {//                        int count = Integer.parseInt(temps[i+10]);                        double count = Double.parseDouble(temps[i + 10]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    for (int i = 3; i < logchange.length; i++) {//                        int count = Integer.parseInt(temps[i-2]);                        double count = Double.parseDouble(temps[i - 2]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    Ugenemix1.put(temps[0], logchange);                }                HashMap<String, double[]> URgenemix1 = new HashMap();                while ((temp = brUR.readLine()) != null) {                    if (!temp.startsWith("ERCC")) {                        continue;                    }                    temps = temp.split("\t");                    double[] logchange = new double[6];                    for (int i = 0; i < logchange.length - 3; i++) {//                        int count = Integer.parseInt(temps[i+10]);                        double count = Double.parseDouble(temps[i + 10]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    for (int i = 3; i < logchange.length; i++) {//                        int count = Integer.parseInt(temps[i-2]);                        double count = Double.parseDouble(temps[i - 2]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    URgenemix1.put(temps[0], logchange);                }                bw1.write(titlemix2);                bw1.newLine();                for (int i = 0; i < ERCCs.length; i++) {                    bw1.write(ERCCs[i] + "\t");                    double[] T = Tgenemix1.get(ERCCs[i]);                    double[] R = Rgenemix1.get(ERCCs[i]);                    double[] S = Sgenemix1.get(ERCCs[i]);                    double[] U = Ugenemix1.get(ERCCs[i]);                    double[] UR = URgenemix1.get(ERCCs[i]);                    bw1.write(mix2[i] + "\t");                    for (int j = 0; j < T.length; j++) {                        bw1.write(T[j] + "\t");                    }                    for (int j = 0; j < R.length; j++) {                        bw1.write(R[j] + "\t");                    }                    for (int j = 0; j < S.length; j++) {                        bw1.write(S[j] + "\t");                    }                    for (int j = 0; j < U.length; j++) {                        bw1.write(U[j] + "\t");                    }                    for (int j = 0; j < UR.length; j++) {                        bw1.write(UR[j] + "\t");                    }                    bw1.newLine();                }                brT.close();                brR.close();                brS.close();                brU.close();                brUR.close();                bw1.flush();                bw1.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void getmergeCountmix1() {//        String[] subdir = {"20k", "25k", "30k", "35k", "40k", "45k", "50k"};//        String[] subdir = {"20k"};//        String[] subdir = {"35k"};        String inputDir = "/data2/xiaohan/ERCCdouble";        String titlemix1 = "gene\tmix1\tTam_1\tTam_2\tTam_3\tR1_1\tR1_2\tR1_3\tR1_4\tR1_5\tR1_6\tS1_1\tS1_2\tS1_3\tS1_4\tS1_5\tS1_6\tU1_1\tU1_2\tU1_3\tU1_4\tU1_5\tU1_6\tUR1_1\tUR1_2\tUR1_3\tUR1_4\tUR1_5\tUR1_6";        String mix1count = "13.87277106\t9.874212935\t12.87286723\t9.874212935\t0.156320137\t0.937741617\t2.220982853\t0.297346204\t0.156320137\t4.921097088\t7.878817285\t0.297346204\t5.897089128\t2.220982853\t1.501339619\t1.501339619\t3.057314878\t6.884933648\t2.220982853\t0.937741617\t0.297346204\t8.875749351\t8.875749351\t6.884933648\t11.87305955\t0.020491705\t5.897089128\t4.921097088\t3.967946706\t0.020491705\t1.501339619\t3.967946706\t7.878817285\t0.08027625\t5.897089128\t2.220982853\t1.501339619\t5.897089128\t0.937741617\t13.87277106\t0.020491705\t7.878817285\t2.220982853\t4.921097088\t5.897089128\t0.297346204\t0.040696407\t4.921097088\t3.057314878\t0.156320137\t7.878817285\t6.884933648\t13.87277106\t0.543756852\t0.08027625\t3.967946706\t0.297346204\t9.874212935\t0.937741617\t8.875749351\t6.884933648\t11.87305955\t8.875749351\t0.08027625\t0.937741617\t0.297346204\t3.967946706\t14.87272297\t6.884933648\t1.501339619\t10.87344411\t0.937741617\t0.156320137\t0.297346204\t2.220982853\t4.921097088\t9.874212935\t0.937741617\t3.967946706\t2.220982853\t3.057314878\t0.543756852\t3.057314878\t0.543756852\t3.057314878\t5.897089128\t3.967946706\t0.543756852\t5.897089128\t0.543756852\t3.967946706\t11.87305955";        String[] mix1 = mix1count.split("\t");        String ERCC = "ERCC-00002\tERCC-00003\tERCC-00004\tERCC-00009\tERCC-00012\tERCC-00013\tERCC-00014\tERCC-00016\tERCC-00017\tERCC-00019\tERCC-00022\tERCC-00024\tERCC-00025\tERCC-00028\tERCC-00031\tERCC-00033\tERCC-00034\tERCC-00035\tERCC-00039\tERCC-00040\tERCC-00041\tERCC-00042\tERCC-00043\tERCC-00044\tERCC-00046\tERCC-00048\tERCC-00051\tERCC-00053\tERCC-00054\tERCC-00057\tERCC-00058\tERCC-00059\tERCC-00060\tERCC-00061\tERCC-00062\tERCC-00067\tERCC-00069\tERCC-00071\tERCC-00073\tERCC-00074\tERCC-00075\tERCC-00076\tERCC-00077\tERCC-00078\tERCC-00079\tERCC-00081\tERCC-00083\tERCC-00084\tERCC-00085\tERCC-00086\tERCC-00092\tERCC-00095\tERCC-00096\tERCC-00097\tERCC-00098\tERCC-00099\tERCC-00104\tERCC-00108\tERCC-00109\tERCC-00111\tERCC-00112\tERCC-00113\tERCC-00116\tERCC-00117\tERCC-00120\tERCC-00123\tERCC-00126\tERCC-00130\tERCC-00131\tERCC-00134\tERCC-00136\tERCC-00137\tERCC-00138\tERCC-00142\tERCC-00143\tERCC-00144\tERCC-00145\tERCC-00147\tERCC-00148\tERCC-00150\tERCC-00154\tERCC-00156\tERCC-00157\tERCC-00158\tERCC-00160\tERCC-00162\tERCC-00163\tERCC-00164\tERCC-00165\tERCC-00168\tERCC-00170\tERCC-00171";        String[] ERCCs = ERCC.split("\t");        String file1 = "countResult_tpm.txt";        String file2 = "countResult_cpm.txt";        HashSet nameSet = new HashSet();        for (int i = 0; i < 12; i++) {            int species = i + 1;            nameSet.add(species);        }        nameSet.stream().forEach(f -> {            BufferedReader brT = IOUtils.getTextReader(new File(inputDir + "/Truseq/output/" + f + "M/countTable", file1).getAbsolutePath());            BufferedReader brR = IOUtils.getTextReader(new File(inputDir + "/SiPASR/output/" + f + "M/countTable", file2).getAbsolutePath());            BufferedReader brS = IOUtils.getTextReader(new File(inputDir + "/SiPAS/output/" + f + "M/countTable", file2).getAbsolutePath());            BufferedReader brU = IOUtils.getTextReader(new File(inputDir + "/SiPASU/output/" + f + "M/countTable", file2).getAbsolutePath());            BufferedReader brUR = IOUtils.getTextReader(new File(inputDir + "/SiPASUR/output/" + f + "M/countTable", file2).getAbsolutePath());            BufferedWriter bw1 = IOUtils.getTextWriter(new File(inputDir + "/mixlog2_TPM_CPM/", "mix1_" + f + "M.txt").getAbsolutePath());            String temp = null;            String[] temps = null;            try {                HashMap<String, double[]> Tgenemix1 = new HashMap();                while ((temp = brT.readLine()) != null) {                    if (!temp.startsWith("ERCC")) {                        System.out.println("This is reading T file ......");                        continue;                    }                    temps = temp.split("\t");                    double[] logchange = new double[3];                    for (int i = 0; i < logchange.length; i++) {//                    int count = Integer.parseInt(temps[i+1]);                        double count = Double.parseDouble(temps[i + 1]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    Tgenemix1.put(temps[0], logchange);                }                HashMap<String, double[]> Rgenemix1 = new HashMap();                while ((temp = brR.readLine()) != null) {                    if (!temp.startsWith("ERCC")) {                        System.out.println("This is reading R file ......");                        continue;                    }                    temps = temp.split("\t");                    double[] logchange = new double[6];                    for (int i = 0; i < logchange.length; i++) {//                    int count = Integer.parseInt(temps[i+4]);                        double count = Double.parseDouble(temps[i + 4]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    Rgenemix1.put(temps[0], logchange);                }                HashMap<String, double[]> Sgenemix1 = new HashMap();                while ((temp = brS.readLine()) != null) {                    if (!temp.startsWith("ERCC")) {                        System.out.println("This is reading S file ......");                        continue;                    }                    temps = temp.split("\t");                    double[] logchange = new double[6];                    for (int i = 0; i < logchange.length; i++) {//                    int count = Integer.parseInt(temps[i+4]);                        double count = Double.parseDouble(temps[i + 4]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    Sgenemix1.put(temps[0], logchange);                }                HashMap<String, double[]> Ugenemix1 = new HashMap();                while ((temp = brU.readLine()) != null) {                    if (!temp.startsWith("ERCC")) {                        System.out.println("This is reading U file ......");                        continue;                    }                    temps = temp.split("\t");                    double[] logchange = new double[6];                    for (int i = 0; i < logchange.length; i++) {//                    int count = Integer.parseInt(temps[i+4]);                        double count = Double.parseDouble(temps[i + 4]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    Ugenemix1.put(temps[0], logchange);                }                HashMap<String, double[]> URgenemix1 = new HashMap();                while ((temp = brUR.readLine()) != null) {                    if (!temp.startsWith("ERCC")) {                        System.out.println("This is reading UR file ......");                        continue;                    }                    temps = temp.split("\t");                    double[] logchange = new double[6];                    for (int i = 0; i < logchange.length; i++) {//                    int count = Integer.parseInt(temps[i+4]);                        double count = Double.parseDouble(temps[i + 4]);                        logchange[i] = Math.log10(count + 1) / Math.log10(2);                    }                    URgenemix1.put(temps[0], logchange);                }                bw1.write(titlemix1);                bw1.newLine();                for (int i = 0; i < ERCCs.length; i++) {                    bw1.write(ERCCs[i] + "\t");                    double[] T = Tgenemix1.get(ERCCs[i]);                    double[] R = Rgenemix1.get(ERCCs[i]);                    double[] S = Sgenemix1.get(ERCCs[i]);                    double[] U = Ugenemix1.get(ERCCs[i]);                    double[] UR = URgenemix1.get(ERCCs[i]);                    bw1.write(mix1[i] + "\t");                    for (int j = 0; j < T.length; j++) {                        bw1.write(T[j] + "\t");                    }                    for (int j = 0; j < R.length; j++) {                        bw1.write(R[j] + "\t");                    }                    for (int j = 0; j < S.length; j++) {                        bw1.write(S[j] + "\t");                    }                    for (int j = 0; j < U.length; j++) {                        bw1.write(U[j] + "\t");                    }                    for (int j = 0; j < UR.length; j++) {                        bw1.write(UR[j] + "\t");                    }                    bw1.newLine();                }                brT.close();                brR.close();                brS.close();                brU.close();                brUR.close();                bw1.flush();                bw1.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void triadsExpRareCount() {//        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/Gerp01donor02_0k_10k_RACount.txt";        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/1Mupgene/donor02/donor02_0k_1000_RACount.txt";//        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/005donor02_0k_1000_RACount.txt";        for (int j = 0; j < 87; j++) {            int Sample = j + 1;            String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/individual/triadsExppattern/triadsEXppatternMedian_Sample" + Sample + ".txt";            String outputfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/individual/Count/triadsEXpRareCountindi_Sample" + Sample + ".txt";//        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/median/triadsExppattern/triadsEXppatternMedian.txt";//        String outputfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/median/Count/triadsEXpRareCountindi.txt";            HashMap<String, String> geneRareCount = new HashMap();            String info = null;            String[] infos = null;            BufferedReader brinfo = IOUtils.getTextReader(infor);            BufferedReader br = IOUtils.getTextReader(infile);            BufferedWriter bw = IOUtils.getTextWriter(outputfile);            try {                while ((info = brinfo.readLine()) != null) {                    if (info.startsWith("gene")) {                        continue;                    }                    infos = info.split("\t");                    geneRareCount.put(infos[0], info);                }                String temp = null;                String[] temps = null;                bw.write("geneA\tratioA\tgeneB\tratioB\tgeneD\tratioD\tstate\tcountA\tcountB\tcountD");                bw.newLine();                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    String geneA = temps[0];                    String geneB = temps[2];                    String geneD = temps[4];                    String countA = geneRareCount.get(geneA);                    String countB = geneRareCount.get(geneB);                    String countD = geneRareCount.get(geneD);                    String[] countAs = countA.split("\t");                    String[] countBs = countB.split("\t");                    String[] countDs = countD.split("\t");//                for (int i = 1; i < 88; i++) {//                    bw.write(temp + "\t" + countAs[i] + "\t" + countBs[i] +"\t" + countDs[i] );//                    bw.newLine();//                }                    bw.write(temp + "\t" + countAs[j + 1] + "\t" + countBs[j + 1] + "\t" + countDs[j + 1]);                    bw.newLine();                }                br.close();                brinfo.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getPattern() {        String infiledir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/median";        String outputdir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/median";//        for (int j = 0; j < 87; j++) {//            int Sample = j + 1;//            String infile = "triadsexpressionMedianrate_Sample" + Sample + ".txt";//            String outfile = "triadsEXppatternMedian_Sample" + Sample + ".txt";        String infile = "triadsexpressionMedianrate.txt";        String outfile = "triadsEXppatternMedian.txt";        BufferedReader br = IOUtils.getTextReader(new File(infiledir, infile).getAbsolutePath());        BufferedWriter bw = IOUtils.getTextWriter(new File(outputdir, outfile).getAbsolutePath());        String temp = null;        String[] temps = null;        try {            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                String ratioA = temps[1];                String ratioB = temps[3];                String ratioD = temps[5];                String triadIDA = temps[0];                String triadIDB = temps[2];                String triadIDD = temps[4];                double[] ratiodABD = {Double.parseDouble(ratioA), Double.parseDouble(ratioB), Double.parseDouble(ratioD)};                String region = Standardization.getNearestPointIndex(ratiodABD).getRegion();                bw.write(triadIDA + "\t" + ratioA + "\t" + triadIDB + "\t" + ratioB + "\t" + triadIDD + "\t" + ratioD + "\t" + region);                bw.newLine();            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }//        }    }    public void getSingleTissueTriads() {        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/donor02GeneName.txt";        String infile = "/Users/yxh/Documents/RareAllele/006information/TheABD.txt";        String outputfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/TheABD_7.txt";        BufferedReader brinfo = IOUtils.getTextReader(new File(infor).getAbsolutePath());        BufferedReader br = IOUtils.getTextReader(new File(infile).getAbsolutePath());        BufferedWriter bw = IOUtils.getTextWriter(new File(outputfile).getAbsolutePath());        String info = null;        String temp = null;        String[] temps = null;        HashSet geneExpSet = new HashSet();        try {            while ((info = brinfo.readLine()) != null) {                geneExpSet.add(info);            }            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                String geneA = temps[0];                String geneB = temps[1];                String geneD = temps[2];                if (geneExpSet.contains(geneA) && geneExpSet.contains(geneB) && geneExpSet.contains(geneD)) {                    bw.write(temp);                    bw.newLine();                }            }            brinfo.close();            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getexpression() {        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/DEnorm7_87chr1-42.txt";        String outputfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/table/triadsABDexpression.txt";        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/table/triads.txt";        BufferedReader br1 = IOUtils.getTextReader(infor);        String info = null;        String[] infos = null;        HashSet Aname = new HashSet();        HashSet Bname = new HashSet();        HashSet Dname = new HashSet();        try {            while ((info = br1.readLine()) != null) {                infos = info.split("\t");                Aname.add(infos[0]);                Bname.add(infos[1]);                Dname.add(infos[2]);            }        } catch (Exception e) {            e.printStackTrace();        }        BufferedReader br = IOUtils.getTextReader(infile);        String temp = null;        String[] temps = null;        String[] Asub = null;        String[] Bsub = null;        String[] Dsub = null;        HashSet Aset = new HashSet();        HashSet Bset = new HashSet();        HashSet Dset = new HashSet();        String count[][] = new String[1607238][3];        int countlineA = 0;        int countlineB = 0;        int countlineD = 0;        try {            while ((temp = br.readLine()) != null) {                if (temp.startsWith("#") || temp.startsWith("c")) {                    continue;                }                temps = temp.split("\t");//                String sub = temps[3].substring(8,9);//                if(sub.equals("A")){//                if(sub.equals("B")){                if (Aname.contains(temps[3])) {                    for (int i = 4; i < temps.length; i++) {                        count[countlineA][0] = temps[i];                        countlineA++;                    }                }                if (Bname.contains(temps[3])) {                    for (int i = 4; i < temps.length; i++) {                        count[countlineB][1] = temps[i];                        countlineB++;                    }                }//                if(sub.equals("D")){                if (Dname.contains(temps[3])) {                    for (int i = 4; i < temps.length; i++) {                        count[countlineD][2] = temps[i];                        countlineD++;                    }                }            }            BufferedWriter bw = IOUtils.getTextWriter(new File(outputfile).getAbsolutePath());            bw.write("A" + "\t" + "B" + "\t" + "D");            bw.newLine();            for (int i = 0; i < count.length; i++) {                bw.write(count[i][0] + "\t" + count[i][1] + "\t" + count[i][2]);                bw.newLine();            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getTriadindex() {        String infofile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/TheABD_7.txt";        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/DEnorm7_87chr1-42.txt";        String outputfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/traidsindex.txt";        BufferedReader brinfo = IOUtils.getTextReader(infofile);        BufferedReader brexp = IOUtils.getTextReader(infile);        BufferedWriter bwinfo = IOUtils.getTextWriter(new File(outputfile).getAbsolutePath());        String info = null;        String[] infos = null;        String expr = null;        String[] exprs = null;        HashMap geneMap = new HashMap();        int countline = 0;        try {            while ((expr = brexp.readLine()) != null) {                if (expr.startsWith("#") || expr.startsWith("c")) {                    countline++;                    continue;                }                exprs = expr.split("\t");                String geneName = exprs[3];                countline++;                geneMap.put(geneName, countline);            }            while ((info = brinfo.readLine()) != null) {                infos = info.split("\t");                for (int i = 0; i < 3; i++) {                    bwinfo.write(infos[i] + "\t" + geneMap.get(infos[i]) + "\t");                }                bwinfo.newLine();            }            brexp.close();            brinfo.close();            bwinfo.flush();            bwinfo.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void triadsexpression() {        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/DEnorm7_87chr1-42_donor02.txt";        String infofile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/original/TheABD_7.txt";        String outputDir1 = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/triadsexpression/median/";//        for(int j =0;j<87;j++){//        int Sample = j+1;//        String outputfile1 = "triadsexpressionMedian_Sample"+Sample+".txt";//        String outputfile2 = "triadsexpressionMedianrate_Sample"+Sample+".txt";        String outputfile1 = "triadsexpressionMedian.txt";        String outputfile2 = "triadsexpressionMedianrate.txt";        BufferedReader br = IOUtils.getTextReader(infile);        BufferedReader brinfo = IOUtils.getTextReader(infofile);        BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir1, outputfile1).getAbsolutePath());        String temp = null;        String[] temps = null;        String info = null;        String[] infos = null;        HashSet<String> geneName = new HashSet<>();        HashMap<String, Double> geneExpression = new HashMap<>();        try {            br.readLine();            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                String gene = temps[3];                double[] totalexpression = new double[87];                for (int i = 4; i < temps.length; i++) {                    double expression = Double.parseDouble(temps[i]);                    totalexpression[i - 4] = expression;                }////                if(totalexpression == 0 ){////                    totalexpression = 0.000;////                }                Arrays.sort(totalexpression);                geneExpression.put(gene, totalexpression[43]);//                System.out.println(gene + "\t" + totalexpression);//                double expression = Double.parseDouble(temps[j+4]);//                geneExpression.put(gene,expression);            }            while ((info = brinfo.readLine()) != null) {                infos = info.split("\t");                bw.write(infos[0] + "\t" + geneExpression.get(infos[0]) + "\t" + infos[1] + "\t" + geneExpression.get(infos[1]) + "\t" + infos[2] + "\t" + geneExpression.get(infos[2]));                bw.newLine();            }            br.close();            brinfo.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }        BufferedReader br1 = IOUtils.getTextReader(new File(outputDir1, outputfile1).getAbsolutePath());        BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputDir1, outputfile2).getAbsolutePath());        String temp1 = null;        String[] temps1 = null;        try {            while ((temp1 = br1.readLine()) != null) {                temps1 = temp1.split("\t");                if (temps1[1].equals("null") || temps1[3].equals("null") || temps1[5].equals("null")) {                    continue;                }                double expressionA = Double.parseDouble(temps1[1]);                double expressionB = Double.parseDouble(temps1[3]);                double expressionD = Double.parseDouble(temps1[5]);                double totalexpression = expressionA + expressionB + expressionD;                if (totalexpression > 0) {                    double expressionArate = expressionA / totalexpression;                    double expressionBrate = expressionB / totalexpression;                    double expressionDrate = expressionD / totalexpression;                    bw1.write(temps1[0] + "\t" + expressionArate + "\t");                    bw1.write(temps1[2] + "\t" + expressionBrate + "\t");                    bw1.write(temps1[4] + "\t" + expressionDrate);                    bw1.newLine();                }            }            br1.close();            bw1.flush();            bw1.close();        } catch (Exception e) {            e.printStackTrace();        }//    }    }    public void getGerpdensity() throws IOException {        String outputDir = "/data2/xiaohan/GerpOrigin";        String inputDir = "/data2/xiaohan/GerpOrigin";        File[] fs = new File(inputDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, ".gz");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("\\.")[0];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                BufferedReader br = IOUtils.getTextGzipReader(new File(inputDir, f + ".bed.gz").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, f + "DensityPlot.txt").getAbsolutePath());                bw.write("Gerp");                bw.newLine();                int gerp01 = 0;                int gerp12 = 0;                int gerp23 = 0;                int gerp34 = 0;                int gerp45 = 0;                int gerp56 = 0;                int gerp67 = 0;                int gerp10 = 0;                int gerp21 = 0;                int gerp32 = 0;                int gerp43 = 0;                int gerphigh = 0;                int gerplow = 0;                String temp = null;                String[] temps = null;                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    double gerp = Double.parseDouble(temps[temps.length - 1]);                    if (gerp >= 0 && gerp < 1) {                        gerp01++;                    }                    if (gerp >= 1 && gerp < 2) {                        gerp12++;                    }                    if (gerp >= 2 && gerp < 3) {                        gerp23++;                    }                    if (gerp >= 3 && gerp < 4) {                        gerp34++;                    }                    if (gerp >= 4 && gerp < 5) {                        gerp45++;                    }                    if (gerp >= 5 && gerp < 6) {                        gerp56++;                    }                    if (gerp >= 6 && gerp < 7) {                        gerp67++;                    }                    if (gerp >= -1 && gerp < 0) {                        gerp10++;                    }                    if (gerp >= -2 && gerp < -1) {                        gerp21++;                    }                    if (gerp >= -3 && gerp < -2) {                        gerp32++;                    }                    if (gerp >= -4 && gerp < -3) {                        gerp43++;                    }                    if (gerp >= 7) {                        gerphigh++;                    }                    if (gerp < -4) {                        gerplow++;                    }                }                br.close();                bw.write("gerp01\t" + gerp01);                bw.newLine();                bw.write("gerp12\t" + gerp12);                bw.newLine();                bw.write("gerp23\t" + gerp23);                bw.newLine();                bw.write("gerp34\t" + gerp34);                bw.newLine();                bw.write("gerp45\t" + gerp45);                bw.newLine();                bw.write("gerp56\t" + gerp56);                bw.newLine();                bw.write("gerp67\t" + gerp67);                bw.newLine();                bw.write("gerp10\t" + gerp10);                bw.newLine();                bw.write("gerp21\t" + gerp21);                bw.newLine();                bw.write("gerp32\t" + gerp32);                bw.newLine();                bw.write("gerp43\t" + gerp43);                bw.newLine();                bw.write("gerphigh\t" + gerphigh);                bw.newLine();                bw.write("gerplow\t" + gerplow);                bw.newLine();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void Gerp2() {        String infile = "/data2/xiaohan/Gerp/1A.bed.gz";        BufferedReader br = IOUtils.getTextGzipReader(infile);        int count = 0;        String temp = null;        String[] temps = null;        try {            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");//                int gerp = Integer.parseInt(temps[4]);                double gerp = Double.parseDouble(temps[4]);                if (gerp > 2) {                    count++;                }            }            System.out.println(count);        } catch (Exception e) {            e.printStackTrace();        }    }    public void subGerp2() {        String infileDir = "/data2/xiaohan/GerpOrigin/subchr";        String outputDir = "/data2/xiaohan/GerpOrigin/subchr2.0";//        String inforDir = "/data2/xiaohan/genotype_root/genotype_rootMaf005/SNPsite";        File[] fs = new File(infileDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, ".gz");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("\\.")[0];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            int count = 0;            String temp = null;            String[] temps = null;            String temp1 = null;            String[] temps1 = null;            try {                BufferedReader br = IOUtils.getTextGzipReader(new File(infileDir, f + ".bed.gz").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, f + ".bed").getAbsolutePath());//                BufferedReader br1 = IOUtils.getTextReader(new File(inforDir, f + "_SNPsite.txt").getAbsolutePath());//                HashSet posSet = new HashSet();//                while ((temp1 = br1.readLine()) != null) {//                    temps1 = temp1.split("\t");//                    String pos = temps1[1];//                    posSet.add(pos);//                }                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");//                int gerp = Integer.parseInt(temps[4]);                    String pos1 = temps[1];                    double score = Double.parseDouble(temps[4]);                    if (score >= 2) {                        bw.write(temp);                        bw.newLine();                        count++;                    }//                    System.out.printf(pos1);//                    if (posSet.contains(pos1)) {//                        bw.write(temp);//                        bw.newLine();//                        count++;//                    }                }                br.close();                bw.flush();                bw.newLine();                System.out.println("Finished file " + f + ": Total counts is " + count);                StringBuilder sb = new StringBuilder();                sb.append("bgzip " + f + ".bed");                String command = sb.toString();                try {                    File dir = new File(new File(outputDir).getAbsolutePath());                    String[] cmdarry = {"/bin/bash", "-c", command};                    Process p = Runtime.getRuntime().exec(cmdarry, null, dir);                    p.waitFor();                } catch (Exception e) {                    e.printStackTrace();                }            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void setFile() {        String annotationFileDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/split";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/output";        File[] fs = new File(annotationFileDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "gff3");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("\\.")[0].split("s")[0].split("r")[1];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.parallelStream().forEach(f -> {            try {                GeneFeature gf = new GeneFeature(new File(annotationFileDir, "chr" + f + "split.gff3").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "chr" + f + "setFile").getAbsolutePath());                int set = 0;                for (int i = 0; i < gf.genes.length; i++) {                    int start = gf.getGeneStart(i);                    int startpoint = start - 1000000;                    while (startpoint < 0) {                        startpoint += 20000;                    }                    if (start - startpoint > 0) {                        set++;                    }                    if (set != 0) {                        bw.write("set" + set + " ");                    }                    int distance = start - startpoint;                    int setsub = distance / 20000;                    StringBuilder sb = new StringBuilder();                    for (int j = 0; j < setsub; j++) {                        int endpoint = startpoint + 20000;                        sb.append(f + ":" + startpoint + "-" + endpoint + ",");                        startpoint += 20000;                    }                    if (sb.length() > 0) {                        bw.write(sb.substring(0, sb.length() - 1).toString());                        bw.newLine();                    }                }            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void subVCF() {        String inputDir = "/data2/xiaohan/genotype_root/genotype_rootMaf005";        String infileDir = "/data2/xiaohan/GerpOrigin/subchr2.0";        String outputDir = "/data2/xiaohan/genotype_root/genotype_rootGerp2.0";        for (int i = 0; i < 42; i++) {            try {                int chr = i + 1;                BufferedReader br = IOUtils.getTextGzipReader(new File(infileDir, "chr" + chr + ".bed.gz").getAbsolutePath());                BufferedReader br1 = IOUtils.getTextGzipReader(new File(inputDir, "87B18.chr" + chr + ".maf005.vcf.gz").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "chr" + chr + ".vcf").getAbsolutePath());                HashSet scoreSet = new HashSet();                String temp = null;                String[] temps = null;                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    scoreSet.add(temps[1]);                }                String temp1 = null;                String[] temps1 = null;                while ((temp1 = br1.readLine()) != null) {                    if (temp1.startsWith("#")) {                        bw.write(temp1);                        bw.newLine();                        continue;                    }                    temps1 = temp1.split("\t");                    String pos = temps1[1];                    if (scoreSet.contains(pos)) {                        bw.write(temp1);                        bw.newLine();                    }                }                br.close();                br1.close();                bw.flush();                bw.close();                StringBuilder sb = new StringBuilder();                sb.append("bgzip chr" + chr + ".vcf");                String command = sb.toString();                try {                    File dir = new File(new File(outputDir).getAbsolutePath());                    String[] cmdarry = {"/bin/bash", "-c", command};                    Process p = Runtime.getRuntime().exec(cmdarry, null, dir);                    p.waitFor();                } catch (Exception e) {                    e.printStackTrace();                }            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void splitGFF() {        String inputFile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/wheat_v1.1_Lulab.gff3";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/split";        try {            String temp = null;            String[] temps = null;            BufferedReader br = IOUtils.getTextReader(inputFile);            BufferedWriter[] bw = new BufferedWriter[42];            for (int i = 0; i < bw.length; i++) {                int chrnumber = i + 1;                bw[i] = IOUtils.getTextWriter(new File(outputDir, "chr" + chrnumber + "split.gff3").getAbsolutePath());            }            while ((temp = br.readLine()) != null) {                if (temp.startsWith("##") && !temp.startsWith("###")) {                    for (int i = 0; i < bw.length; i++) {                        bw[i].write(temp);                        bw[i].newLine();                    }                    continue;                }                if (temp.startsWith("###")) {                    continue;                }                temps = temp.split("\t");                int number = 0;                int chr = Integer.parseInt(temps[0]);                if (chr != 0) {                    number = chr - 1;                }                String gene = temps[2];                if (gene.equals("gene")) {                    bw[number].write("###");                    bw[number].newLine();                }                bw[number].write(temp);                bw[number].newLine();            }            br.close();            for (int i = 0; i < bw.length; i++) {                bw[i].flush();                bw[i].close();            }        } catch (Exception e) {            e.printStackTrace();        }    }    public void getSnpsite() {        String inputDir = "/data2/xiaohan/genotype_root/genotype_rootMaf005";        String outputDir = "/data2/xiaohan/genotype_root/genotype_rootMaf005/SNPsite";        File[] fs = new File(inputDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "vcf.gz");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("\\.")[0];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String VCF = null;                String[] VCFs = null;                System.out.println("This is counting " + f + " file ……");                BufferedReader br = IOUtils.getTextGzipReader(new File(inputDir, "87B18." + f + ".maf005.vcf.gz").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, f + "_SNPsite.txt").getAbsolutePath());                while ((VCF = br.readLine()) != null) {                    if (VCF.startsWith("#")) {                        continue;                    }                    VCFs = VCF.split("\t");                    bw.write(VCFs[0] + "\t" + VCFs[1]);                    bw.newLine();                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void getUpStreamSNPlist() {//        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/test/VCF";//        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/test/output1";//        String annotationFileDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/split";//        String inputDir = "/data2/xiaohan/genotype_root/genotypeGerpfil";        String outputDir = "/data2/xiaohan/genotype_root/genotypeGerpfil/SNPdistance";        String annotationFileDir = "/data1/home/xiaohan/rareallele/SiPASpipeline/reference/splitgff3";        File[] fs = new File(inputDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, ".vcf.gz");        HashSet<String> nameSet = new HashSet();//        for (int i = 0; i < fs.length; i++) {//            if (fs[i].isHidden()) continue;//            String Name = fs[i].getName().split("\\.")[0];        nameSet.add("chr13");        nameSet.add("chr18");        nameSet.add("chr28");        nameSet.add("chr30");        nameSet.add("chr32");        nameSet.add("chr34");        nameSet.add("chr8");//            System.out.println(Name);//        }        nameSet.stream().forEach(f -> {            try {                String VCF = null;                String[] VCFs = null;                System.out.println("This is counting " + f + " file ……");                BufferedReader br = IOUtils.getTextGzipReader(new File(inputDir, f + ".vcf.gz").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, f + "_Up1MSNP.txt").getAbsolutePath());                int countline = 0;                System.out.println(countline);                while ((VCF = br.readLine()) != null) {                    if (VCF.startsWith("#")) {                        continue;                    }                    VCFs = VCF.split("\t");                    int chr = Integer.parseInt(VCFs[0]);                    int snpsite = Integer.parseInt(VCFs[1]);                    GeneFeature gf = new GeneFeature(new File(annotationFileDir, f + "split.gff3").getAbsolutePath());                    for (int i = 0; i < gf.genes.length; i++) {                        if (chr != gf.getGeneChromosome(i)) {                            continue;                        }                        int startsite = gf.getGeneStart(i);//                        System.out.println(startsite);//                        System.out.println(snpsite);                        int distance = startsite - snpsite;//                        System.out.println(distance);                        if (distance >= 0 && distance <= 1000000) {                            bw.write(gf.getGeneName(i) + "\t" + "snp_" + chr + "_" + snpsite + "\t" + distance);                            bw.newLine();                            bw.flush();                            continue;                        }                    }                    countline++;                    if (countline % 5 == 0) {                        System.out.println(countline);                    }                }                br.close();                bw.flush();                bw.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void distributioningenome() {//        String inputDir = "/data2/xiaohan/genotype_rootMaf005/SNPsite";//        String inputDir = "/data2/xiaohan/genotype_root/genotypeGerpfil/";//        String outputDir = "/data2/xiaohan/genotype_root/genotypeGerpfil/distribution";        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/test/VCF";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/test/output1";//        String annotationFileDir = "/data1/home/xiaohan/rareallele/SiPASpipeline/reference/splitgff3";//        String annotationFile = "/data1/publicData/wheat/annotation/gene/v1.1/wheat_v1.1_Lulab.gff3";        String annotationFile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/wheat_v1.1_Lulab.gff3";//        BufferedReader branno = IOUtils.getTextReader(annotationFile);        String anno = null;        String[] annos = null;        File[] fs = new File(inputDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, ".vcf.gz");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("\\.")[0];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                System.out.println("This is counting " + f + " file distribution ……");                long startTime = System.nanoTime();//                BufferedReader br = IOUtils.getTextReader(new File(inputDir, f + "_SNPsite.txt").getAbsolutePath());                BufferedReader br = IOUtils.getTextGzipReader(new File(inputDir, f + ".vcf.gz").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, f + "_distribution.txt").getAbsolutePath());                pgl.infra.anno.gene.GeneFeature gf = new pgl.infra.anno.gene.GeneFeature(annotationFile);                String temp = null;                int interC = 0;                int threeC = 0;                int fiveC = 0;                int CDSC = 0;                int introC = 0;                int count = 0;                int countline = 0;                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("#")) {                        continue;                    }                    int chr = Integer.parseInt(temp.split("\t")[0]);                    int pos = Integer.parseInt(temp.split("\t")[1]);//                    System.out.println(chr + "\t" + pos);                    for (int i = 0; i < 107891; i++) {                        if (chr != gf.getGeneChromosome(i)) {                            continue;                        }                        if (!gf.isWithinThisGene(i, chr, pos)) {                            interC++;                            continue;                        }                        int j = gf.getLongestTranscriptIndex(i);                        if (gf.get5UTRList(i, j).size() != 0) {                            List<Range> fU = gf.get5UTRList(i, j);                            for (int a = 0; a < fU.size(); a++) {                                int start = fU.get(a).getRangeStart();                                int end = fU.get(a).getRangeEnd();                                if (pos >= start && pos <= end) {                                    fiveC++;                                    continue;                                }                            }                        }                        if (gf.getCDSList(i, j).size() != 0) {                            List<Range> CDS = gf.getCDSList(i, j);                            for (int a = 0; a < CDS.size(); a++) {                                int start = CDS.get(a).getRangeStart();                                int end = CDS.get(a).getRangeEnd();                                if (pos >= start && pos <= end) {                                    CDSC++;                                    continue;                                }                            }                        }                        if (gf.get3UTRList(i, j).size() != 0) {                            List<Range> tU = gf.get3UTRList(i, j);                            for (int a = 0; a < tU.size(); a++) {                                int start = tU.get(a).getRangeStart();                                int end = tU.get(a).getRangeEnd();                                if (pos >= start && pos <= end) {                                    threeC++;                                    continue;                                }                            }                        }                        introC++;                    }                    countline++;                    if (countline % 10000 == 0) {                        System.out.println(countline);                    }                }                bw.write("intergenetic" + "\t" + interC);                bw.newLine();                bw.write("fiveUTR" + "\t" + fiveC);                bw.newLine();                bw.write("CDS" + "\t" + CDSC);                bw.newLine();                bw.write("Intro" + "\t" + introC);                bw.newLine();                bw.write("threeUTR" + "\t" + threeC);                bw.newLine();                bw.flush();                bw.close();                br.close();                System.out.println("Compeleting counting file " + f + " distribution : total time used : " + getTimeSpanNanoseconds(startTime));            } catch (Exception ex) {                ex.getStackTrace();                System.out.println(ex);            }        });    }    public void getlogFoldChange() {        String expressionDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable";        String expressionfile = "DEnorm7_87chr1-42_donor02.txt";        String outputFileDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score";//        String outputfile1 = "zscore";//原始的zscore的值//        String outputfile2 = "zscoreabs";//zscore值的绝对值//        String outputfile3 = "zscoreposiabs";//zscore>=0时保留绝对值//        String outputfile4 = "zscorenegaabs";//zscore<=0时保留绝对值        String outputfile1 = "lfc";//原始的zscore的值        String outputfile2 = "lfcabs";//zscore值的绝对值        String outputfile3 = "lfcposiabs";//zscore>=0时保留绝对值        String outputfile4 = "lfcnegaabs";//zscore<=0时保留绝对值        BufferedReader br = IOUtils.getTextReader(new File(expressionDir, expressionfile).getAbsolutePath());        BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputFileDir, expressionfile.replace(".txt", "_" + outputfile1 + ".txt")).getAbsolutePath());        BufferedWriter bw2 = IOUtils.getTextWriter(new File(outputFileDir, expressionfile.replace(".txt", "_" + outputfile2 + ".txt")).getAbsolutePath());        BufferedWriter bw3 = IOUtils.getTextWriter(new File(outputFileDir, expressionfile.replace(".txt", "_" + outputfile3 + ".txt")).getAbsolutePath());        BufferedWriter bw4 = IOUtils.getTextWriter(new File(outputFileDir, expressionfile.replace(".txt", "_" + outputfile4 + ".txt")).getAbsolutePath());        double[] exprs = new double[87];        String temp = null;        String title = null;        String[] temps = null;        int index = 90;        try {            title = br.readLine();            bw1.write(title);            bw1.newLine();            bw2.write(title);            bw2.newLine();            bw3.write(title);            bw3.newLine();            bw4.write(title);            bw4.newLine();            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                for (int i = 4; i < temps.length; i++) {                    exprs[i - 4] = Double.parseDouble(temps[i]);                }                Arrays.sort(exprs);//                double median = exprs[43];//                double variance = StatUtils.populationVariance(exprs);//                double sd = Math.sqrt(variance);                double mean = StatUtils.mean(exprs);                double[] zscores = new double[87];                double[] zscoresabs = new double[87];                for (int i = 0; i < exprs.length; i++) {//                    if(exprs[i] == 0 ){//                        zscores[i] = ;//                        zscoresabs[i] = Math.abs(zscores[i]);//                    }//                    else {//                        zscores[i] = exprs[i] / mean;                    zscores[i] = (Math.log10(exprs[i] / mean)) / Math.log10(2);                    zscoresabs[i] = Math.abs(zscores[i]);//                    }                }//                bw1.write(median + "\t");//                bw2.write(median + "\t");//                bw3.write(median + "\t");//                bw4.write(median + "\t");//                bw1.write(mean + "\t");//                bw2.write(mean + "\t");//                bw3.write(mean + "\t");//                bw4.write(mean + "\t");                for (int i = 0; i < 4; i++) {                    bw1.write(temps[i] + "\t");                    bw2.write(temps[i] + "\t");                    bw3.write(temps[i] + "\t");                    bw4.write(temps[i] + "\t");                }                for (int i = 0; i < exprs.length; i++) {                    bw1.write(String.format("%.5f", zscores[i]) + "\t");                    bw2.write(String.format("%.5f", zscoresabs[i]) + "\t");                }                for (int i = 0; i < exprs.length; i++) {                    if (zscores[i] > 0 && zscoresabs[i] > 0) {                        bw3.write(String.format("%.5f", zscoresabs[i]) + "\t");                        bw4.write(0 + "\t");                    } else if (zscores[i] < 0 && zscoresabs[i] > 0) {                        bw4.write(String.format("%.5f", zscoresabs[i]) + "\t");                        bw3.write(0 + "\t");                    } else if (zscores[i] == 0) {                        bw3.write(0 + "\t");                        bw4.write(0 + "\t");                    }                }                bw1.newLine();                bw2.newLine();                bw3.newLine();                bw4.newLine();                //max-value//                double max = Arrays.stream(zscoresabs).max().getAsDouble();            }            br.close();            bw1.flush();            bw2.flush();            bw3.flush();            bw4.flush();            bw1.close();            bw2.close();            bw3.close();            bw4.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getExpmedian() {        String expressionDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable";        String expressionfile = "DEnorm7_87chr1-42_donor02.txt";        String outputdir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable";        double[] exprs = new double[87];        String temp = null;        String title = null;        String[] temps = null;        BufferedReader br = IOUtils.getTextReader(new File(expressionDir, expressionfile).getAbsolutePath());        BufferedWriter bw = IOUtils.getTextWriter(new File(outputdir, "ExpMedian_donor02.txt").getAbsolutePath());        try {            while ((temp = br.readLine()) != null) {                if (temp.startsWith("#") || temp.startsWith("Chr")) continue;                temps = temp.split("\t");                for (int i = 4; i < temps.length; i++) {                    exprs[i - 4] = Double.parseDouble(temps[i]);                }                Arrays.sort(exprs);                double Median = exprs[43];                bw.write(temps[3] + "\t" + Median);                bw.newLine();            }            br.close();            bw.flush();            bw.newLine();        } catch (Exception e) {            e.printStackTrace();        }    }    private void getExprZscoreTable() {        String expressionDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable";        String expressionfile = "DEnorm7_87chr1-42.txt";        String outputFileDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score";        String outputfile1 = "zscore";//原始的zscore的值        String outputfile2 = "zscoreabs";//zscore值的绝对值        String outputfile3 = "zscoreposiabs";//zscore>=0时保留绝对值        String outputfile4 = "zscorenegaabs";//zscore<=0时保留绝对值        BufferedReader br = IOUtils.getTextReader(new File(expressionDir, expressionfile).getAbsolutePath());        BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputFileDir, expressionfile.replace(".txt", "_" + outputfile1 + ".txt")).getAbsolutePath());        BufferedWriter bw2 = IOUtils.getTextWriter(new File(outputFileDir, expressionfile.replace(".txt", "_" + outputfile2 + ".txt")).getAbsolutePath());        BufferedWriter bw3 = IOUtils.getTextWriter(new File(outputFileDir, expressionfile.replace(".txt", "_" + outputfile3 + ".txt")).getAbsolutePath());        BufferedWriter bw4 = IOUtils.getTextWriter(new File(outputFileDir, expressionfile.replace(".txt", "_" + outputfile4 + ".txt")).getAbsolutePath());        double[] exprs = new double[87];        String temp = null;        String title = null;        String[] temps = null;        try {            title = br.readLine();            bw1.write(title);            bw1.newLine();            bw2.write(title);            bw2.newLine();//            bw3.write(title);//            bw3.newLine();//            bw4.write(title);//            bw4.newLine();            while ((temp = br.readLine()) != null) {                if (temp.startsWith("#")) continue;                temps = temp.split("\t");                for (int i = 4; i < temps.length; i++) {                    exprs[i - 4] = Double.parseDouble(temps[i]);                }                double variance = StatUtils.populationVariance(exprs);                double sd = Math.sqrt(variance);                double mean = StatUtils.mean(exprs);                double[] zscores = new double[87];                double[] zscoresabs = new double[87];                for (int i = 0; i < exprs.length; i++) {                    zscores[i] = (exprs[i] - mean) / sd;                    zscoresabs[i] = Math.abs(zscores[i]);                }                for (int i = 0; i < 2; i++) {                    bw1.write(temps[i] + "\t");                    bw2.write(temps[i] + "\t");                    bw3.write(temps[i] + "\t");                    bw4.write(temps[i] + "\t");                }                for (int i = 2; i < 3; i++) {                    long end = Long.parseLong(temps[i]) - 1;                    bw1.write(String.valueOf(end));                    bw2.write(String.valueOf(end));                    bw3.write(String.valueOf(end));                    bw4.write(String.valueOf(end));                }                for (int i = 3; i < 4; i++) {                    bw1.write("\t" + temps[i]);                    bw2.write("\t" + temps[i]);                    bw3.write("\t" + temps[i]);                    bw4.write("\t" + temps[i]);                }                for (int i = 0; i < exprs.length; i++) {//                    bw1.write(String.format("%.5f", "\t" + zscores[i]));//                    bw2.write(String.format("%.5f", "\t" + zscoresabs[i]));                    bw1.write("\t" + String.valueOf(zscores[i]));                    bw2.write("\t" + String.valueOf(zscoresabs[i]));                }//                for (int i = 0; i < exprs.length; i++) {//                    if (zscores[i] >= 0 && zscoresabs[i] >= 0) {//                        bw3.write(String.format("%.5f", "\t" + zscoresabs[i]));//                        bw4.write(String.format("%.5f", "\t" + zscores[i]));//                    } else if (zscores[i] <= 0 && zscoresabs[i] >= 0) {//                        bw4.write(String.format("%.5f", "\t" + zscores[i]));//                        bw3.write(String.format("%.5f", "\t" + zscoresabs[i]));//                    }//                }                bw1.newLine();                bw2.newLine();                bw3.newLine();                bw4.newLine();                //max-value//                double max = Arrays.stream(zscoresabs).max().getAsDouble();            }            br.close();            bw1.flush();            bw2.flush();            bw3.flush();            bw4.flush();            bw1.close();            bw2.close();            bw3.close();            bw4.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getOutlierRareVariantsCount() {        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score/outliersgene.txt";        BufferedReader br = IOUtils.getTextReader(infile);        String rarecountfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score/log.txt";        BufferedReader br1 = IOUtils.getTextReader(rarecountfile);        String outfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score/Relativerisk/RelativeRisk.txt";        BufferedWriter bw = IOUtils.getTextWriter(outfile);        String temp = null;        String[] temps = null;        String temp1 = null;        String[] temps1 = null;        HashSet<String> geneNameSet = new HashSet<>();        HashMap<String, String[]> geneoverindexMap = new HashMap<>();        HashMap<String, String[]> geneunderindexMap = new HashMap<>();        try {            HashSet<String> geneSet = new HashSet<>();            HashMap<String, Integer> geneindexMap = new HashMap<>();            HashMap<String, Double> genelargeMap = new HashMap<>();            HashMap<String, Double> genelargeabsMap = new HashMap<>();            while ((temp = br.readLine()) != null) {                if (temp.startsWith("gene")) {                    continue;                }                temps = temp.split("\t");                String geneName = temps[0];                double large = Double.parseDouble(temps[2]);                double largeabs = Double.parseDouble(temps[3]);                int index = Integer.parseInt(temps[4]);                if (largeabs > 3) {                    geneSet.add(geneName);                    geneindexMap.put(geneName, index);                    genelargeabsMap.put(geneName, largeabs);                    genelargeMap.put(geneName, large);                }            }            DecimalFormat dc = new DecimalFormat("0.000");//            double relativerisk = 0.0;            while ((temp1 = br1.readLine()) != null) {                if (temp1.startsWith("gene")) {                    continue;                }                temps1 = temp1.split("\t");                String geneName = temps1[0];                StringBuilder sb = new StringBuilder();//                String relativerisk = null;                if (geneNameSet.contains(geneName)) {                    int index = geneindexMap.get(geneName);                    int totalcount = 0;                    for (int i = 1; i < temps1.length; i++) {                        totalcount += Integer.parseInt(temps[i]);                    }                    int outliercount = Integer.parseInt(temps[index]);                    totalcount -= outliercount;                    sb.append(geneName).append("\t");                    sb.append(genelargeMap.get(geneName)).append("\t");                    sb.append(genelargeabsMap.get(geneName)).append("\t");                    sb.append(outliercount).append("\t");                    sb.append(totalcount).append("\t");                    sb.append(dc.format(outliercount / totalcount)).append("\t");                    bw.write(sb.toString());                    bw.newLine();                }            }            br.close();            br1.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getOutlierGene() {        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score/DEnorm7_87chr1-42_donor02_zscore.txt";        BufferedReader br = IOUtils.getTextReader(infile);        String rarecountfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/1Mupgene/donor02/donor02_600k_800k_RACount.txt";        BufferedReader br1 = IOUtils.getTextReader(rarecountfile);        String outfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score/Relativerisk/RelativeRisk.txt";        BufferedWriter bw = IOUtils.getTextWriter(outfile);        String temp = null;        String[] temps = null;        String temp1 = null;        String[] temps1 = null;        HashSet<String> geneNameSet = new HashSet<>();        HashMap<String, String[]> geneoverindexMap = new HashMap<>();        HashMap<String, String[]> geneunderindexMap = new HashMap<>();        try {            while ((temp = br.readLine()) != null) {                if (temp.startsWith("Chr")) {                    continue;                }                temps = temp.split("\t");                String gene = temps[0];                HashSet<String> indexover = new HashSet();                HashSet<String> indexunder = new HashSet();                for (int i = 4; i < temps.length; i++) {                    double zscore = Double.parseDouble(temps[i]);                    if (zscore > 2) {                        indexover.add(String.valueOf(i - 3));                    }                    if (zscore < -2) {                        indexunder.add(String.valueOf(i - 3));                    }                }                String[] over = indexover.toArray(new String[indexover.size()]);                String[] under = indexunder.toArray(new String[indexunder.size()]);                geneoverindexMap.put(gene, over);                geneunderindexMap.put(gene, under);            }            DecimalFormat dc = new DecimalFormat("0.000");//            double relativerisk = 0.0;            while ((temp1 = br1.readLine()) != null) {                if (temp1.startsWith("gene")) {                    continue;                }                temps1 = temp1.split("\t");                String geneName = temps1[0];                StringBuilder sb = new StringBuilder();//                String relativerisk = null;                if (geneNameSet.contains(geneName)) {                    String[] overindex = geneoverindexMap.get(geneName);                    String[] underindex = geneunderindexMap.get(geneName);                    Set overSet = new HashSet(Arrays.asList(overindex));                    Set underSet = new HashSet(Arrays.asList(underindex));                    int overcount = 0;                    int undercount = 0;                    int othercount = 0;                    int over = 0;                    int under = 0;                    int other = 0;                    for (int i = 1; i < temps1.length; i++) {                        if (overSet.contains(i)) {                            over += Integer.parseInt(temps1[i]);                            overcount++;                        } else if (underSet.contains(i)) {                            undercount += Integer.parseInt(temps1[i]);                            under++;                        } else {                            othercount += Integer.parseInt(temps1[i]);                            other++;                        }                    }                    sb.append(geneName).append("\t").append(dc.format(over / overcount)).append("\t");                    sb.append(dc.format(other / othercount)).append("\t");                    sb.append(dc.format(under / undercount));                    bw.write(sb.toString());                    bw.newLine();                }            }            br.close();            br1.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getZscoreCountEnrichment() {        String countFile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/1Mupgene/donor02/donor02_0k_1000_RACount.txt";        String zscoreFile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score/DEnorm7_87chr1-42_donor02_Zscore.txt";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/enrichmentTable/1Mupgene/quatile";        BufferedReader brcount = IOUtils.getTextReader(countFile);        BufferedReader brzscore = IOUtils.getTextReader(zscoreFile);        BufferedWriter bwcount = IOUtils.getTextWriter(new File(outputDir, "donor02_enrichment_Table.txt").getAbsolutePath());        String temp = null;        String[] temps = null;        String zscore = null;        String[] zscores = new String[91];        double[] zscoresNum = new double[91];        try {            bwcount.write("Gene" + "\t" + "Underexpressed" + "\t" + "nonOutlier" + "\t" + "Overexpressed");            bwcount.newLine();            brcount.readLine();            brzscore.readLine();            while ((temp = brcount.readLine()) != null) {                zscore = brzscore.readLine();                zscores = zscore.split("\t");                for (int i = 4; i < zscores.length; i++) {                    zscoresNum[i - 4] = Double.parseDouble(zscores[i]);                }                temps = temp.split("\t");                String geneName = temps[0];//                System.out.println(geneName);                String geneName1 = zscores[3];//                System.out.println(geneName1);                int Over = 0;                int non = 0;                int Under = 0;                int Overcount = 0;                int noncount = 0;                int Undercount = 0;                double o = NA;                double u = NA;                double n = NA;                if (geneName.equals(geneName1)) {                    System.out.println(geneName);//                    min = Collections.min(Arrays.asList(ArrayUtils.toObject(zscores)));                    for (int i = 4; i < zscores.length; i++) {                        double min = Arrays.stream(zscoresNum).min().getAsDouble();                        double max = Arrays.stream(zscoresNum).max().getAsDouble();                        double value = Double.parseDouble(zscores[i]);                        if (value == max && Math.abs(value) >= 2) {                            Over = Integer.parseInt(temps[i - 3]);                            Overcount++;                        }                        if (value == min && Math.abs(value) >= 2) {                            System.out.println(temps[i - 3]);                            Under = Integer.parseInt(temps[i - 3]);                            Undercount++;                        }                        if (value < max && value > min) {                            non = non + Integer.parseInt(temps[i - 3]);                            noncount++;                        }                    }//                    System.out.println(Over+"\t"+non+"\t"+Under);//                    System.out.println(Overcount+"\t"+noncount+"\t"+Undercount);                }                if (Overcount > 0) {                    o = Over / Overcount;                }                if (noncount > 0) {                    n = non / noncount;                }                if (Undercount > 0) {                    u = Under / Undercount;                }                bwcount.write(geneName + "\t" + u + "\t" + n + "\t" + o);                bwcount.newLine();            }            brcount.close();            brzscore.close();            bwcount.flush();            bwcount.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void mkFileDir() {        for (int i = 0; i < this.subDir.length; i++) {            new File(this.rareAlleleCountDir, subDir[i]).mkdir();        }    }    public void mergeUprareCount() {        StringBuilder sb = new StringBuilder();        for (int i = 0; i < FileNames.length; i++) {            sb.append("cat chr*_" + FileNames[i] + "_RACount.txt | sort | uniq > " + this.rareAlleleCountDir + "/" + subDir[1] + "/all_" + FileNames[i] + "_RACount.txt \n");            String command = sb.toString();            try {                File dir = new File(new File(this.rareAlleleCountDir, subDir[0]).getAbsolutePath());                String[] cmdarry = {"/bin/bash", "-c", command};                Process p = Runtime.getRuntime().exec(cmdarry, null, dir);                p.waitFor();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getdonor02File() {        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/conserved/sorted.txt";//        String inputDir = this.rareAlleleCountDir + "/" + subDir[1];        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/donor02GeneName.txt";//        String outputDir = this.rareAlleleCountDir + "/" + subDir[2];        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/conserved/";//        File[] fs = new File(inputDir).listFiles();//        List<File> fList = new ArrayList(Arrays.asList());//        fs = IOUtils.listFilesStartsWith(fs, "all");//        HashSet<String> nameSet = new HashSet();//        for (int i = 0; i < fs.length; i++) {//            if (fs[i].isHidden()) continue;//            String Name = fs[i].getName();//            nameSet.add(Name);//            System.out.println(Name);//        }//        nameSet.stream().forEach(f -> {        try {            String info = null;            String temp = null;            String[] temps = null;            BufferedReader brinfo = IOUtils.getTextReader(infor);//                BufferedReader br = IOUtils.getTextReader(new File(inputDir, f).getAbsolutePath());            BufferedReader br = IOUtils.getTextReader(infile);//                BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, f.replace("all", "donor02")).getAbsolutePath());            BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "sorted_donor02.txt").getAbsolutePath());            HashSet<String> subGeneSet = new HashSet();            String[] geneName = null;            HashMap<String, String> tempGene = new HashMap<>();            int countline = 0;            while ((info = brinfo.readLine()) != null) {                subGeneSet.add(info);                countline++;            }            geneName = subGeneSet.toArray(new String[subGeneSet.size()]);            Arrays.sort(geneName);            String title = br.readLine();            bw.write(title);            bw.newLine();            while ((temp = br.readLine()) != null) {//                    if(temp.startsWith("c") || temp.startsWith("#") || temp.startsWith("C"))continue;                temps = temp.split("\t");                tempGene.put(temps[0], temp);            }            for (int i = 0; i < geneName.length; i++) {                System.out.println(geneName[i]);                bw.write(tempGene.get(geneName[i]));                bw.newLine();            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }//        });    }    public void extracthomoPheno() {        String inputfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/DEnorm7_87chr1-42.txt";        String infor = this.homoGeneNamelistfile;        String outputDirhomo = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/";        try {            String info = null;            String[] infos = null;            String temp = null;            String[] temps = null;            BufferedReader brinfo = IOUtils.getTextReader(infor);            BufferedReader br = IOUtils.getTextReader(new File(inputfile).getAbsolutePath());            BufferedWriter bwAhomo = IOUtils.getTextWriter(new File(outputDirhomo, "Ahomo_DEnorm7_87chr1-42.txt").getAbsolutePath());            BufferedWriter bwBhomo = IOUtils.getTextWriter(new File(outputDirhomo, "Bhomo_DEnorm7_87chr1-42.txt").getAbsolutePath());            BufferedWriter bwDhomo = IOUtils.getTextWriter(new File(outputDirhomo, "Dhomo_DEnorm7_87chr1-42.txt").getAbsolutePath());            HashSet<String> AsubGeneSet = new HashSet();            HashSet<String> BsubGeneSet = new HashSet();            HashSet<String> DsubGeneSet = new HashSet();            while ((info = brinfo.readLine()) != null) {                infos = info.split("\t");                AsubGeneSet.add(infos[0]);                BsubGeneSet.add(infos[1]);                DsubGeneSet.add(infos[2]);            }            String title = br.readLine();            bwAhomo.write(title);            bwBhomo.write(title);            bwDhomo.write(title);            bwAhomo.newLine();            bwBhomo.newLine();            bwDhomo.newLine();            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                String Name = temps[3];                if (AsubGeneSet.contains(Name)) {                    bwAhomo.write(temp);                    bwAhomo.newLine();                }                if (BsubGeneSet.contains(Name)) {                    bwBhomo.write(temp);                    bwBhomo.newLine();                }                if (DsubGeneSet.contains(Name)) {                    bwDhomo.write(temp);                    bwDhomo.newLine();                }            }            br.close();            brinfo.close();            bwAhomo.flush();            bwAhomo.close();            bwBhomo.flush();            bwBhomo.close();            bwDhomo.flush();            bwDhomo.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getsubdonor02File() {        String inputDir = this.rareAlleleCountDir + "/" + subDir[2];//        String inputDir = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/donor02";        String infor = this.homoGeneNamelistfile;        String outputDirsub = this.rareAlleleCountDir + "/" + subDir[3];        String outputDirhomo = this.rareAlleleCountDir + "/" + subDir[4];//        String outputDirsub = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/donor02/sub";//        String outputDirhomo = "/data1/home/xiaohan/rareallele/rankcorrelation/root/expressionTable/donor02/subhomo";        File[] fs = new File(inputDir).listFiles();        List<File> fList = new ArrayList(Arrays.asList());//        fs = IOUtils.listFilesStartsWith(fs, "donor02");//        String prefix = "DE";        String prefix = "donor";        fs = IOUtils.listFilesStartsWith(fs, prefix);        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName();            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String info = null;                String[] infos = null;                String temp = null;                String[] temps = null;                BufferedReader brinfo = IOUtils.getTextReader(infor);                BufferedReader br = IOUtils.getTextReader(new File(inputDir, f).getAbsolutePath());//                BufferedWriter bwA = IOUtils.getTextWriter(new File(outputDirsub, f.replace("donor02", "A_donor02")).getAbsolutePath());//                BufferedWriter bwB = IOUtils.getTextWriter(new File(outputDirsub, f.replace("donor02", "B_donor02")).getAbsolutePath());//                BufferedWriter bwD = IOUtils.getTextWriter(new File(outputDirsub, f.replace("donor02", "D_donor02")).getAbsolutePath());//                BufferedWriter bwAhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace("donor02", "Ahomo_donor02")).getAbsolutePath());//                BufferedWriter bwBhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace("donor02", "Bhomo_donor02")).getAbsolutePath());//                BufferedWriter bwDhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace("donor02", "Dhomo_donor02")).getAbsolutePath());                BufferedWriter bwA = IOUtils.getTextWriter(new File(outputDirsub, f.replace(prefix, "A_" + prefix)).getAbsolutePath());                BufferedWriter bwB = IOUtils.getTextWriter(new File(outputDirsub, f.replace(prefix, "B_" + prefix)).getAbsolutePath());                BufferedWriter bwD = IOUtils.getTextWriter(new File(outputDirsub, f.replace(prefix, "D_" + prefix)).getAbsolutePath());                BufferedWriter bwAhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace(prefix, "Ahomo_" + prefix)).getAbsolutePath());                BufferedWriter bwBhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace(prefix, "Bhomo_" + prefix)).getAbsolutePath());                BufferedWriter bwDhomo = IOUtils.getTextWriter(new File(outputDirhomo, f.replace(prefix, "Dhomo_" + prefix)).getAbsolutePath());                HashSet<String> AsubGeneSet = new HashSet();                HashSet<String> BsubGeneSet = new HashSet();                HashSet<String> DsubGeneSet = new HashSet();                while ((info = brinfo.readLine()) != null) {                    infos = info.split("\t");                    AsubGeneSet.add(infos[0]);                    BsubGeneSet.add(infos[1]);                    DsubGeneSet.add(infos[2]);                }                String title = br.readLine();                bwA.write(title);                bwB.write(title);                bwD.write(title);                bwA.newLine();                bwB.newLine();                bwD.newLine();                bwAhomo.write(title);                bwBhomo.write(title);                bwDhomo.write(title);                bwAhomo.newLine();                bwBhomo.newLine();                bwDhomo.newLine();                while ((temp = br.readLine()) != null) {                    temps = temp.split("\t");                    String Name = temps[0].substring(8, 9);                    String Name1 = temps[0];                    if (Name.equals("A")) {                        bwA.write(temp);                        bwA.newLine();                    }                    if (Name.equals("B")) {                        bwB.write(temp);                        bwB.newLine();                    }                    if (Name.equals("D")) {                        bwD.write(temp);                        bwD.newLine();                    }                    if (AsubGeneSet.contains(Name1)) {                        bwAhomo.write(temp);                        bwAhomo.newLine();                    }                    if (BsubGeneSet.contains(Name1)) {                        bwBhomo.write(temp);                        bwBhomo.newLine();                    }                    if (DsubGeneSet.contains(Name1)) {                        bwDhomo.write(temp);                        bwDhomo.newLine();                    }                }                br.close();                brinfo.close();                bwA.flush();                bwAhomo.flush();                bwA.close();                bwAhomo.close();                bwB.flush();                bwBhomo.flush();                bwB.close();                bwBhomo.close();                bwD.flush();                bwDhomo.flush();                bwD.close();                bwDhomo.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void countExpDonor02() {        String infileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/DEnorm7_87chr1-42.txt";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/";        try {            String temp = null;            String[] temps = null;            BufferedReader br = IOUtils.getTextReader(infileS);            BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "GeneNameexp.txt").getAbsolutePath());            while ((temp = br.readLine()) != null) {                if (temp.startsWith("#")) {                    continue;                }                temps = temp.split("\t");                int Expcount = 0;                for (int i = 4; i < temps.length; i++) {                    if (Double.parseDouble(temps[i]) != 0) {                        Expcount++;                    }                }                if (Expcount > 17) {                    bw.write(temp);                    bw.newLine();                }            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getGeneRange() {        String inputfileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/wheat_v1.1_Lulab.gff3";        String outputfielS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/refer/refgene.txt";//        String outputfielS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/refer/Geneinformation.txt";        GeneFeature df = new GeneFeature(inputfileS);        df.writeFile(outputfielS);//        df.writeGeneSequence();    }    public void reheader() {        String infileS = "/data2/xiaohan/RNAgenotype/RNA.all.temp.vcf";//输入的VCF文件        String outfileS = "/data2/xiaohan/RNAgenotype/RNA.all.reheader.vcf";//        BufferedReader br = IOUtils.getTextReader(infileS);        BufferedWriter bw = IOUtils.getTextWriter(outfileS);        String temp = null;        String[] temps = null;        try {            while ((temp = br.readLine()) != null) {                if (temp.startsWith("##")) {                    bw.write(temp);                    bw.newLine();                }                if (temp.startsWith("#C")) {                    temps = temp.split("\t");                    for (int i = 0; i < 9; i++) {                        bw.write(temps[i] + "\t");                    }                    for (int i = 9; i < temps.length; i++) {                        bw.write(temps[i].replace("B", "RNAB") + "\t");                    }                    bw.newLine();                } else {                    bw.write(temp);                    bw.newLine();                }            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getSamePosition() {        String inputDirRNA = "/data1/home/xiaohan/rareallele/Hapscanner/outputDir/mis01VCF";        String inputDirDNA = "/data2/xiaohan/DNAgenotype";        String outputDirRNA = "/data2/xiaohan/RNAgenotype";        String outputDirDNA = "/data2/xiaohan/DNAgenotype";//        String inputDirRNA = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/changename/inputDirRNA";//        String inputDirDNA = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/changename/inputDirDNA";//        String outputDirRNA = "/Users/yxh/Documents/RareAllele/004te..st/SiPASpipeline/input/changename/outputDirRNA";//        String outputDirDNA = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/changename/outputDirDNA";        String tempRNA = null;        String[] tempRNAs = null;        String tempDNA = null;        String[] tempDNAs = null;        String tempRNA1 = null;        String[] tempRNAs1 = null;        String tempDNA1 = null;        String[] tempDNAs1 = null;        for (int i = 0; i < 42; i++) {            int chrNumber = i + 1;//            int chrNumber = 1;            try {                ////                BufferedReader brRNA = IOUtils.getTextReader(new File(inputDirRNA, "chr" + chrNumber + ".mis01.recode.vcf").getAbsolutePath());//                HashSet<String> PositionSetRNA = new HashSet();                HashSet<String> PositionSetDNA = new HashSet();                HashMap<String, String> positionRNA = new HashMap();                HashMap<String, String> positionDNA = new HashMap();//                while ((tempRNA = brRNA.readLine()) != null) {//                    if (tempRNA.startsWith("#")) continue;//                    tempRNAs = tempRNA.split("\t");//                    String position1 = tempRNAs[1];//                    PositionSetRNA.add(position1);//                    positionRNA.put(position1, tempRNA);//                }//                brRNA.close();                BufferedReader brDNA = IOUtils.getTextReader(new File(inputDirDNA, "DNAchr" + chrNumber + ".vcf").getAbsolutePath());                while ((tempDNA = brDNA.readLine()) != null) {                    if (tempDNA.startsWith("#")) {                        continue;                    }                    tempDNAs = tempDNA.split("\t");                    String position2 = tempDNAs[1];                    PositionSetDNA.add(position2);                    positionDNA.put(position2, tempDNA);                }                brDNA.close();//                //                BufferedReader brRNA1 = IOUtils.getTextReader(new File(inputDirRNA, "chr" + chrNumber + ".mis01.recode.vcf").getAbsolutePath());                BufferedWriter bwRNA = IOUtils.getTextWriter(new File(outputDirRNA, "RNAchr" + chrNumber + ".vcf").getAbsolutePath());                int count = 0;                System.out.println("This is writing chr" + chrNumber + " File……………………………………………………………………………………………………………………");                while ((tempRNA1 = brRNA1.readLine()) != null) {                    if (tempRNA1.startsWith("#")) {                        bwRNA.write(tempRNA1);                        bwRNA.newLine();                        continue;                    }                    tempRNAs1 = tempRNA1.split("\t");                    String positionR = tempRNAs1[1];                    if (PositionSetDNA.contains(positionR)) {                        bwRNA.write(tempRNA1);                        bwRNA.newLine();                    }                    if (count % 5000 == 1) {                        System.out.println(count);                    }                }                brRNA1.close();                bwRNA.flush();                bwRNA.close();//                BufferedReader brDNA1 = IOUtils.getTextGzipReader(new File(inputDirDNA, chrNumber + ".92.B18.recode.vcf.gz").getAbsolutePath());//                BufferedWriter bwDNA = IOUtils.getTextWriter(new File(outputDirDNA, "DNAchr" + chrNumber + ".vcf").getAbsolutePath());//                int count = 0;//                System.out.println("This is writing chr"+chrNumber+" File……………………………………………………………………………………………………………………");//                while ((tempDNA1 = brDNA1.readLine()) != null) {//                    count ++;//                    if (tempDNA1.startsWith("#")) {//                        bwDNA.write(tempDNA1);//                        bwDNA.newLine();//                        continue;//                    }//                    tempDNAs1 = tempDNA1.split("\t");//                    String positionD = tempDNAs1[1];//                    if (PositionSetRNA.contains(positionD)) {//                        bwDNA.write(tempDNA1);//                        bwDNA.newLine();//                    }//                    if(count % 5000 ==1){//                        System.out.println(count);//                    }//                }//                brDNA1.close();//                bwDNA.flush();bwDNA.close();            } catch (Exception e) {                e.printStackTrace();            }        }    }    public void getIBdistane() {        String infileS1 = "/data2/xiaohan/DNAgenotype/DNA.all.sort.vcf";        String infileS2 = "/data2/xiaohan/RNAgenotype/RNA.all.sort.vcf";//        String infileS1 = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/DNA.all.sort.vcf";//        String infileS2 = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/RNA.all.sort.vcf";        String ibsOutfileS = "/data2/xiaohan/check.txt";//        String ibsOutfileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/check.txt";        GenotypeGrid g1 = new GenotypeGrid(infileS1, GenoIOFormat.VCF);        GenotypeGrid g2 = new GenotypeGrid(infileS2, GenoIOFormat.VCF);        GenotypeGrid g = GenotypeOperation.mergeGenotypesByTaxon(g1, g2);        SumTaxaDivergence std = new SumTaxaDivergence(g);        std.writeDxyMatrix(ibsOutfileS, IOFileFormat.Text);        g.getIBSDistanceMatrix();    }    public void getDensityIBS() {        String infile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/check.txt";        String outfile = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/input/IBSdensity.txt";        BufferedReader br = IOUtils.getTextReader(infile);        BufferedWriter bw = IOUtils.getTextWriter(outfile);        String temp = null;        String[] temps = null;        int countlines = 0;        try {            bw.write("IBSdistance");            bw.newLine();            while ((temp = br.readLine()) != null) {                if (!temp.startsWith("B")) {                    continue;                }                temps = temp.split("\t");                if (countlines < 92) {                    countlines++;                    bw.write(temps[countlines + 92]);                    bw.newLine();                }            }            br.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void extractsubPheno() {        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable";        String infileS = "DEnorm7_87chr1-42_donor02.txt";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable";//        File[] fs = new File(inputDir).listFiles();//        List<File> fList = new ArrayList(Arrays.asList());//        fs = IOUtils.listFilesStartsWith(fs, "DE");//        HashSet<String> nameSet = new HashSet();//        for (int i = 0; i < fs.length; i++) {//            if (fs[i].isHidden()) continue;//            String Name = fs[i].getName();//            nameSet.add(Name);//            System.out.println(Name);//        }//        nameSet.stream().forEach(f -> {        try {            String temp = null;            String[] temps = null;//                String[] rank = new String[5000];//                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());//                BufferedWriter bw1 = IOUtils.getTextWriter(new File(inputDir, "A_" + f + "_count.txt").getAbsolutePath());//                BufferedWriter bw2 = IOUtils.getTextWriter(new File(inputDir, "B_" + f + "_count.txt").getAbsolutePath());//                BufferedWriter bw3 = IOUtils.getTextWriter(new File(inputDir, "D_" + f + "_count.txt").getAbsolutePath());            BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, infileS).getAbsolutePath());            BufferedWriter bw1 = IOUtils.getTextWriter(new File(outputDir, infileS.replace("DE", "A_DE")).getAbsolutePath());            BufferedWriter bw2 = IOUtils.getTextWriter(new File(outputDir, infileS.replace("DE", "B_DE")).getAbsolutePath());            BufferedWriter bw3 = IOUtils.getTextWriter(new File(outputDir, infileS.replace("DE", "D_DE")).getAbsolutePath());            temp = br1.readLine();            bw1.write(temp);            bw2.write(temp);            bw3.write(temp);            bw1.newLine();            bw2.newLine();            bw3.newLine();            while ((temp = br1.readLine()) != null) {//                    if (!temp.startsWith("")) continue;                temps = temp.split("\t");                String geneName = temps[3];                String subgenome = geneName.substring(8, 9);                if (subgenome.equals("A")) {                    bw1.write(temp);                    bw1.newLine();                }                if (subgenome.equals("B")) {                    bw2.write(temp);                    bw2.newLine();                }                if (subgenome.equals("D")) {                    bw3.write(temp);                    bw3.newLine();                }            }            br1.close();            bw1.flush();            bw1.close();            bw2.flush();            bw2.close();            bw3.flush();            bw3.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void extractTopPheno() {//        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/";        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/rareAlleleCount/1Mupgene/donor02";//        String infileS = "DEnorm7_87chr1-42_donor02.txt";        String infileS = "donor02_0k_1000_RACount.txt";//        String outfileS = "Top5000_S3.txt";//        String outfileS = "DEnorm7_87chr1-42_donor02_4001_5000.txt";        String outfileS = "10001-2000/donor02_0k_1000_RACount_10001_2000.txt";////        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7";//        String infileS = "countResult7_DESeq2.txt";//        String outfileS = "Top5000_S7.txt";//        String outfileS = "Top5000-10000_S7.txt";//        String infor = "Top_5000_median_exp_genes.txt";        String infor = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/Top_10001_to_2000_median_exp_genes.txt";        try {            String temp = null;            String[] temps = null;            HashSet GeneSet = new HashSet();            HashMap<String, Integer> geneMap = new HashMap();            BufferedReader br = IOUtils.getTextReader(new File(infor).getAbsolutePath());            System.out.println(new File(infor).getAbsolutePath());            while ((temp = br.readLine()) != null) {                if (temp.startsWith("x")) {                    continue;                }                temps = temp.split("\t");                System.out.println(temps[1]);                GeneSet.add(temps[1]);                geneMap.put(temps[1], Integer.parseInt(temps[0]));                continue;            }            String temp1 = null;            String[] temps1 = null;            String[] rank = new String[1000];            BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, infileS).getAbsolutePath());            BufferedWriter bw = IOUtils.getTextWriter(new File(inputDir, outfileS).getAbsolutePath());            while ((temp1 = br1.readLine()) != null) {                temps1 = temp1.split("\t");                if (temp1.startsWith("c") || temp1.startsWith("g")) {                    bw.write(temp1);                    bw.newLine();                }                if (GeneSet.contains(temps1[0])) {                    String gene = temps1[0];                    int index = geneMap.get(gene);                    rank[index - 1] = temp1;                }            }            for (int i = 0; i < rank.length; i++) {                bw.write(rank[i]);                bw.newLine();            }            br1.close();            bw.flush();            bw.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void extractTopSNP() {//        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/snp_count/major_SNP_site";//        String inforDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S3/expressionTable";        String inputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/snp_count/major_SNP_site";        String inforDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable";        String infor = "Top_5000_median_exp_genes.txt";//        String infor = "Top_5001_to_10000_median_exp_genes.txt";        File[] fs = new File(inputDir).listFiles();        List<File> fList = new ArrayList(Arrays.asList());        fs = IOUtils.listFilesStartsWith(fs, "all");        HashSet<String> nameSet = new HashSet();        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("_")[1] + "_" + fs[i].getName().split("_")[2];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach(f -> {            try {                String temp = null;                String[] temps = null;                HashSet GeneSet = new HashSet();                HashMap<String, Integer> geneMap = new HashMap();                BufferedReader br = IOUtils.getTextReader(new File(inforDir, infor).getAbsolutePath());                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("x")) {                        continue;                    }                    temps = temp.split("\t");                    GeneSet.add(temps[1]);                    geneMap.put(temps[1], Integer.parseInt(temps[0]));                    continue;                }                String temp1 = null;                String[] temps1 = null;                String[] rank = new String[5000];                BufferedReader br1 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());                BufferedReader br2 = IOUtils.getTextReader(new File(inputDir, "all_" + f + "_count.txt").getAbsolutePath());//                    BufferedWriter bw = IOUtils.getTextWriter(new File(inputDir, "Top5000_" +f+ "_count.txt").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextWriter(new File(inputDir, "Top5000-10000_" + f + "_count.txt").getAbsolutePath());                while ((temp1 = br2.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (temps1[0].startsWith("gene")) {                        bw.write(temp1);                        bw.newLine();                    }                }                while ((temp1 = br1.readLine()) != null) {                    temps1 = temp1.split("\t");                    if (GeneSet.contains(temps1[0])) {                        String gene = temps1[0];                        int index = geneMap.get(gene);                        rank[index - 1] = temp1;                    }                }                for (int i = 0; i < rank.length; i++) {                    bw.write(rank[i]);                    bw.newLine();                }                br1.close();                br2.close();                bw.flush();                bw.close();                br.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public void SplitPhenoBychr() {        String infileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score/DEnorm7_87chr1-42_zscore.txt";        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionTable/z-score/chr";//        String infileS = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/expressionboxcox7.txt";//        String outputDir = "/Users/yxh/Documents/RareAllele/004test/SiPASpipeline/data/S7/splitexpression";        try {            BufferedReader br = pgl.infra.utils.IOUtils.getTextReader(infileS);            BufferedWriter[] bw = new BufferedWriter[43];            BufferedWriter[] bw1 = new BufferedWriter[43];            for (int i = 0; i < 43; i++) {//                bw[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S7expression" + i + ".bed").getAbsolutePath());//                bw1[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S7expression" + i + ".txt").getAbsolutePath());                bw[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S7expression" + i + ".bed").getAbsolutePath());                bw1[i] = pgl.infra.utils.IOUtils.getTextWriter(new File(outputDir, "S7expression" + i + ".txt").getAbsolutePath());            }            String temp = null;            String[] temps = null;            temp = br.readLine();            for (int i = 0; i < 43; i++) {                bw[i].write(temp);                bw[i].newLine();                bw1[i].write(temp);                bw1[i].newLine();            }            while ((temp = br.readLine()) != null) {                temps = temp.split("\t");                int count = Integer.parseInt(temps[0]);                bw[count].write(temp);                bw[count].newLine();                bw1[count].write(temp);                bw1[count].newLine();            }            for (int i = 0; i < 43; i++) {                bw[i].flush();                bw[i].close();                bw1[i].flush();                bw1[i].close();            }            br.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getupstreamSNPcount() {        String VCFfileDir = "/data2/xiaohan/genotype_root/genotype_rootMaf005";        String outputDir = "/data2/xiaohan/VCF_information/count/";//        String positionfileDir = "";        String annotationfile = "/data1/home/xiaohan/rareallele/SiPASpipeline/reference/wheat_v1.1_Lulab.gff3";//        S3//        String name = "B18-E007,B18-E010,B18-E011,B18-E014,B18-E016,B18-E018,B18-E029,B18-E032,B18-E035,B18-E043,B18-E045,B18-E046,B18-E049,B18-E051,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E089,B18-E097,B18-E099,B18-E115,B18-E118,B18-E124,B18-E127,B18-E134,B18-E138,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E228,B18-E233,B18-E236,B18-E237,B18-E242,B18-E244,B18-E245,B18-E252,B18-E253,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E348,B18-E355,B18-E356,B18-E357";//        S7        //建立对应的name位点表        String[] Samplenames = Samplename.split(",");        //对于多个区间"i"，多个chr"j"进行rare allele count计数        System.out.println("This program is going to calculate minor allele count in every gene in different distance to TSS");        System.out.println("The calculation form is : 1.Deciding the minor allele: 0 or 1");        System.out.println("                          2.calculate the MAF and discard SNPs which MAF > 0.05");        System.out.println("                          3.0/0 or 1/1 will be counting as 0 allele count or 2 allele count decided by which one is minor allele");        System.out.println("                          4.Sum of every snp upstream genes");        System.out.println("                          5.Output file form : gene B18-E007    B18-E009");        System.out.println("                                               TraeCS4D355900 0 12");        HashSet<String> nameSet = new HashSet();        File[] fs = new File(VCFfileDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "vcf.gz");        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }            String Name = fs[i].getName().split("\\.")[1].replace("chr", "");            if (Integer.parseInt(Name) == 42) {                nameSet.add(Name);                System.out.println(Name);            }        }        nameSet.stream().forEach((String j) -> {            for (int fn = 0; fn < FileNames.length; fn++) {                try {                    int chrNumber = Integer.parseInt(String.valueOf(j));                    BufferedReader brVCF = IOUtils.getTextGzipReader(new File(VCFfileDir, "87B18.chr" + j + ".maf005.vcf.gz").getAbsolutePath());                    BufferedWriter bwS = IOUtils.getTextWriter(new File(outputDir, "chr" + j + "_" + FileNames[fn] + "_RACount.txt").getAbsolutePath());                    bwS.write("gene\t");                    bwS.write("count");                    bwS.newLine();                    //2.创建一个基因list                    GeneFeature gf = new GeneFeature(annotationfile);                    HashSet<String> geneName = new HashSet<>();                    for (int i = 0; i < gf.genes.length; i++) {                        String name = gf.genes[i].geneName;                        int chr = gf.genes[i].geneRange.chr;                        if (chr == chrNumber) {                            geneName.add(name);                        }                    }                    String[] geneNames = geneName.toArray(new String[geneName.size()]);                    Arrays.sort(geneNames);                    //3.创建计数矩阵并将其初始化为0                    int[] count = new int[geneNames.length];                    for (int m = 0; m < geneNames.length; m++) {                        count[m] = 0;                    }                    System.out.println("Finished initializing count matrix");                    //4.对VCF文件读入每一行进行处理输出MAF<0.05的SNPfile矩阵                    String[] VCF = null;                    String tempVCF = null;                    //4.1根据FileName定下所筛选的TSS上游的位置范围                    int DiscontrolS = Integer.parseInt(FileNames[fn].split("_")[0].replace("k", "")) * 1000;                    int DiscontrolE = Integer.parseInt(FileNames[fn].split("_")[1].replace("k", "")) * 1000;                    System.out.println(DiscontrolE + "\t" + DiscontrolS);                    HashMap<String, Integer> VCFMap = new HashMap();                    int countline = 0;                    while ((tempVCF = brVCF.readLine()) != null) {                        countline++;                        if (countline % 5000 == 0) {                            System.out.print(countline + "\n");                        }                        if (tempVCF.startsWith("#")) {                            continue;                        }                        VCF = tempVCF.split("\t");                        int snpsite = Integer.parseInt(VCF[1]);//                        int TSSrow = Integer.MAX_VALUE;                        for (int l = 0; l < geneNames.length; l++) {                            int strand = gf.getGeneStrand(gf.getGeneIndex(geneNames[l]));                            int startsite = gf.getGeneStart(gf.getGeneIndex(geneNames[l]));                            int endsite = gf.getGeneEnd(gf.getGeneIndex(geneNames[l]));                            int distance = Integer.MAX_VALUE;                            if (strand == 1) {                                distance = startsite - snpsite;                            } else {                                distance = snpsite - endsite;                            }                            if (distance >= DiscontrolS && distance < DiscontrolE) {                                count[l]++;                            }                        }                    }                    for (int m = 0; m < geneNames.length; m++) {                        bwS.write(geneNames[m] + "\t");                        bwS.write(count[m] + "\t");                        bwS.newLine();                    }                    brVCF.close();                    bwS.flush();                    bwS.close();                } catch (Exception e) {                    e.printStackTrace();                }            }        });    }    public void changeName() {        String infileS = "/data1/home/xiaohan/rareallele/fastQTL/chr36.vcf";        String outputDir = "/data1/home/xiaohan/rareallele/fastQTL";        BufferedReader br = IOUtils.getTextReader(infileS);        BufferedWriter bw = IOUtils.getTextWriter(new File(outputDir, "Chr36.vcf").getAbsolutePath());        String temp = null;        String[] temps = null;        String[] tems = null;        try {            while ((temp = br.readLine()) != null) {                if (temp.startsWith("#")) {                    temps = temp.split("\t");                    for (int i = 0; i < 1; i++) {                        tems = temps[i].split("]");                        bw.write("#" + tems[1] + "\t");                    }                    for (int i = 1; i < temps.length; i++) {                        tems = temps[i].split("]");                        bw.write(tems[1] + "\t");                    }                    bw.newLine();                } else {                    bw.write(temp);                    bw.newLine();                }            }            bw.flush();            bw.close();            br.close();        } catch (Exception e) {            e.printStackTrace();        }    }    public void getGTvcf() {        String inputDir = "/data2/xiaohan/sub7/";        String outputDir = "/data2/xiaohan/GT/S7";        HashSet<String> nameSet = new HashSet<String>();        File[] fs = new File(inputDir).listFiles();        fs = IOUtils.listFilesEndsWith(fs, "vcf.gz");        for (int i = 0; i < fs.length; i++) {            if (fs[i].isHidden()) {                continue;            }//            String[] SampleName = fs[i].getName().split("\\.");//            String Name = SampleName[0].replace(SampleName[0].substring(0, 3), "");            String Name = fs[i].getName().split("\\.")[0].split("p")[1];            nameSet.add(Name);            System.out.println(Name);        }        nameSet.stream().forEach((String p) -> {            try {                System.out.println("Start reading file snp" + p + "vcf.gz");                BufferedReader br = IOUtils.getTextGzipReader(new File(inputDir, "snp" + p + ".vcf.gz").getAbsolutePath());                BufferedWriter bw = IOUtils.getTextGzipWriter(new File(outputDir, "chr" + p + "GT.vcf.gz").getAbsolutePath());                String temp = null;                String[] temps = null;                String[] tems = null;//                S3//                String name = "B18-E007,B18-E010,B18-E011,B18-E014,B18-E016,B18-E018,B18-E029,B18-E032,B18-E035,B18-E043,B18-E045,B18-E046,B18-E049,B18-E051,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E089,B18-E097,B18-E099,B18-E115,B18-E118,B18-E124,B18-E127,B18-E134,B18-E138,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E228,B18-E233,B18-E236,B18-E237,B18-E242,B18-E244,B18-E245,B18-E252,B18-E253,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E348,B18-E355,B18-E356,B18-E357";//                S7                String name = "B18-E002,B18-E007,B18-E008,B18-E011,B18-E014,B18-E018,B18-E023,B18-E024,B18-E029,B18-E032,B18-E038,B18-E043,B18-E045,B18-E046,B18-E049,B18-E051,B18-E052,B18-E062,B18-E065,B18-E070,B18-E072,B18-E074,B18-E081,B18-E082,B18-E083,B18-E087,B18-E089,B18-E097,B18-E099,B18-E115,B18-E118,B18-E124,B18-E127,B18-E138,B18-E139,B18-E141,B18-E152,B18-E166,B18-E170,B18-E180,B18-E184,B18-E185,B18-E188,B18-E199,B18-E203,B18-E204,B18-E205,B18-E210,B18-E214,B18-E215,B18-E218,B18-E219,B18-E227,B18-E228,B18-E233,B18-E236,B18-E237,B18-E242,B18-E244,B18-E245,B18-E252,B18-E256,B18-E262,B18-E265,B18-E267,B18-E270,B18-E271,B18-E273,B18-E277,B18-E280,B18-E286,B18-E288,B18-E289,B18-E290,B18-E298,B18-E299,B18-E305,B18-E306,B18-E312,B18-E316,B18-E318,B18-E320,B18-E324,B18-E330,B18-E332,B18-E335,B18-E337,B18-E346,B18-E347,B18-E355,B18-E356,B18-E357";                String[] names = name.split(",");                while ((temp = br.readLine()) != null) {                    if (temp.startsWith("##")) {                        continue;                    }                    if (temp.startsWith("#C")) {                        temps = temp.split("\t");                        for (int i = 0; i < 9; i++) {                            bw.write(temps[i] + "\t");                        }                        for (int j = 0; j < names.length - 1; j++) {                            bw.write(names[j] + "\t");                        }                        bw.write(names[names.length - 1]);                        bw.newLine();                        continue;                    }                    temps = temp.split("\t");                    for (int i = 0; i < 2; i++) {                        bw.write(temps[i] + "\t");                    }                    //ID                    bw.write("snp_" + temps[0] + "_" + temps[1] + "\t");                    //REF ALT                    for (int i = 3; i < 5; i++) {                        bw.write(temps[i] + "\t");                    }                    //QUAL FILTER                    for (int i = 5; i < 7; i++) {                        bw.write("." + "\t");                    }                    bw.write("INFO" + "\t" + "GT" + "\t");                    for (int i = 9; i < temps.length; i++) {                        tems = temps[i].split(":");                        bw.write(tems[0] + "\t");                    }                    bw.newLine();                }                bw.flush();                bw.close();                br.close();            } catch (Exception e) {                e.printStackTrace();            }        });    }    public static void main(String[] args) throws IOException {        new rareallele();    }}